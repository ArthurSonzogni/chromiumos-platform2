// Copyright 2023 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.heartd.mojom;

// Control interface exposed by heartd. Chrome can use this interface to control
// the behavior of heartd.
//
// NextMinVersion: 0, NextIndex: 0
interface HeartdControl {
};

// Heartbeat service interface exposed by heartd. Clients can use this interface
// to register the service and send heartbeat to heartd.
//
// NextMinVersion: 0, NextIndex: 1
interface HeartbeatService {
  // Each ServiceName can only register one heartbeat service. We reject second
  // registration by dropping the `Pacemaker` mojo connection directly.
  // After registration, heartd starts to verify the heartbeat consistency. So
  // clients are expected to send heartbeat once registered. If the mojo
  // connection of `Pacemaker` is dropped by the clients before calling
  // `StopMonitor`, we assume that something bad happens and will treat it as
  // one missing heartbeat when verification.
  Register@0(
    ServiceName name,
    HeartbeatServiceArgument argument,
    pending_receiver<Pacemaker> receiver) => (bool success);
};

struct HeartbeatServiceArgument {
};

// Pacemaker interface. Clients hold the remote and use this to send heartbeat
// or stop the service.
//
// NextMinVersion: 1, NextIndex: 2
interface Pacemaker {
  // Clients have to call this method periodically to indicate they are alive.
  // Please call this at most once in a minute to minimize power consumption.
  SendHeartbeat@0() => ();
  // After calling this method, heartd will do the necessary clean up. Clients
  // can drop the connection safely after the callback is invoked.
  StopMonitor@1() => ();
};

// Adding new service needs a security review. Please reach out to the heartd
// service owner as early as possible.
[Extensible]
enum ServiceName {
  [Default] kUnmappedEnumField = 0,
  kKiosk = 1,
};
