// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef LIBBRILLO_BRILLO_BLKDEV_UTILS_DISK_IOSTAT_H_
#define LIBBRILLO_BRILLO_BLKDEV_UTILS_DISK_IOSTAT_H_

#include <cstdint>
#include <optional>

#include <base/files/file_path.h>
#include <base/time/time.h>
#include <base/types/strong_alias.h>
#include <brillo/brillo_export.h>

namespace brillo {

// Class for accessing I/O statistics of a device.
// Usage:
//   DiskIoStat iostat(path_to_the_sys_block_dev);
//   DiskIoStat::Snapshot stat_snap = iostat.GetSnapshot();
//   DiskIoStat::Snapshot other_snap = iostat.GetSnapshot();
//   DiskIoStat::Delta stat_delta = other_snap.Delta(stat_snap);
//   uint64_t snap_read_sectors = stat_snap.GetReadSectors();
//   uint64_t delta_read_sectors = stat_delta->GetReadSectors();
//
//   Note: Delta requires "->" for member access instead of "." due to
//   StrongAlias implementation details.
class BRILLO_EXPORT DiskIoStat {
 public:
  class Snapshot;
  using Delta = base::StrongAlias<class DeltaTag, Snapshot>;

  explicit DiskIoStat(const base::FilePath& dev_sys_path);
  DiskIoStat(const DiskIoStat&) = delete;
  DiskIoStat(DiskIoStat&&) = delete;
  DiskIoStat& operator=(const DiskIoStat&) = delete;
  DiskIoStat& operator=(DiskIoStat&&) = delete;

  std::optional<Snapshot> GetSnapshot();

  struct Stat {
    uint64_t read_ios;
    uint64_t read_merges;
    uint64_t read_sectors;
    uint64_t read_ticks;
    uint64_t write_ios;
    uint64_t write_merges;
    uint64_t write_sectors;
    uint64_t write_ticks;
    uint64_t in_flight;
    uint64_t io_ticks;
    uint64_t time_in_queue;
    std::optional<uint64_t> discard_ios;
    std::optional<uint64_t> discard_merges;
    std::optional<uint64_t> discard_sectors;
    std::optional<uint64_t> discard_ticks;
  };

  class Snapshot {
   public:
    Snapshot() : timestamp_(base::Time().since_origin()) {}
    Snapshot(base::TimeDelta timestamp, const Stat& stat)
        : timestamp_(timestamp), stat_(stat) {}
    Snapshot(const Snapshot&) = default;
    Snapshot& operator=(const Snapshot&) = default;
    ~Snapshot() = default;

    // Returns if the snapshot is generated by DiskIoStat, and not a default
    // instance.
    bool IsValid() const { return timestamp_ != base::Time().since_origin(); }

    // Generates a Delta between this and supplied snapshot.
    Delta Delta(const Snapshot&) const;

    // Data fields accessors.
    base::TimeDelta GetTimestamp() const;
    const Stat& GetRawStat() const;
    base::TimeDelta GetReadTime() const;
    uint64_t GetReadSectors() const;
    base::TimeDelta GetWriteTime() const;
    uint64_t GetWrittenSectors() const;
    base::TimeDelta GetIoTime() const;
    std::optional<base::TimeDelta> GetDiscardTime() const;

   private:
    base::TimeDelta timestamp_;
    Stat stat_;
  };

 private:
  const base::FilePath dev_sys_path_;
};

}  // namespace brillo

#endif  // LIBBRILLO_BRILLO_BLKDEV_UTILS_DISK_IOSTAT_H_
