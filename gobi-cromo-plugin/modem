#!/bin/sh
# Copyright (c) 2009 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a wrapper around a lot of different DBus calls, written in sh; this is
# meant to replace parts of flimflam-test, and also to be callable from crosh.

. /usr/lib/mm.sh

# Generates a small snippet of code to take a single argument out of our
# parameter list, and complain (and exit) if it's not present. Used in other
# places like: $(needarg foo), which binds foo to $1.
needarg () {
	# We need to echo eval here because the part of bash that understands
	# variable assignments has already run by the time we substitute in the
	# text of $(needarg foo) - i.e., bash will try to execute 'foo="$1"' as
	# a *command*, which it isn't. The eval forces bash to reparse the code
	# before executing it.
	echo eval "$1=\"\$1\";
	          [ -z \"\$$1\" ] && echo 'Missing arg: $1' && usage;
	          shift"
}

activate_manual () {
	$(needarg modem)
	args=$(echo dict:string:string:"$@" | sed -e 's/ /,/g')
	dbus "$modem" $IMODEM_CDMA.ActivateManualDebug "$args"
}

activate () {
	$(needarg modem)
	# Work around braindead crosh quoting semantics (i.e., there are none,
	# arguments are tokenized on spaces). Sigh.
	carrier=$(echo "$@")
	[ -z "$carrier" ] && usage
	dbus "$modem" $IMODEM_CDMA.Activate "string:$carrier"
}

connect () {
	$(needarg modem)
	# Work around braindead quoting again...
	args=$(echo "$@")
	[ -z "$args" ] && args='ignored'
	dbus "$modem" $IMODEM.Connect "string:$args"
}

factory_reset () {
	$(needarg modem)
	$(needarg spc)
	dbus "$modem" $IMODEM.FactoryReset "string:$spc"
}

status () {
	/usr/share/userfeedback/scripts/mm-status
}

usage () {
	echo "Usage: $0 <command> [args...]"
	echo "  activate <modem> <carrier>         Activate modem"
	echo "  activate-manual <modem> [args...]  Activate modem manually"
	echo "  connect <modem> [args...]          Connect modem"
	echo "  factory-reset <modem> <spc>        Factory-reset the modem"
	echo "  status                             Display modem status"
	exit 0
}

$(needarg cmd)
case "$cmd" in
	activate)
		activate "$@"
		;;
	activate-manual)
		activate_manual "$@"
		;;
	connect)
		connect "$@"
		;;
	factory-reset)
		factory_reset "$@"
		;;
	status)
		status "$@"
		;;
	*)
		usage
		;;
esac
