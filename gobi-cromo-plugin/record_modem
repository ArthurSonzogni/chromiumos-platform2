#!/usr/bin/python
# Copyright (c) 2009 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Stuff IMEI, MEID and other data into a spreadsheet form

import json
import os
import sys
import urllib
import urllib2


# Hack: mm reads MMPROVIDER at load time.  CLs in the pipe to fix mm
# to default to org.chromium
os.environ['MMPROVIDER'] = 'org.chromium'
# Double hack:  connman test scripts will be moving soon from
# /usr/local/lib/flimflam... to /usr/lib/flimflam....
sys.path.append(os.environ.get('SYSROOT', '') + '/usr/local/lib/flimflam/test')
sys.path.append(os.environ.get('SYSROOT', '') + '/usr/lib/flimflam/test')
import mm

FORMKEY = 'dG1KWmR4VWJ1amJ3c0xZM25tOW1HaVE6MQ'

MANUAL = ('https://spreadsheets.google.com/a/google.com/viewform?formkey=' +
          FORMKEY)


def CurrentUserFromLocalState():
  """Return first logged-in-user from the JSON in /home/chronos/Local State."""
  local_state_path = os.getenv('DATA_DIR', '/home/chronos')
  local_state = open(os.path.join(local_state_path,
                                  'Local State'))
  state = json.load(local_state)
  return state['LoggedInUsers'][0]


def GetInputWithDefault(prompt, default):
  value = None
  while not value:
    value = raw_input(prompt % default)
    if not value:
      value = default
  return value

manager = mm.ModemManager()
path = mm.PickOneModem(manager, '')

simple_modem = manager.SimpleModem(path)
sprops = simple_modem.GetStatus()

output = {}

output['imei'] = sprops['imei']
output['meid'] = sprops['meid']

print 'IMEI:', output['imei']
print 'MEID:', output['meid']

try:
  default_user = CurrentUserFromLocalState()
except (AttributeError, IOError, KeyError, TypeError):
  default_user = ''

output['user'] = GetInputWithDefault('User [%s] (x for none): ', default_user)

# %s will be empty
output['asset_tag'] = GetInputWithDefault('%sAsset tag (six digits): ', '')

# The form submission uses fieldnames of 'entry.n.single' for the nth field.
request = dict([('entry.%d.single' % i, output[field])
                for (i, field) in
                enumerate(['user', 'imei', 'meid', 'asset_tag'])])

request['submit'] = 'Submit'

url = ('https://spreadsheets.google.com/a/google.com/'
       'formResponse?formkey=%s&ifq') % FORMKEY

try:
  fetched = urllib2.urlopen(url, urllib.urlencode(request))
except urllib2.URLError, e:
  print 'HTTP fetch failed:', e
  print 'URL was:', url
  print 'You can fill out this information manually at\n\t', MANUAL
  sys.exit(1)

reply = fetched.read()

if 'appear in my' in reply:
  print 'Information successfully submitted'
else:
  print reply
  print 'ERROR\n'
  print 'Your information may not have been submitted.  Investigate'
  print 'the above output or fill out the form manually at\n\t', MANUAL
  sys.exit(2)
