#!/usr/bin/python
# Copyright (c) 2009 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Stuff IMEI, MEID and other data into a spreadsheet form

import json
import logging
import logging.handlers
import os
import sys
import subprocess
import time
import urllib
import urllib2

# Hack: mm reads MMPROVIDER at load time.  CLs in the pipe to fix mm
# to default to org.chromium
os.environ['MMPROVIDER'] = 'org.chromium'
# Double hack:  connman test scripts will be moving soon from
# /usr/local/lib/flimflam... to /usr/lib/flimflam....
sys.path.append(os.environ.get('SYSROOT', '') + '/usr/local/lib/flimflam/test')
sys.path.append(os.environ.get('SYSROOT', '') + '/usr/lib/flimflam/test')
import mm

FORMKEY = 'dGllYTJlUE91NGFDUnZlN01WUzZEbkE6MQ'

# If this directory exists, we have already succeeded
SUCCESS_LOCATION = '/mnt/stateful_partition/var/lib/record_modem_complete'

def RecordSuccess():
  rc = subprocess.call(['/usr/bin/sudo',
                        'mkdir',
                        '-p',
                        SUCCESS_LOCATION])
  if not rc:
    logging.info('Successfully logged MEID')

def AlreadySucceeded():
  try:
    os.stat(SUCCESS_LOCATION)
    return True
  except OSError:
    return False

def AttemptSubmit(output):
  # The form submission uses fieldnames of 'entry.n.single' for the nth field.
  request = dict([('entry.%d.single' % i, output[field])
                  for (i, field) in
                  enumerate(['serial', 'imei', 'meid'])])

  request['submit'] = 'Submit'

  url = ('https://spreadsheets.google.com/a/google.com/'
         'formResponse?formkey=%s&ifq') % FORMKEY

  try:
    fetched = urllib2.urlopen(url, urllib.urlencode(request))
  except urllib2.URLError, e:
    logging.error('HTTP fetch failed: url %s error %s',url, e)
    sys.exit(1)

  reply = fetched.read()

  if 'appear in my' in reply:
    print 'Information successfully submitted'
  else:
    logging.error('Bad reply: ',reply)
    sys.exit(2)


def GetModemInformation(output):
  manager = mm.ModemManager()
  path = mm.PickOneModem(manager, '')

  modem = manager.Modem(path)
  simple_modem = manager.SimpleModem(path)
  modem.Enable(True)
  sprops = simple_modem.GetStatus()

  output['imei'] = str(sprops['imei'])
  output['meid'] = str(sprops['meid'])
  logging.info(output)


def GetSerialNumber(output):
  output['serial'] = subprocess.Popen(
      ['sudo',
       '/usr/local/sbin/dmidecode',
       '--string',
       'system-serial-number', ],
      stdout=subprocess.PIPE).communicate()[0].rstrip()

def main():
  if '--immediate' not in sys.argv:
    # Another hack:
    # We don't have an easy way to wait until cromo is
    # up and running, so we just wait a while
    time.sleep(60)

  logger = logging.getLogger()
  logger.setLevel(logging.INFO)
  handler = logging.handlers.SysLogHandler('/dev/log')
  handler.setFormatter(
      logging.Formatter('%(filename)s: %(levelname)s %(message)s'))
  logger.addHandler(handler)

  if AlreadySucceeded():
    logging.info('MEID already logged.  Exiting')
    return

  output = {}
  GetSerialNumber(output)
  GetModemInformation(output)

  AttemptSubmit(output)
  RecordSuccess()

if __name__ == '__main__':
  try:
    exit(main())
  except Exception, e:
    logging.error(e)
    exit(1)
