/*===========================================================================
  FILE:
  mock_gobi_sdk_wrapper.h,
  derived from
  gobi_sdk_wrapper.h, QCWWANCMAPI2k.h

  DESCRIPTION:
  QUALCOMM Wireless WAN Connection Manager API for Gobi 2000

  Copyright (C) 2009 QUALCOMM Incorporated. All rights reserved.
  QUALCOMM Proprietary/GTDR

  All data and information contained in or disclosed by this document is
  confidential and proprietary information of QUALCOMM Incorporated and all
  rights therein are expressly reserved.  By accepting this material the
  recipient agrees that this material and the information contained therein
  is held in confidence and in trust and will not be used, copied, reproduced
  in whole or in part, nor its contents revealed in any manner to others
  without the express written permission of QUALCOMM Incorporated.
  ==========================================================================*/

// This file autogenerated with gmock_gen.py from the gmock-1.5.0 distribution
// Then hand-modified to exclude 11- and 12- argument functions

namespace gobi {

class MockSdk : public gobi::Sdk {
 public:
  virtual ~MockSdk() {}
  void Init() {}
  MOCK_METHOD2(QCWWANEnumerateDevices,
      ULONG(BYTE * pDevicesSize, BYTE * pDevices));
  MOCK_METHOD2(QCWWANConnect,
      ULONG(CHAR * pDeviceNode, CHAR * pDeviceKey));
  MOCK_METHOD0(QCWWANDisconnect,
      ULONG());
  MOCK_METHOD4(QCWWANGetConnectedDeviceID,
      ULONG(ULONG deviceNodeSize, CHAR * pDeviceNode, ULONG deviceKeySize, CHAR * pDeviceKey));
  MOCK_METHOD1(GetSessionState,
      ULONG(ULONG * pState));
  MOCK_METHOD1(GetSessionDuration,
      ULONG(ULONGLONG * pDuration));
  MOCK_METHOD1(GetDormancyState,
      ULONG(ULONG * pState));
  MOCK_METHOD1(GetAutoconnect,
      ULONG(ULONG * pSetting));
  MOCK_METHOD1(SetAutoconnect,
      ULONG(ULONG setting));
  /* Too long to mock
  MOCK_METHOD12(GetDefaultProfile,
      ULONG(ULONG profileType, ULONG * pPDPType, ULONG * pIPAddress, ULONG * pPrimaryDNS, ULONG * pSecondaryDNS, ULONG * pAuthentication, BYTE nameSize, CHAR * pName, BYTE apnSize, CHAR * pAPNName, BYTE userSize, CHAR * pUsername));
  */
  MOCK_METHOD7(StartDataSession,
      ULONG(ULONG * pTechnology, CHAR * pAPNName, ULONG * pAuthentication, CHAR * pUsername, CHAR * pPassword, ULONG * pSessionId, ULONG * pFailureReason));
  MOCK_METHOD1(StopDataSession,
      ULONG(ULONG sessionId));
  MOCK_METHOD1(GetIPAddress,
      ULONG(ULONG * pIPAddress));
  MOCK_METHOD4(GetConnectionRate,
      ULONG(ULONG * pCurrentChannelTXRate, ULONG * pCurrentChannelRXRate, ULONG * pMaxChannelTXRate, ULONG * pMaxChannelRXRate));
  MOCK_METHOD6(GetPacketStatus,
      ULONG(ULONG * pTXPacketSuccesses, ULONG * pRXPacketSuccesses, ULONG * pTXPacketErrors, ULONG * pRXPacketErrors, ULONG * pTXPacketOverflows, ULONG * pRXPacketOverflows));
  MOCK_METHOD2(GetByteTotals,
      ULONG(ULONGLONG * pTXTotalBytes, ULONGLONG * pRXTotalBytes));
  MOCK_METHOD1(SetMobileIP,
      ULONG(ULONG mode));
  MOCK_METHOD1(GetMobileIP,
      ULONG(ULONG * pMode));
  MOCK_METHOD2(SetActiveMobileIPProfile,
      ULONG(CHAR * pSPC, BYTE index));
  MOCK_METHOD1(GetActiveMobileIPProfile,
      ULONG(BYTE * pIndex));
  /* Too long to mock
  MOCK_METHOD12(SetMobileIPProfile,
      ULONG(CHAR * pSPC, BYTE index, BYTE * pEnabled, ULONG * pAddress, ULONG * pPrimaryHA, ULONG * pSecondaryHA, BYTE * pRevTunneling, CHAR * pNAI, ULONG * pHASPI, ULONG * pAAASPI, CHAR * pMNHA, CHAR * pMNAAA));
  MOCK_METHOD12(GetMobileIPProfile,
      ULONG(BYTE index, BYTE * pEnabled, ULONG * pAddress, ULONG * pPrimaryHA, ULONG * pSecondaryHA, BYTE * pRevTunneling, BYTE naiSize, CHAR * pNAI, ULONG * pHASPI, ULONG * pAAASPI, ULONG * pHAState, ULONG * pAAAState));
  */
  MOCK_METHOD8(SetMobileIPParameters,
      ULONG(CHAR * pSPC, ULONG * pMode, BYTE * pRetryLimit, BYTE * pRetryInterval, BYTE * pReRegPeriod, BYTE * pReRegTraffic, BYTE * pHAAuthenticator, BYTE * pHA2002bis));
  MOCK_METHOD7(GetMobileIPParameters,
      ULONG(ULONG * pMode, BYTE * pRetryLimit, BYTE * pRetryInterval, BYTE * pReRegPeriod, BYTE * pReRegTraffic, BYTE * pHAAuthenticator, BYTE * pHA2002bis));
  MOCK_METHOD1(GetLastMobileIPError,
      ULONG(ULONG * pError));
  MOCK_METHOD1(GetANAAAAuthenticationStatus,
      ULONG(ULONG * pStatus));
  MOCK_METHOD3(GetSignalStrengths,
      ULONG(ULONG * pArraySizes, INT8 * pSignalStrengths, ULONG * pRadioInterfaces));
  MOCK_METHOD2(GetRFInfo,
      ULONG(BYTE * pInstanceSize, BYTE * pInstances));
  MOCK_METHOD2(PerformNetworkScan,
      ULONG(BYTE * pInstanceSize, BYTE * pInstances));
  MOCK_METHOD4(InitiateNetworkRegistration,
      ULONG(ULONG regType, WORD mcc, WORD mnc, ULONG rat));
  MOCK_METHOD1(InitiateDomainAttach,
      ULONG(ULONG action));
  MOCK_METHOD7(GetServingNetwork,
      ULONG(ULONG * pRegistrationState, ULONG * pRAN, BYTE * pRadioIfacesSize, BYTE * pRadioIfaces, ULONG * pRoaming, WORD *pMCC, WORD * pMNC));
  MOCK_METHOD2(GetServingNetworkCapabilities,
      ULONG(BYTE * pDataCapsSize, BYTE * pDataCaps));
  MOCK_METHOD1(GetDataBearerTechnology,
      ULONG(ULONG * pDataBearer));
  MOCK_METHOD6(GetHomeNetwork,
      ULONG(WORD * pMCC, WORD * pMNC, BYTE nameSize, CHAR * pName, WORD * pSID, WORD * pNID));
  MOCK_METHOD2(SetNetworkPreference,
      ULONG(ULONG technologyPref, ULONG duration));
  MOCK_METHOD3(GetNetworkPreference,
      ULONG(ULONG * pTechnologyPref, ULONG * pDuration, ULONG * pPersistentTechnologyPref));
  MOCK_METHOD7(SetCDMANetworkParameters,
      ULONG(CHAR * pSPC, BYTE * pForceRev0, BYTE * pCustomSCP, ULONG * pProtocol, ULONG * pBroadcast, ULONG * pApplication, ULONG * pRoaming));
  /*  Too long to mock
    MOCK_METHOD11(GetCDMANetworkParameters,
      ULONG(BYTE * pSCI, BYTE * pSCM, BYTE * pRegHomeSID, BYTE * pRegForeignSID, BYTE * pRegForeignNID, BYTE * pForceRev0, BYTE * pCustomSCP, ULONG * pProtocol, ULONG * pBroadcast, ULONG * pApplication, ULONG * pRoaming));
  */

  MOCK_METHOD1(GetACCOLC,
      ULONG(BYTE * pACCOLC));
  MOCK_METHOD2(SetACCOLC,
      ULONG(CHAR * pSPC, BYTE accolc));
  MOCK_METHOD6(GetDeviceCapabilities,
      ULONG(ULONG * pMaxTXChannelRate, ULONG * pMaxRXChannelRate, ULONG * pDataServiceCapability, ULONG * pSimCapability, ULONG * pRadioIfacesSize, BYTE * pRadioIfaces));
  MOCK_METHOD2(GetManufacturer,
      ULONG(BYTE stringSize, CHAR * pString));
  MOCK_METHOD2(GetModelID,
      ULONG(BYTE stringSize, CHAR * pString));
  MOCK_METHOD2(GetFirmwareRevision,
      ULONG(BYTE stringSize, CHAR * pString));
  MOCK_METHOD6(GetFirmwareRevisions,
      ULONG(BYTE amssSize, CHAR * pAMSSString, BYTE bootSize, CHAR * pBootString, BYTE priSize, CHAR * pPRIString));
  MOCK_METHOD5(GetFirmwareInfo,
      ULONG(ULONG * pFirmwareID, ULONG * pTechnology, ULONG * pCarrier, ULONG * pRegion, ULONG * pGPSCapability));
  MOCK_METHOD4(GetVoiceNumber,
      ULONG(BYTE voiceNumberSize, CHAR * pVoiceNumber, BYTE minSize, CHAR * pMIN));
  MOCK_METHOD2(GetIMSI,
      ULONG(BYTE stringSize, CHAR * pString));
  MOCK_METHOD6(GetSerialNumbers,
      ULONG(BYTE esnSize, CHAR * pESNString, BYTE imeiSize, CHAR * pIMEIString, BYTE meidSize, CHAR * pMEIDString));
  MOCK_METHOD2(SetLock,
      ULONG(ULONG state, CHAR * pCurrentPIN));
  MOCK_METHOD1(QueryLock,
      ULONG(ULONG * pState));
  MOCK_METHOD2(ChangeLockPIN,
      ULONG(CHAR * pCurrentPIN, CHAR * pDesiredPIN));
  MOCK_METHOD2(GetHardwareRevision,
      ULONG(BYTE stringSize, CHAR * pString));
  MOCK_METHOD1(GetPRLVersion,
      ULONG(WORD * pPRLVersion));
  MOCK_METHOD2(GetERIFile,
      ULONG(ULONG * pFileSize, BYTE * pFile));
  MOCK_METHOD1(ActivateAutomatic,
      ULONG(const CHAR * pActivationCode));
  MOCK_METHOD8(ActivateManual,
      ULONG(CHAR * pSPC, WORD sid, CHAR * pMDN, CHAR * pMIN, ULONG prlSize, BYTE * pPRL, CHAR * pMNHA, CHAR * pMNAAA));
  MOCK_METHOD1(ResetToFactoryDefaults,
      ULONG(CHAR * pSPC));
  MOCK_METHOD1(GetActivationState,
      ULONG(ULONG * pActivationState));
  MOCK_METHOD1(SetPower,
      ULONG(ULONG powerMode));
  MOCK_METHOD1(GetPower,
      ULONG(ULONG * pPowerMode));
  MOCK_METHOD2(GetOfflineReason,
      ULONG(ULONG * pReasonMask, ULONG * pbPlatform));
  MOCK_METHOD2(GetNetworkTime,
      ULONG(ULONGLONG * pTimeCount, ULONG * pTimeSource));
  MOCK_METHOD1(ValidateSPC,
      ULONG(CHAR * pSPC));
  MOCK_METHOD3(DeleteSMS,
      ULONG(ULONG storageType, ULONG * pMessageIndex, ULONG * pMessageTag));
  MOCK_METHOD4(GetSMSList,
      ULONG(ULONG storageType, ULONG * pRequestedTag, ULONG * pMessageListSize, BYTE * pMessageList));
  MOCK_METHOD6(GetSMS,
      ULONG(ULONG storageType, ULONG messageIndex, ULONG * pMessageTag, ULONG * pMessageFormat, ULONG * pMessageSize, BYTE * pMessage));
  MOCK_METHOD3(ModifySMSStatus,
      ULONG(ULONG storageType, ULONG messageIndex, ULONG messageTag));
  MOCK_METHOD5(SaveSMS,
      ULONG(ULONG storageType, ULONG messageFormat, ULONG messageSize, BYTE * pMessage, ULONG * pMessageIndex));
  MOCK_METHOD4(SendSMS,
      ULONG(ULONG messageFormat, ULONG messageSize, BYTE * pMessage, ULONG * pMessageFailureCode));
  MOCK_METHOD4(GetSMSCAddress,
      ULONG(BYTE addressSize, CHAR * pSMSCAddress, BYTE typeSize, CHAR * pSMSCType));
  MOCK_METHOD2(SetSMSCAddress,
      ULONG(CHAR * pSMSCAddress, CHAR * pSMSCType));
  MOCK_METHOD5(UIMSetPINProtection,
      ULONG(ULONG id, ULONG bEnable, CHAR * pValue, ULONG * pVerifyRetriesLeft, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD4(UIMVerifyPIN,
      ULONG(ULONG id, CHAR * pValue, ULONG * pVerifyRetriesLeft, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD5(UIMUnblockPIN,
      ULONG(ULONG id, CHAR * pPUKValue, CHAR * pNewValue, ULONG * pVerifyRetriesLeft, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD5(UIMChangePIN,
      ULONG(ULONG id, CHAR * pOldValue, CHAR * pNewValue, ULONG * pVerifyRetriesLeft, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD4(UIMGetPINStatus,
      ULONG(ULONG id, ULONG * pStatus, ULONG * pVerifyRetriesLeft, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD2(UIMGetICCID,
      ULONG(BYTE stringSize, CHAR * pString));
  MOCK_METHOD4(UIMGetControlKeyStatus,
      ULONG(ULONG id, ULONG * pStatus, ULONG * pVerifyRetriesLeft, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD4(UIMSetControlKeyProtection,
      ULONG(ULONG id, ULONG status, CHAR * pValue, ULONG * pVerifyRetriesLeft));
  MOCK_METHOD3(UIMUnblockControlKey,
      ULONG(ULONG id, CHAR * pValue, ULONG * pUnblockRetriesLeft));
  MOCK_METHOD2(GetPDSState,
      ULONG(ULONG * pEnabled, ULONG * pTracking));
  MOCK_METHOD1(SetPDSState,
      ULONG(ULONG enable));
  MOCK_METHOD2(PDSInjectTimeReference,
      ULONG(ULONGLONG systemTime, USHORT systemDiscontinuities));
  MOCK_METHOD4(GetPDSDefaults,
      ULONG(ULONG * pOperation, BYTE * pTimeout, ULONG * pInterval, ULONG * pAccuracy));
  MOCK_METHOD4(SetPDSDefaults,
      ULONG(ULONG operation, BYTE timeout, ULONG interval, ULONG accuracy));
  MOCK_METHOD2(GetXTRAAutomaticDownload,
      ULONG(ULONG * pbEnabled, USHORT * pInterval));
  MOCK_METHOD2(SetXTRAAutomaticDownload,
      ULONG(ULONG bEnabled, USHORT interval));
  MOCK_METHOD1(GetXTRANetwork,
      ULONG(ULONG * pPreference));
  MOCK_METHOD1(SetXTRANetwork,
      ULONG(ULONG preference));
  MOCK_METHOD3(GetXTRAValidity,
      ULONG(USHORT * pGPSWeek, USHORT * pGPSWeekOffset, USHORT * pDuration));
  MOCK_METHOD0(ForceXTRADownload,
      ULONG());
  MOCK_METHOD2(GetAGPSConfig,
      ULONG(ULONG * pServerAddress, ULONG * pServerPort));
  MOCK_METHOD2(SetAGPSConfig,
      ULONG(ULONG serverAddress, ULONG serverPort));
  MOCK_METHOD1(GetServiceAutomaticTracking,
      ULONG(ULONG * pbAuto));
  MOCK_METHOD1(SetServiceAutomaticTracking,
      ULONG(ULONG bAuto));
  MOCK_METHOD1(GetPortAutomaticTracking,
      ULONG(ULONG * pbAuto));
  MOCK_METHOD1(SetPortAutomaticTracking,
      ULONG(ULONG bAuto));
  MOCK_METHOD2(ResetPDSData,
      ULONG(ULONG * pGPSDataMask, ULONG * pCellDataMask));
  MOCK_METHOD3(CATSendTerminalResponse,
      ULONG(ULONG refID, ULONG dataLen, BYTE * pData));
  MOCK_METHOD3(CATSendEnvelopeCommand,
      ULONG(ULONG cmdID, ULONG dataLen, BYTE * pData));
  MOCK_METHOD2(GetSMSWake,
      ULONG(ULONG * pbEnabled, ULONG * pWakeMask));
  MOCK_METHOD2(SetSMSWake,
      ULONG(ULONG bEnable, ULONG wakeMask));
  MOCK_METHOD1(OMADMStartSession,
      ULONG(ULONG sessionType));
  MOCK_METHOD0(OMADMCancelSession,
      ULONG());
  MOCK_METHOD6(OMADMGetSessionInfo,
      ULONG(ULONG * pSessionState, ULONG * pSessionType, ULONG * pFailureReason, BYTE * pRetryCount, WORD * pSessionPause, WORD * pTimeRemaining));
  MOCK_METHOD2(OMADMGetPendingNIA,
      ULONG(ULONG * pSessionType, USHORT * pSessionID));
  MOCK_METHOD2(OMADMSendSelection,
      ULONG(ULONG selection, USHORT sessionID));
  MOCK_METHOD2(OMADMGetFeatureSettings,
      ULONG(ULONG * pbProvisioning, ULONG * pbPRLUpdate));
  MOCK_METHOD1(OMADMSetProvisioningFeature,
      ULONG(ULONG bProvisioning));
  MOCK_METHOD1(OMADMSetPRLUpdateFeature,
      ULONG(ULONG bPRLUpdate));
  MOCK_METHOD1(UpgradeFirmware,
      ULONG(CHAR * pDestinationPath));
  MOCK_METHOD6(GetImageInfo,
      ULONG(CHAR * pPath, ULONG * pFirmwareID, ULONG * pTechnology, ULONG * pCarrier, ULONG * pRegion, ULONG * pGPSCapability));
  MOCK_METHOD2(GetImageStore,
      ULONG(WORD pathSize, CHAR * pImageStorePath));
  MOCK_METHOD1(SetSessionStateCallback,
      ULONG(tFNSessionState pCallback));
  MOCK_METHOD2(SetByteTotalsCallback,
      ULONG(tFNByteTotals pCallback, BYTE interval));
  MOCK_METHOD1(SetDataCapabilitiesCallback,
      ULONG(tFNDataCapabilities pCallback));
  MOCK_METHOD1(SetDataBearerCallback,
      ULONG(tFNDataBearer pCallback));
  MOCK_METHOD1(SetDormancyStatusCallback,
      ULONG(tFNDormancyStatus pCallback));
  MOCK_METHOD1(SetMobileIPStatusCallback,
      ULONG(tFNMobileIPStatus pCallback));
  MOCK_METHOD1(SetActivationStatusCallback,
      ULONG(tFNActivationStatus pCallback));
  MOCK_METHOD1(SetPowerCallback,
      ULONG(tFNPower pCallback));
  MOCK_METHOD1(SetRoamingIndicatorCallback,
      ULONG(tFNRoamingIndicator pCallback));
  MOCK_METHOD3(SetSignalStrengthCallback,
      ULONG(tFNSignalStrength pCallback, BYTE thresholdsSize, INT8 * pThresholds));
  MOCK_METHOD1(SetRFInfoCallback,
      ULONG(tFNRFInfo pCallback));
  MOCK_METHOD1(SetLURejectCallback,
      ULONG(tFNLUReject pCallback));
  MOCK_METHOD1(SetNewSMSCallback,
      ULONG(tFNNewSMS pCallback));
  MOCK_METHOD1(SetNMEACallback,
      ULONG(tFNNewNMEA pCallback));
  MOCK_METHOD1(SetNMEAPlusCallback,
      ULONG(tFNNewNMEAPlus pCallback));
  MOCK_METHOD1(SetPDSStateCallback,
      ULONG(tFNPDSState pCallback));
  MOCK_METHOD3(SetCATEventCallback,
      ULONG(tFNCATEvent pCallback, ULONG eventMask, ULONG * pErrorMask));
  MOCK_METHOD1(SetOMADMAlertCallback,
      ULONG(tFNOMADMAlert pCallback));
  MOCK_METHOD1(SetOMADMStateCallback,
      ULONG(tFNOMADMState pCallback));
};

}  // namespace gobi
