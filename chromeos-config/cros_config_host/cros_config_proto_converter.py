#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Transforms config from /config/proto/api proto format to platform JSON."""

import argparse
import json
import sys
import os

from config.api import config_bundle_pb2
from config.api.software import brand_config_pb2


def ParseArgs(argv):
  """Parse the available arguments.

  Invalid arguments or -h cause this function to print a message and exit.

  Args:
    argv: List of string arguments (excluding program name / argv[0])

  Returns:
    argparse.Namespace object containing the attributes.
  """
  parser = argparse.ArgumentParser(
      description='Converts source proto config into platform JSON config.')
  parser.add_argument(
      '-f',
      '--files_root',
      type=str,
      help='Path to root of all local paths referenced in the config')
  parser.add_argument(
      '-c',
      '--project_config',
      type=str,
      help='Path to the source project-level protobinary file')
  parser.add_argument(
      '-p',
      '--program_config',
      type=str,
      help='Path to the source program-level protobinary file')
  parser.add_argument(
      '-o',
      '--output',
      type=str,
      help='Output file that will be generated')
  return parser.parse_args(argv)


def _Set(field, target, target_name):
  if field:
    target[target_name] = field


def TransformBuildConfigs(source_configs):
  """Transforms BuildConfig into target platform JSON schema.

  Args:
      source: list of build_config_pb2.BuildConfig source payloads
  Returns:
    list of config payloads defined in cros_config_schema.yaml
  """
  results = []
  for source in source_configs:
    for sw_config in source.software_configs:
      scan_config = sw_config.scan_config
      hw_identity = {}
      _Set(scan_config.firmware_sku, hw_identity, 'sku-id')
      _Set(scan_config.smbios_name_match, hw_identity, 'smbios-name-match')
      # Platform name is a redundant relic of mosys
      _Set(scan_config.smbios_name_match, hw_identity, 'platform-name')
      # ARM architecture
      _Set(scan_config.device_tree_compatible_match, hw_identity,
           'device-tree-compatible-match')

      brand_configs = source.brand_configs

      if not brand_configs:
        brand_configs = [brand_config_pb2.BrandConfig()]

      for brand_config in brand_configs:
        identity = hw_identity.copy()
        _Set(brand_config.scan_config.whitelabel_tag, identity,
             'whitelabel-tag')

        result = {'identity': identity}

        results.append(result)
  return results


def WriteOutput(configs, output=None):
  """Writes a list of configs to platform JSON format.

    Args:
        configs: List of config dicts defined in cros_config_schema.yaml
        output: Target file output (if None, prints to stdout)
    """
  json_output = json.dumps({
      'chromeos': {
          'configs': configs
      }},
      sort_keys=True,
      indent=2,
      separators=(',', ': '))
  if output:
    with open(output, 'w') as output_stream:
      # Using print function adds proper trailing newline.
      print(json_output, file=output_stream)
  else:
    print(json_output)


def ReadConfig(path):
  """Reads a binary proto from a file.

    Args:
        path: Path to the binary proto.
    """
  config = config_bundle_pb2.ConfigBundle()
  with open(path, 'rb') as f:
    config.ParseFromString(f.read())
  return config


def Main(files_root,
         project_config,
         program_config,
         output):
  """Transforms source proto config into platform JSON.

  Args:
    files_root: Root path to all files referenced in config.
    project_config: Source project config.
    program_config: Source program config.
    output: Output file that will be generated by the transform.
  """
  WriteOutput(
      TransformBuildConfigs(
          ReadConfig(project_config).build_configs),
      output
  )


def main(argv=None):
  """Main program which parses args and runs

  Args:
    argv: List of command line arguments, if None uses sys.argv.
  """
  if argv is None:
    argv = sys.argv[1:]
  opts = ParseArgs(argv)
  Main(opts.files_root, opts.project_config, opts.program_config, opts.output)


if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
