// Copyright 2025 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This module provides helper functions for the ccdec_[codec]_test modules.
// It is kept separate and not exposed in a common file to avoid to having all
// test modules grouped together by test harness.

use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    /// VP8 test filenames categorized by group.
    pub static ref VP8_FILENAMES: HashMap<&'static str, Vec<&'static str>> = vp8_files();
    /// VP9 test filenames categorized by profile, group and test type.
    pub static ref VP9_WEBM_FILES: HashMap<&'static str, HashMap<&'static str, HashMap<&'static str, Vec<&'static str>>>> = vp9_webm_files();
    /// H264 test filenames categorized by group.
    pub static ref H264_FILENAMES: HashMap<&'static str, Vec<&'static str>> = h264_files();
    /// H265 test filenames categorized by group.
    pub static ref H265_FILENAMES: HashMap<&'static str, Vec<&'static str>> = h265_files();
    /// H265 test filenames filed from bugs.
    pub static ref H265_FILES_FROM_BUGS: HashMap<&'static str, Vec<&'static str>> = h265_files_from_bugs();
}

#[allow(dead_code)]
/// Provides VP8 test vector files categorized by group.
pub fn vp8_files() -> HashMap<&'static str, Vec<&'static str>> {
    let mut vp8_files: HashMap<&'static str, Vec<&'static str>> = HashMap::new();
    vp8_files.insert(
        "inter_multi_coeff",
        vec![
            "test_vectors/vp8/inter_multi_coeff/vp80-03-segmentation-1408.ivf",
            "test_vectors/vp8/inter_multi_coeff/vp80-03-segmentation-1409.ivf",
            "test_vectors/vp8/inter_multi_coeff/vp80-03-segmentation-1410.ivf",
            "test_vectors/vp8/inter_multi_coeff/vp80-03-segmentation-1413.ivf",
            "test_vectors/vp8/inter_multi_coeff/vp80-04-partitions-1404.ivf",
            "test_vectors/vp8/inter_multi_coeff/vp80-04-partitions-1405.ivf",
            "test_vectors/vp8/inter_multi_coeff/vp80-04-partitions-1406.ivf",
        ],
    );
    vp8_files.insert(
        "inter_segment",
        vec!["test_vectors/vp8/inter_segment/vp80-03-segmentation-1407.ivf"],
    );
    vp8_files.insert(
        "inter",
        vec![
            "test_vectors/vp8/inter/vp80-02-inter-1402.ivf",
            "test_vectors/vp8/inter/vp80-02-inter-1412.ivf",
            "test_vectors/vp8/inter/vp80-02-inter-1418.ivf",
            "test_vectors/vp8/inter/vp80-02-inter-1424.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1403.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1425.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1426.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1427.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1432.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1435.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1436.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1437.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1441.ivf",
            "test_vectors/vp8/inter/vp80-03-segmentation-1442.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1428.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1429.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1430.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1431.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1433.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1434.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1438.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1439.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1440.ivf",
            "test_vectors/vp8/inter/vp80-05-sharpness-1443.ivf",
        ],
    );
    vp8_files.insert(
        "intra_multi_coeff",
        vec!["test_vectors/vp8/intra_multi_coeff/vp80-03-segmentation-1414.ivf"],
    );
    vp8_files.insert(
        "intra_segment",
        vec!["test_vectors/vp8/intra_segment/vp80-03-segmentation-1415.ivf"],
    );
    vp8_files.insert(
        "intra",
        vec![
            "test_vectors/vp8/intra/vp80-01-intra-1400.ivf",
            "test_vectors/vp8/intra/vp80-01-intra-1411.ivf",
            "test_vectors/vp8/intra/vp80-01-intra-1416.ivf",
            "test_vectors/vp8/intra/vp80-01-intra-1417.ivf",
            "test_vectors/vp8/intra/vp80-03-segmentation-1401.ivf",
        ],
    );
    vp8_files.insert(
        "comprehensive",
        vec![
            "test_vectors/vp8/vp80-00-comprehensive-001.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-002.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-003.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-004.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-005.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-006.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-007.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-008.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-009.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-010.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-011.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-012.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-013.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-014.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-015.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-016.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-017.ivf",
            "test_vectors/vp8/vp80-00-comprehensive-018.ivf",
        ],
    );
    vp8_files
}

#[allow(dead_code)]
/// These files come from the WebM test streams and are grouped according to
/// (rounded down) level, i.e. "group1" consists of level 1 and 1.1 streams,
/// "group2" of level 2 and 2.1, etc. This helps to keep together tests with
/// similar amounts of intended behavior/expected stress on devices.
pub fn vp9_webm_files(
) -> HashMap<&'static str, HashMap<&'static str, HashMap<&'static str, Vec<&'static str>>>> {
    let mut vp9_webm_files = HashMap::new();
    // --- Profile 0 ---
    let mut profile_0_groups = HashMap::new();
    // Profile 0 - Group 1
    let mut p0_group1 = HashMap::new();
    p0_group1.insert(
        "buf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_256X144_fr15_bd8_8buf_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_256X144_fr15_bd8_8buf_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_256X144_fr15_bd8_8buf_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_384X192_fr30_bd8_8buf_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_384X192_fr30_bd8_8buf_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_384X192_fr30_bd8_8buf_l11.ivf",
        ],
    );
    p0_group1.insert(
        "frm_resize",
        vec![
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_256X144_fr15_bd8_frm_resize_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_256X144_fr15_bd8_frm_resize_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_256X144_fr15_bd8_frm_resize_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_384X192_fr30_bd8_frm_resize_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_384X192_fr30_bd8_frm_resize_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_384X192_fr30_bd8_frm_resize_l11.ivf",
        ],
    );
    p0_group1.insert(
        "gf_dist",
        vec![
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_256X144_fr15_bd8_gf_dist_4_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_256X144_fr15_bd8_gf_dist_4_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_256X144_fr15_bd8_gf_dist_4_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_384X192_fr30_bd8_gf_dist_4_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_384X192_fr30_bd8_gf_dist_4_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_384X192_fr30_bd8_gf_dist_4_l11.ivf",
        ],
    );
    p0_group1.insert(
        "odd_size",
        vec![
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_248X144_fr15_bd8_odd_size_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_248X144_fr15_bd8_odd_size_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_248X144_fr15_bd8_odd_size_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_376X184_fr30_bd8_odd_size_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_376X184_fr30_bd8_odd_size_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_376X184_fr30_bd8_odd_size_l11.ivf",
        ],
    );
    p0_group1.insert(
        "sub8x8",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_256X144_fr15_bd8_sub8X8_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_256X144_fr15_bd8_sub8X8_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_256X144_fr15_bd8_sub8X8_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_384X192_fr30_bd8_sub8X8_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_384X192_fr30_bd8_sub8X8_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_384X192_fr30_bd8_sub8X8_l11.ivf",
        ],
    );
    p0_group1.insert(
        "sub8x8_sf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_256X144_fr15_bd8_sub8x8_sf_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_256X144_fr15_bd8_sub8x8_sf_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_256X144_fr15_bd8_sub8x8_sf_l1.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_384X192_fr30_bd8_sub8x8_sf_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_384X192_fr30_bd8_sub8x8_sf_l11.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_384X192_fr30_bd8_sub8x8_sf_l11.ivf",
        ],
    );
    profile_0_groups.insert("group1", p0_group1);
    // Profile 0 - Group 2
    let mut p0_group2 = HashMap::new();
    p0_group2.insert(
        "buf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_480X256_fr30_bd8_8buf_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_480X256_fr30_bd8_8buf_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_480X256_fr30_bd8_8buf_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_640X384_fr30_bd8_8buf_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_640X384_fr30_bd8_8buf_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_640X384_fr30_bd8_8buf_l21.ivf",
        ],
    );
    p0_group2.insert(
        "frm_resize",
        vec![
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_480X256_fr30_bd8_frm_resize_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_480X256_fr30_bd8_frm_resize_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_480X256_fr30_bd8_frm_resize_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_640X384_fr30_bd8_frm_resize_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_640X384_fr30_bd8_frm_resize_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_640X384_fr30_bd8_frm_resize_l21.ivf",
        ],
    );
    p0_group2.insert(
        "gf_dist",
        vec![
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_480X256_fr30_bd8_gf_dist_4_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_480X256_fr30_bd8_gf_dist_4_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_480X256_fr30_bd8_gf_dist_4_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_640X384_fr30_bd8_gf_dist_4_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_640X384_fr30_bd8_gf_dist_4_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_640X384_fr30_bd8_gf_dist_4_l21.ivf",
        ],
    );
    p0_group2.insert(
        "odd_size",
        vec![
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_472X248_fr30_bd8_odd_size_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_472X248_fr30_bd8_odd_size_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_472X248_fr30_bd8_odd_size_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_632X376_fr30_bd8_odd_size_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_632X376_fr30_bd8_odd_size_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_632X376_fr30_bd8_odd_size_l21.ivf",
        ],
    );
    p0_group2.insert(
        "sub8x8",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_480X256_fr30_bd8_sub8X8_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_480X256_fr30_bd8_sub8X8_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_480X256_fr30_bd8_sub8X8_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_640X384_fr30_bd8_sub8X8_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_640X384_fr30_bd8_sub8X8_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_640X384_fr30_bd8_sub8X8_l21.ivf",
        ],
    );
    p0_group2.insert(
        "sub8x8_sf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_480X256_fr30_bd8_sub8x8_sf_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_480X256_fr30_bd8_sub8x8_sf_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_480X256_fr30_bd8_sub8x8_sf_l2.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_640X384_fr30_bd8_sub8x8_sf_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_640X384_fr30_bd8_sub8x8_sf_l21.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_640X384_fr30_bd8_sub8x8_sf_l21.ivf",
        ],
    );
    profile_0_groups.insert("group2", p0_group2);
    // Profile 0 - Group 3
    let mut p0_group3 = HashMap::new();
    p0_group3.insert(
        "buf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_1080X512_fr30_bd8_8buf_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_1080X512_fr30_bd8_8buf_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_1080X512_fr30_bd8_8buf_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_1280X768_fr30_bd8_8buf_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_1280X768_fr30_bd8_8buf_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_1280X768_fr30_bd8_8buf_l31.ivf",
        ],
    );
    p0_group3.insert(
        "frm_resize",
        vec![
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_1080X512_fr30_bd8_frm_resize_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_1080X512_fr30_bd8_frm_resize_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_1080X512_fr30_bd8_frm_resize_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_1280X768_fr30_bd8_frm_resize_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_1280X768_fr30_bd8_frm_resize_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_1280X768_fr30_bd8_frm_resize_l31.ivf",
        ],
    );
    p0_group3.insert(
        "gf_dist",
        vec![
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_1080X512_fr30_bd8_gf_dist_4_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_1080X512_fr30_bd8_gf_dist_4_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_1080X512_fr30_bd8_gf_dist_4_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_1280X768_fr30_bd8_gf_dist_4_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_1280X768_fr30_bd8_gf_dist_4_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_1280X768_fr30_bd8_gf_dist_4_l31.ivf",
        ],
    );
    p0_group3.insert(
        "odd_size",
        vec![
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_1080X504_fr30_bd8_odd_size_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_1080X504_fr30_bd8_odd_size_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_1080X504_fr30_bd8_odd_size_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_1280X768_fr30_bd8_odd_size_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_1280X768_fr30_bd8_odd_size_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_1280X768_fr30_bd8_odd_size_l31.ivf",
        ],
    );
    p0_group3.insert(
        "sub8x8",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_1080X512_fr30_bd8_sub8X8_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_1080X512_fr30_bd8_sub8X8_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_1080X512_fr30_bd8_sub8X8_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_1280X768_fr30_bd8_sub8X8_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_1280X768_fr30_bd8_sub8X8_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_1280X768_fr30_bd8_sub8X8_l31.ivf",
        ],
    );
    p0_group3.insert(
        "sub8x8_sf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_1080X512_fr30_bd8_sub8x8_sf_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_1080X512_fr30_bd8_sub8x8_sf_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_1080X512_fr30_bd8_sub8x8_sf_l3.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_1280X768_fr30_bd8_sub8x8_sf_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_1280X768_fr30_bd8_sub8x8_sf_l31.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_1280X768_fr30_bd8_sub8x8_sf_l31.ivf",
        ],
    );
    profile_0_groups.insert("group3", p0_group3);
    // Profile 0 - Group 4
    let mut p0_group4 = HashMap::new();
    p0_group4.insert(
        "buf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_2048X1088_fr30_bd8_8buf_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_2048X1088_fr30_bd8_8buf_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_2048X1088_fr30_bd8_8buf_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_2048X1088_fr60_bd8_6buf_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_2048X1088_fr60_bd8_6buf_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_2048X1088_fr60_bd8_6buf_l41.ivf",
        ],
    );
    p0_group4.insert(
        "frm_resize",
        vec![
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_2048X1088_fr30_bd8_frm_resize_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_2048X1088_fr30_bd8_frm_resize_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_2048X1088_fr30_bd8_frm_resize_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_2048X1088_fr60_bd8_frm_resize_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_2048X1088_fr60_bd8_frm_resize_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_2048X1088_fr60_bd8_frm_resize_l41.ivf",
        ],
    );
    p0_group4.insert(
        "gf_dist",
        vec![
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_2048X1088_fr30_bd8_gf_dist_4_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_2048X1088_fr30_bd8_gf_dist_4_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_2048X1088_fr30_bd8_gf_dist_4_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_2048X1088_fr60_bd8_gf_dist_5_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_2048X1088_fr60_bd8_gf_dist_5_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_2048X1088_fr60_bd8_gf_dist_5_l41.ivf",
        ],
    );
    p0_group4.insert(
        "odd_size",
        vec![
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_2040X1080_fr30_bd8_odd_size_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_2040X1080_fr30_bd8_odd_size_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_2040X1080_fr30_bd8_odd_size_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_2040X1080_fr60_bd8_odd_size_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_2040X1080_fr60_bd8_odd_size_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_2040X1080_fr60_bd8_odd_size_l41.ivf",
        ],
    );
    p0_group4.insert(
        "sub8x8",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_2048X1088_fr30_bd8_sub8X8_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_2048X1088_fr30_bd8_sub8X8_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_2048X1088_fr30_bd8_sub8X8_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_2048X1088_fr60_bd8_sub8X8_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_2048X1088_fr60_bd8_sub8X8_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_2048X1088_fr60_bd8_sub8X8_l41.ivf",
        ],
    );
    p0_group4.insert(
        "sub8x8_sf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_2048X1088_fr30_bd8_sub8x8_sf_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_2048X1088_fr30_bd8_sub8x8_sf_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_2048X1088_fr30_bd8_sub8x8_sf_l4.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_2048X1088_fr60_bd8_sub8x8_sf_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_2048X1088_fr60_bd8_sub8x8_sf_l41.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_2048X1088_fr60_bd8_sub8x8_sf_l41.ivf",
        ],
    );
    profile_0_groups.insert("group4", p0_group4);
    // Profile 0 - Level 5.0
    // Name this level "5.0" instead of 5 to ensure it runs before 5.1.
    let mut p0_level5_0 = HashMap::new();
    p0_level5_0.insert(
        "buf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_4096X2176_fr30_bd8_4buf_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_4096X2176_fr30_bd8_4buf_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_4096X2176_fr30_bd8_4buf_l5.ivf",
        ],
    );
    p0_level5_0.insert(
        "frm_resize",
        vec![
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_4096X2176_fr30_bd8_frm_resize_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_4096X2176_fr30_bd8_frm_resize_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_4096X2176_fr30_bd8_frm_resize_l5.ivf",
        ],
    );
    p0_level5_0.insert(
        "gf_dist",
        vec![
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_4096X2176_fr30_bd8_gf_dist_6_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_4096X2176_fr30_bd8_gf_dist_6_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_4096X2176_fr30_bd8_gf_dist_6_l5.ivf",
        ],
    );
    p0_level5_0.insert(
        "odd_size",
        vec![
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_4088X2168_fr30_bd8_odd_size_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_4088X2168_fr30_bd8_odd_size_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_4088X2168_fr30_bd8_odd_size_l5.ivf",
        ],
    );
    p0_level5_0.insert(
        "sub8x8",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_4096X2176_fr30_bd8_sub8X8_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_4096X2176_fr30_bd8_sub8X8_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_4096X2176_fr30_bd8_sub8X8_l5.ivf",
        ],
    );
    p0_level5_0.insert(
        "sub8x8_sf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_4096X2176_fr30_bd8_sub8x8_sf_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_4096X2176_fr30_bd8_sub8x8_sf_l5.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_4096X2176_fr30_bd8_sub8x8_sf_l5.ivf",
        ],
    );
    profile_0_groups.insert("level5_0", p0_level5_0);
    // Profile 0 - Level 5.1
    let mut p0_level5_1 = HashMap::new();
    p0_level5_1.insert(
        "buf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/buf/crowd_run_4096X2176_fr60_bd8_4buf_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/grass_1_4096X2176_fr60_bd8_4buf_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/buf/street1_1_4096X2176_fr60_bd8_4buf_l51.ivf",
        ],
    );
    p0_level5_1.insert(
        "frm_resize",
        vec![
            "test_vectors/vp9/Profile_0_8bit/frm_resize/crowd_run_4096X2176_fr60_bd8_frm_resize_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/grass_1_4096X2176_fr60_bd8_frm_resize_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/frm_resize/street1_1_4096X2176_fr60_bd8_frm_resize_l51.ivf",
        ],
    );
    p0_level5_1.insert(
        "gf_dist",
        vec![
            "test_vectors/vp9/Profile_0_8bit/gf_dist/crowd_run_4096X2176_fr60_bd8_gf_dist_10_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/grass_1_4096X2176_fr60_bd8_gf_dist_10_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/gf_dist/street1_1_4096X2176_fr60_bd8_gf_dist_10_l51.ivf",
        ],
    );
    p0_level5_1.insert(
        "odd_size",
        vec![
            "test_vectors/vp9/Profile_0_8bit/odd_size/crowd_run_4088X2168_fr60_bd8_odd_size_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/grass_1_4088X2168_fr60_bd8_odd_size_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/odd_size/street1_1_4088X2168_fr60_bd8_odd_size_l51.ivf",
        ],
    );
    p0_level5_1.insert(
        "sub8x8",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8X8/crowd_run_4096X2176_fr60_bd8_sub8X8_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/grass_1_4096X2176_fr60_bd8_sub8X8_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8X8/street1_1_4096X2176_fr60_bd8_sub8X8_l51.ivf",
        ],
    );
    p0_level5_1.insert(
        "sub8x8_sf",
        vec![
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/crowd_run_4096X2176_fr60_bd8_sub8X8_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/grass_1_4096X2176_fr60_bd8_sub8x8_sf_l51.ivf",
            "test_vectors/vp9/Profile_0_8bit/sub8x8_sf/street1_1_4096X2176_fr60_bd8_sub8x8_sf_l51.ivf",
        ],
    );
    profile_0_groups.insert("level5_1", p0_level5_1);
    vp9_webm_files.insert("profile_0", profile_0_groups);
    vp9_webm_files
}

#[allow(dead_code)]
/// Provides H.264 test vector files categorized by group.
pub fn h264_files() -> HashMap<&'static str, Vec<&'static str>> {
    let mut h264_files: HashMap<&'static str, Vec<&'static str>> = HashMap::new();
    h264_files.insert(
        "baseline",
        vec![
            "test_vectors/h264/baseline/AUD_MW_E.h264",
            "test_vectors/h264/baseline/BA1_Sony_D.h264",
            "test_vectors/h264/baseline/BA2_Sony_F.h264",
            "test_vectors/h264/baseline/BAMQ1_JVC_C.h264",
            "test_vectors/h264/baseline/BAMQ2_JVC_C.h264",
            "test_vectors/h264/baseline/BANM_MW_D.h264",
            "test_vectors/h264/baseline/BA_MW_D.h264",
            "test_vectors/h264/baseline/CI_MW_D.h264",
            "test_vectors/h264/baseline/CVSE2_Sony_B.h264",
            "test_vectors/h264/baseline/HCBP1_HHI_A.h264",
            "test_vectors/h264/baseline/HCBP2_HHI_A.h264",
            "test_vectors/h264/baseline/LS_SVA_D.h264",
            "test_vectors/h264/baseline/MIDR_MW_D.h264",
            "test_vectors/h264/baseline/MPS_MW_A.h264",
            "test_vectors/h264/baseline/MR1_MW_A.h264",
            "test_vectors/h264/baseline/MR2_MW_A.h264",
            "test_vectors/h264/baseline/NL1_Sony_D.h264",
            "test_vectors/h264/baseline/NL2_Sony_H.h264",
            "test_vectors/h264/baseline/NLMQ1_JVC_C.h264",
            "test_vectors/h264/baseline/NLMQ2_JVC_C.h264",
            "test_vectors/h264/baseline/NRF_MW_E.h264",
            "test_vectors/h264/baseline/SVA_BA1_B.h264",
            "test_vectors/h264/baseline/SVA_BA2_D.h264",
            "test_vectors/h264/baseline/SVA_NL1_B.h264",
            "test_vectors/h264/baseline/SVA_NL2_E.h264",
        ],
    );
    h264_files.insert(
        "main",
        vec![
            "test_vectors/h264/main/CABA1_SVA_B.h264",
            "test_vectors/h264/main/CABA1_Sony_D.h264",
            "test_vectors/h264/main/CABA2_SVA_B.h264",
            "test_vectors/h264/main/CABA2_Sony_E.h264",
            "test_vectors/h264/main/CABA3_SVA_B.h264",
            "test_vectors/h264/main/CABA3_Sony_C.h264",
            "test_vectors/h264/main/CABA3_TOSHIBA_E.h264",
            "test_vectors/h264/main/CACQP3_Sony_D.h264",
            "test_vectors/h264/main/CANL1_SVA_B.h264",
            "test_vectors/h264/main/CANL1_Sony_E.h264",
            "test_vectors/h264/main/CANL1_TOSHIBA_G.h264",
            "test_vectors/h264/main/CANL2_SVA_B.h264",
            "test_vectors/h264/main/CANL2_Sony_E.h264",
            "test_vectors/h264/main/CANL3_SVA_B.h264",
            "test_vectors/h264/main/CANL3_Sony_C.h264",
            "test_vectors/h264/main/CANL4_SVA_B.h264",
            "test_vectors/h264/main/CAPCM1_Sand_E.h264",
            "test_vectors/h264/main/CAPCMNL1_Sand_E.h264",
            "test_vectors/h264/main/CAPM3_Sony_D.h264",
            "test_vectors/h264/main/CAQP1_Sony_B.h264",
            "test_vectors/h264/main/CAWP1_TOSHIBA_E.h264",
            "test_vectors/h264/main/CAWP5_TOSHIBA_E.h264",
            "test_vectors/h264/main/CVBS3_Sony_C.h264",
            "test_vectors/h264/main/CVPCMNL1_SVA_C.h264",
            "test_vectors/h264/main/CVPCMNL2_SVA_C.h264",
            "test_vectors/h264/main/CVSE3_Sony_H.h264",
            "test_vectors/h264/main/CVSEFDFT3_Sony_E.h264",
            "test_vectors/h264/main/CVWP1_TOSHIBA_E.h264",
            "test_vectors/h264/main/CVWP2_TOSHIBA_E.h264",
            "test_vectors/h264/main/CVWP3_TOSHIBA_E.h264",
            "test_vectors/h264/main/CVWP5_TOSHIBA_E.h264",
            "test_vectors/h264/main/NL3_SVA_E.h264",
            "test_vectors/h264/main/camp_mot_frm0_full.h264",
            "test_vectors/h264/main/cvmp_mot_frm0_full_B.h264",
            "test_vectors/h264/main/src19td.IBP.h264",
            "test_vectors/h264/main/HCMP1_HHI_A.h264",
        ],
    );
    // The following test vectors are separated because they don't verify that all
    // slice header's |first_mb_in_slice| is zero. Stateful decoders, who have their own
    // H.264 parsers, might support them, though.
    h264_files.insert(
        "first_mb_in_slice",
        vec![
            "test_vectors/h264/baseline/BA1_FT_C.h264",
            "test_vectors/h264/baseline/BASQP1_Sony_C.h264",
            "test_vectors/h264/baseline/CI1_FT_B.h264",
            "test_vectors/h264/baseline/SVA_Base_B.h264",
            "test_vectors/h264/baseline/SVA_CL1_E.h264",
            "test_vectors/h264/baseline/SVA_FM1_E.h264",
            "test_vectors/h264/baseline/MR1_BT_A.h264",
            "test_vectors/h264/main/CABACI3_Sony_B.h264",
            "test_vectors/h264/main/CABAST3_Sony_E.h264",
            "test_vectors/h264/main/CABASTBR3_Sony_B.h264",
            "test_vectors/h264/main/SL1_SVA_B.h264",
        ],
    );
    h264_files.insert(
        "high",
        vec![
            "test_vectors/h264/high/FREH12_B.h264",
            "test_vectors/h264/high/FREH1_B.h264",
            "test_vectors/h264/high/FREH2_B.h264",
            "test_vectors/h264/high/FREH3.h264",
            "test_vectors/h264/high/FREH8.h264",
            "test_vectors/h264/high/FREH9.h264",
            "test_vectors/h264/high/HCAFR1_HHI.h264",
            "test_vectors/h264/high/HCAFR2_HHI.h264",
            "test_vectors/h264/high/HCAFR3_HHI.h264",
            "test_vectors/h264/high/HCAFR4_HHI.h264",
            "test_vectors/h264/high/HCHP1_HHI_B.h264",
            "test_vectors/h264/high/HCHP2_HHI_A.h264",
            "test_vectors/h264/high/HPCADQ_BRCM_B.h264",
            "test_vectors/h264/high/HPCALQ_BRCM_B.h264",
            "test_vectors/h264/high/HPCANL_BRCM_C.h264",
            "test_vectors/h264/high/HPCAQ2LQ_BRCM_B.h264",
            "test_vectors/h264/high/HPCA_BRCM_C.h264",
            "test_vectors/h264/high/HPCVNL_BRCM_A.h264",
            "test_vectors/h264/high/HPCV_BRCM_A.h264",
        ],
    );
    h264_files
}

#[allow(dead_code)]
/// Provides H.265 test vector files categorized by group.
pub fn h265_files() -> HashMap<&'static str, Vec<&'static str>> {
    let mut h265_files: HashMap<&'static str, Vec<&'static str>> = HashMap::new();
    // "Main" vectors are split into sub groups to be able to run with smaller timeouts.
    h265_files.insert(
        "main_part_1",
        vec![
            "test_vectors/hevc/main/AMP_A_Samsung_7.hevc",
            "test_vectors/hevc/main/AMP_B_Samsung_7.hevc",
            "test_vectors/hevc/main/AMP_D_Hisilicon.hevc",
            "test_vectors/hevc/main/AMP_E_Hisilicon.hevc",
            "test_vectors/hevc/main/AMP_F_Hisilicon_3.hevc",
            "test_vectors/hevc/main/AMVP_A_MTK_4.hevc",
            "test_vectors/hevc/main/AMVP_B_MTK_4.hevc",
            "test_vectors/hevc/main/AMVP_C_Samsung_7.hevc",
            "test_vectors/hevc/main/CAINIT_A_SHARP_4.hevc",
            "test_vectors/hevc/main/CAINIT_B_SHARP_4.hevc",
            "test_vectors/hevc/main/CAINIT_C_SHARP_3.hevc",
            "test_vectors/hevc/main/CAINIT_D_SHARP_3.hevc",
            "test_vectors/hevc/main/CAINIT_E_SHARP_3.hevc",
            "test_vectors/hevc/main/CAINIT_F_SHARP_3.hevc",
            "test_vectors/hevc/main/CAINIT_G_SHARP_3.hevc",
            "test_vectors/hevc/main/CAINIT_H_SHARP_3.hevc",
            "test_vectors/hevc/main/CIP_A_Panasonic_3.hevc",
            "test_vectors/hevc/main/cip_B_NEC_3.hevc",
            "test_vectors/hevc/main/CIP_C_Panasonic_2.hevc",
            "test_vectors/hevc/main/DBLK_A_SONY_3.hevc",
            "test_vectors/hevc/main/DBLK_B_SONY_3.hevc",
            "test_vectors/hevc/main/DBLK_C_SONY_3.hevc",
            "test_vectors/hevc/main/DBLK_D_VIXS_2.hevc",
            "test_vectors/hevc/main/DBLK_E_VIXS_2.hevc",
            "test_vectors/hevc/main/DBLK_F_VIXS_2.hevc",
            "test_vectors/hevc/main/DBLK_G_VIXS_2.hevc",
        ],
    );
    h265_files.insert(
        "main_part_2",
        vec![
            "test_vectors/hevc/main/DELTAQP_B_SONY_3.hevc",
            "test_vectors/hevc/main/DELTAQP_C_SONY_3.hevc",
            "test_vectors/hevc/main/DSLICE_A_HHI_5.hevc",
            "test_vectors/hevc/main/DSLICE_B_HHI_5.hevc",
            "test_vectors/hevc/main/DSLICE_C_HHI_5.hevc",
            "test_vectors/hevc/main/ENTP_A_Qualcomm_1.hevc",
            "test_vectors/hevc/main/ENTP_B_Qualcomm_1.hevc",
            "test_vectors/hevc/main/ENTP_C_Qualcomm_1.hevc",
            "test_vectors/hevc/main/EXT_A_ericsson_4.hevc",
            "test_vectors/hevc/main/FILLER_A_Sony_1.hevc",
            "test_vectors/hevc/main/HRD_A_Fujitsu_3.hevc",
            "test_vectors/hevc/main/INITQP_A_Sony_1.hevc",
            "test_vectors/hevc/main/ipcm_A_NEC_3.hevc",
            "test_vectors/hevc/main/ipcm_B_NEC_3.hevc",
            "test_vectors/hevc/main/ipcm_C_NEC_3.hevc",
            "test_vectors/hevc/main/ipcm_D_NEC_3.hevc",
            "test_vectors/hevc/main/ipcm_E_NEC_2.hevc",
            "test_vectors/hevc/main/IPRED_A_docomo_2.hevc",
            "test_vectors/hevc/main/IPRED_C_Mitsubishi_3.hevc",
            "test_vectors/hevc/main/LS_A_Orange_2.hevc",
            "test_vectors/hevc/main/LS_B_Orange_4.hevc",
            "test_vectors/hevc/main/LTRPSPS_A_Qualcomm_1.hevc",
            "test_vectors/hevc/main/MAXBINS_A_TI_5.hevc",
            "test_vectors/hevc/main/MAXBINS_B_TI_5.hevc",
            "test_vectors/hevc/main/MAXBINS_C_TI_5.hevc",
            "test_vectors/hevc/main/MERGE_A_TI_3.hevc",
            "test_vectors/hevc/main/MERGE_B_TI_3.hevc",
            "test_vectors/hevc/main/MERGE_C_TI_3.hevc",
            "test_vectors/hevc/main/MERGE_D_TI_3.hevc",
            "test_vectors/hevc/main/MERGE_E_TI_3.hevc",
            "test_vectors/hevc/main/MERGE_F_MTK_4.hevc",
            "test_vectors/hevc/main/MERGE_G_HHI_4.hevc",
            "test_vectors/hevc/main/MVCLIP_A_qualcomm_3.hevc",
            "test_vectors/hevc/main/MVDL1ZERO_A_docomo_4.hevc",
            "test_vectors/hevc/main/MVEDGE_A_qualcomm_3.hevc",
        ],
    );
    h265_files.insert(
        "main_part_3",
        vec![
            "test_vectors/hevc/main/OPFLAG_A_Qualcomm_1.hevc",
            "test_vectors/hevc/main/OPFLAG_B_Qualcomm_1.hevc",
            "test_vectors/hevc/main/OPFLAG_C_Qualcomm_1.hevc",
            "test_vectors/hevc/main/PMERGE_A_TI_3.hevc",
            "test_vectors/hevc/main/PMERGE_B_TI_3.hevc",
            "test_vectors/hevc/main/PMERGE_C_TI_3.hevc",
            "test_vectors/hevc/main/PMERGE_D_TI_3.hevc",
            "test_vectors/hevc/main/PMERGE_E_TI_3.hevc",
            "test_vectors/hevc/main/PPS_A_qualcomm_7.hevc",
            "test_vectors/hevc/main/PS_B_VIDYO_3.hevc",
            "test_vectors/hevc/main/RPLM_A_qualcomm_4.hevc",
            "test_vectors/hevc/main/RPS_A_docomo_5.hevc",
            "test_vectors/hevc/main/RPS_B_qualcomm_5.hevc",
            "test_vectors/hevc/main/RPS_E_qualcomm_5.hevc",
            "test_vectors/hevc/main/RPS_F_docomo_2.hevc",
            "test_vectors/hevc/main/RQT_A_HHI_4.hevc",
            "test_vectors/hevc/main/RQT_B_HHI_4.hevc",
            "test_vectors/hevc/main/RQT_C_HHI_4.hevc",
            "test_vectors/hevc/main/RQT_D_HHI_4.hevc",
            "test_vectors/hevc/main/RQT_E_HHI_4.hevc",
            "test_vectors/hevc/main/RQT_F_HHI_4.hevc",
            "test_vectors/hevc/main/RQT_G_HHI_4.hevc",
            "test_vectors/hevc/main/SAO_A_MediaTek_4.hevc",
            "test_vectors/hevc/main/SAO_B_MediaTek_5.hevc",
            "test_vectors/hevc/main/SAO_C_Samsung_5.hevc",
            "test_vectors/hevc/main/SAODBLK_A_MainConcept_4.hevc",
            "test_vectors/hevc/main/SAODBLK_B_MainConcept_4.hevc",
            "test_vectors/hevc/main/SAO_D_Samsung_5.hevc",
            "test_vectors/hevc/main/SAO_E_Canon_4.hevc",
            "test_vectors/hevc/main/SAO_F_Canon_3.hevc",
            "test_vectors/hevc/main/SAO_G_Canon_3.hevc",
            "test_vectors/hevc/main/SAO_H_Parabola_1.hevc",
        ],
    );
    h265_files.insert(
        "main_part_4",
        vec![
            "test_vectors/hevc/main/SDH_A_Orange_4.hevc",
            "test_vectors/hevc/main/SLICES_A_Rovi_3.hevc",
            "test_vectors/hevc/main/SLPPLP_A_VIDYO_2.hevc",
            "test_vectors/hevc/main/STRUCT_A_Samsung_7.hevc",
            "test_vectors/hevc/main/STRUCT_B_Samsung_7.hevc",
            "test_vectors/hevc/main/TILES_A_Cisco_2.hevc",
            "test_vectors/hevc/main/TMVP_A_MS_3.hevc",
            "test_vectors/hevc/main/TSCL_A_VIDYO_5.hevc",
            "test_vectors/hevc/main/TSCL_B_VIDYO_4.hevc",
            "test_vectors/hevc/main/TSKIP_A_MS_3.hevc",
            "test_vectors/hevc/main/TUSIZE_A_Samsung_1.hevc",
            "test_vectors/hevc/main/VPSID_A_VIDYO_2.hevc",
            "test_vectors/hevc/main/WP_A_Toshiba_3.hevc",
            "test_vectors/hevc/main/WP_B_Toshiba_3.hevc",
            "test_vectors/hevc/main/WPP_A_ericsson_MAIN_2.hevc",
            "test_vectors/hevc/main/WPP_B_ericsson_MAIN_2.hevc",
            "test_vectors/hevc/main/WPP_C_ericsson_MAIN_2.hevc",
            "test_vectors/hevc/main/WPP_D_ericsson_MAIN_2.hevc",
            "test_vectors/hevc/main/WPP_E_ericsson_MAIN_2.hevc",
            "test_vectors/hevc/main/WPP_F_ericsson_MAIN_2.hevc",
        ],
    );
    // TODO(b/414855002): Add H.265 test vectors filed from bugs.
    h265_files
}

#[allow(dead_code)]
/// Provides H.265 test vector files from bugs that are applicable to testing on
/// only VA-API.
pub fn h265_files_from_bugs() -> HashMap<&'static str, Vec<&'static str>> {
    let mut h265_files_from_bugs: HashMap<&'static str, Vec<&'static str>> = HashMap::new();
    h265_files_from_bugs.insert(
        "239819547",
        vec![
            "test_vectors/h265/main/BUMPING_A_ericsson_1.hevc",
            "test_vectors/h265/main/NoOutPrior_B_Qualcomm_1.hevc",
        ],
    );
    h265_files_from_bugs.insert(
        "239927523",
        vec![
            "test_vectors/h265/main/NUT_A_ericsson_5.hevc",
            "test_vectors/h265/main/RAP_A_docomo_6.hevc",
            "test_vectors/h265/main/RAP_B_Bossen_2.hevc",
        ],
    );
    h265_files_from_bugs.insert(
        "239936640",
        vec![
            "test_vectors/h265/main/SLIST_A_Sony_5.hevc",
            "test_vectors/h265/main/SLIST_B_Sony_9.hevc",
            "test_vectors/h265/main/SLIST_C_Sony_4.hevc",
            "test_vectors/h265/main/SLIST_D_Sony_9.hevc",
        ],
    );
    h265_files_from_bugs.insert("241775056", vec!["test_vectors/h265/main/POC_A_Bossen_3.hevc"]);
    h265_files_from_bugs.insert("241731431", vec!["test_vectors/h265/main/RPS_D_ericsson_6.hevc"]);
    h265_files_from_bugs.insert("241733687", vec!["test_vectors/h265/main/CONFWIN_A_Sony_1.hevc"]);
    h265_files_from_bugs.insert("241727534", vec!["test_vectors/h265/main/RPLM_B_qualcomm_4.hevc"]);
    h265_files_from_bugs
        .insert("241731425", vec!["test_vectors/h265/main/VPSSPSPPS_A_MainConcept_1.hevc"]);
    h265_files_from_bugs
        .insert("241772308", vec!["test_vectors/h265/main/NoOutPrior_A_Qualcomm_1.hevc"]);
    h265_files_from_bugs.insert("242708185", vec!["test_vectors/h265/main/RPS_C_ericsson_5.hevc"]);
    h265_files_from_bugs.insert(
        "251179086",
        vec![
            "test_vectors/h265/main/DELTAQP_A_BRCM_4.hevc",
            "test_vectors/h265/main/TILES_B_Cisco_1.hevc",
        ],
    );
    h265_files_from_bugs
}
