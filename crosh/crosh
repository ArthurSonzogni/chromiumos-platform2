#!/bin/dash
# Copyright (c) 2009-2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

TRY_BASH=1
if echo "$@" | grep -q -- "--dash"; then
  TRY_BASH=0
fi

# NOTE: This script *almost* works in dash.  Unfortunately, dash is missing
# the 'history' builtin and readline support is missing from the 'read'
# builtin.
#
# Please test that any changes continue to work in dash by running
# '/build/board-name/bin/dash crosh --dash' before checking them in.

if type "history" 2>/dev/null | grep -q "shell builtin"; then
  IS_BASH=1
else
  IS_BASH=0
fi

# The terminal seems to come up with a bogus notion of its geometry.  Calling
# reset works around the problem.
reset

if [ "$TRY_BASH" = "1" -a "$IS_BASH" != "1" -a -x "/bin/bash" ]; then
  # Relaunch in bash if we can.
  exec /bin/bash $0 "$@"
fi

HELP='
 help
  Display this help

 exit
  Exit crosh

 ssh <user> <host> [<port>]
  Open an ssh connection to the given <host>, as <user>.  The <port> parameter
  is optional and defaults to 22.
'

CHROMEOS_INSTALL=/usr/sbin/chromeos-install

if [ -f $CHROMEOS_INSTALL ]; then
  # Install script exists.  Test if it thinks we booted from a removable
  # device.  This is based on the knowledge that the install script checks
  # that the root device is removable before validating its other arguments.
  # Also, we expect that when it fails in this manner, it mentions the word
  # "removable" on stdout.

  if ! $CHROMEOS_INSTALL --dst=/dev/null | grep -q "removable"; then
    REMOVABLE=1
  fi
fi

if [ "$(echo "$@" | grep -- "--usb")" -o "$REMOVABLE" = "1" ]; then
  . "$(dirname "$0")/crosh-usb"
fi

# TODO(rginda): Switch to the "real" dev mode file when we have one.
if [ "$(echo "$@" | grep -- "--dev")" -o -f "/root/.dev_mode" ]; then
  . "$(dirname "$0")/crosh-dev"
fi

if [ -e "$(dirname $0)/crosh-workarounds" ]; then
  . "$(dirname "$0")/crosh-workarounds"
fi

shell_read() {
  if [ "$IS_BASH" -eq "1" ]; then
    # In bash, -e gives readline support.
    read -p "crosh> " -e $@
  else
    read -p "crosh> " $@
  fi
}

shell_history() {
  if [ "$IS_BASH" -eq "1" ]; then
    # In bash, the history builtin can be used to manage readline history
    history $@
  fi
}

cmd_help() {
  echo "$HELP"
}

cmd_exit() {
  exit
}

cmd_ssh() {
  local user="$1"
  local host="$2"
  local port="${3:-22}"

  if [ -z "$user" ]; then
    echo "Missing required parameter: user"
    return
  elif ! check_username "$user"; then
    echo "Invalid user: $user"
    return
  fi

  if [ -z "$host" ]; then
    echo "Missing required parameter: host"
    return
  elif ! check_hostname "$host"; then
    echo "Invalid host: $host"
    return
  fi

  if [ ! -z "$port" ]; then
    if ! check_digits "$port"; then
      echo "Invalid port: $port"
      return
    fi
  fi

  echo "open: host: $host, user: $user, port: $port"
  ssh -p "$port" "$user@$host"
}

substr() {
  local str="$1"
  local start="$2"
  local end="$3"

  if [ "$IS_BASH" = "1" ]; then
    if [ -z "$end" ]; then
      echo ${str:$start}
    else
      echo ${str:$start:$end}
    fi
    return
  fi

  start=$(expr "$start" + 1)

  if [ ! -z "$end" ]; then
    end=$(expr "$end" - 1)
  fi

  echo "$str" | cut -c${start}-${end}
}

dispatch() {
  local line="$1"
  local command=""
  local params=""

  local space_pos=$(expr index "$line" ' ')

  if [ $space_pos = 0 ]; then
    command=$line
  else
    command=$(substr "$line" "0" "$space_pos")
    params=$(substr "$line" "$space_pos")
  fi

  if ! type "cmd_$command" 2>/dev/null | head -1 | grep -q "function"; then
    echo "Unknown command: '$command'"
  else
    command="cmd_$command"
    $command $params
  fi
}

# Checks that a given string starts with an alphanumeric, and contains only
# alphanumeric, '.' or '-' characters
check_hostname() {
  expr "$1" : '^[[:alnum:]][[:alnum:].\-]*$' > /dev/null
}

# Checks that a given string starts with an alphanumeric, and contains only
# alphanumeric and zero or more of ":.~%$^\-"
check_username() {
  expr "$1" : '^[[:alnum:]][[:alnum:]:.~%$^\-]*$' > /dev/null
}

check_digits() {
  expr "$1" : '^[[:digit:]]*$' > /dev/null
}

repl() {
  echo "Welcome to crosh, type 'help' for a list of commands."
  if [ "$IS_BASH" != "1" ]; then
    echo "Sorry, line editing and command history disabled due to" \
      "shell limitations."
  fi
  echo

  while [ 1 ]; do
    if shell_read LINE_; then
      if [ ! -z "$LINE_" ]; then
        shell_history -s "$LINE_"
        dispatch "$LINE_"
      fi
    else
      echo
      return 1
    fi
  done
}

HISTFILE="$HOME/.crosh_history"
shell_history -r $HISTFILE

repl

shell_history -w $HISTFILE
