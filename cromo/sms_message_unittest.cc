// Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Unit tests for SMS message creation

#include "sms_message.h"

#include <gflags/gflags.h>
#include <glog/logging.h>
#include <gtest/gtest.h>

// TODO(ers) Added more negative test cases

const uint8_t pdu1[] = {
  0x07, 0x91, 0x21, 0x04, 0x44, 0x29, 0x61, 0xf4,
  0x04, 0x0b, 0x91, 0x61, 0x71, 0x95, 0x72, 0x91,
  0xf8, 0x00, 0x00, 0x11, 0x20, 0x82, 0x11, 0x05,
  0x05, 0x0a,
  // user data:
  0x6a, 0xc8, 0xb2, 0xbc, 0x7c, 0x9a, 0x83, 0xc2,
  0x20, 0xf6, 0xdb, 0x7d, 0x2e, 0xcb, 0x41, 0xed,
  0xf2, 0x7c, 0x1e, 0x3e, 0x97, 0x41, 0x1b, 0xde,
  0x06, 0x75, 0x4f, 0xd3, 0xd1, 0xa0, 0xf9, 0xbb,
  0x5d, 0x06, 0x95, 0xf1, 0xf4, 0xb2, 0x9b, 0x5c,
  0x26, 0x83, 0xc6, 0xe8, 0xb0, 0x3c, 0x3c, 0xa6,
  0x97, 0xe5, 0xf3, 0x4d, 0x6a, 0xe3, 0x03, 0xd1,
  0xd1, 0xf2, 0xf7, 0xdd, 0x0d, 0x4a, 0xbb, 0x59,
  0xa0, 0x79, 0x7d, 0x8c, 0x06, 0x85, 0xe7, 0xa0,
  0x00, 0x28, 0xec, 0x26, 0x83, 0x2a, 0x96, 0x0b,
  0x28, 0xec, 0x26, 0x83, 0xbe, 0x60, 0x50, 0x78,
  0x0e, 0xba, 0x97, 0xd9, 0x6c, 0x17
};

const uint8_t pdu2[] = {
  0x07, 0x91, 0x97, 0x30, 0x07, 0x11, 0x11, 0xf1,
  0x04, 0x14, 0xd0, 0x49, 0x37, 0xbd, 0x2c, 0x77,
  0x97, 0xe9, 0xd3, 0xe6, 0x14, 0x00, 0x08, 0x11,
  0x30, 0x92, 0x91, 0x02, 0x40, 0x61, 0x08, 0x04,
  0x42, 0x04, 0x35, 0x04, 0x41, 0x04, 0x42
};

const uint8_t pdu3[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x04, 0x0b, 0x91, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0x00, 0x00, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0a, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37
};

/* pid is nonzero (00 -> ff) */
const uint8_t pdu3_nzpid[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x04, 0x0b, 0x91, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0xff, 0x00, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0a, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37
};

/* mms is clear (04 -> 00) */
const uint8_t pdu3_mms[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x00, 0x0b, 0x91, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0x00, 0x00, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0a, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37
};

/* number is natl (91 -> 81) */
const uint8_t pdu3_natl[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x04, 0x0b, 0x81, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0x00, 0x00, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0a, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37
};

const uint8_t pdu3_8bit[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x04, 0x0b, 0x91, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0x00, 0x04, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0a, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37, 0xde
};

const uint8_t pdu_dcsf1[] = {
    0x07,       // length of SMSC info
    0x91,       // type of address of SMSC (E.164)
    0x33, 0x06, 0x09, 0x10, 0x93, 0xF0,  // SMSC address (+33 60 90 01 39 0)
    0x04,       // SMS-DELIVER
    0x04,       // address length
    0x85,       // type of address
    0x81, 0x00, // sender address (1800)
    0x00,       // TP-PID protocol identifier
    0xF1,       // TP-DCS data coding scheme
    0x11, 0x60, 0x42, 0x31, 0x80, 0x51, 0x80,   // timestamp 11-06-24 13:08:51
    0xA0,       // TP-UDL user data length (160)
    // Content:
    0x49,
    0xB7, 0xF9, 0x0D, 0x9A, 0x1A, 0xA5, 0xA0, 0x16,
    0x68, 0xF8, 0x76, 0x9B, 0xD3, 0xE4, 0xB2, 0x9B,
    0x9E, 0x2E, 0xB3, 0x59, 0xA0, 0x3F, 0xC8, 0x5D,
    0x06, 0xA9, 0xC3, 0xED, 0x70, 0x7A, 0x0E, 0xA2,
    0xCB, 0xC3, 0xEE, 0x79, 0xBB, 0x4C, 0xA7, 0xCB,
    0xCB, 0xA0, 0x56, 0x43, 0x61, 0x7D, 0xA7, 0xC7,
    0x69, 0x90, 0xFD, 0x4D, 0x97, 0x97, 0x41, 0xEE,
    0x77, 0xDD, 0x5E, 0x0E, 0xD7, 0x41, 0xED, 0x37,
    0x1D, 0x44, 0x2E, 0x83, 0xE0, 0xE1, 0xF9, 0xBC,
    0x0C, 0xD2, 0x81, 0xE6, 0x77, 0xD9, 0xB8, 0x4C,
    0x06, 0xC1, 0xDF, 0x75, 0x39, 0xE8, 0x5C, 0x90,
    0x97, 0xE5, 0x20, 0xFB, 0x9B, 0x2E, 0x2F, 0x83,
    0xC6, 0xEF, 0x36, 0x9C, 0x5E, 0x06, 0x4D, 0x8D,
    0x52, 0xD0, 0xBC, 0x2E, 0x07, 0xDD, 0xEF, 0x77,
    0xD7, 0xDC, 0x2C, 0x77, 0x99, 0xE5, 0xA0, 0x77,
    0x1D, 0x04, 0x0F, 0xCB, 0x41, 0xF4, 0x02, 0xBB,
    0x00, 0x47, 0xBF, 0xDD, 0x65, 0x50, 0xB8, 0x0E,
    0xCA, 0xD9, 0x66
};

const uint8_t pdu3_dcsf_8bit[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x04, 0x0b, 0x91, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0x00, 0xf4, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0a, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37, 0xde
};

const uint8_t pdu3_insufficient_data[] = {
  0x07, 0x91, 0x21, 0x43, 0x65, 0x87, 0x09, 0xf1,
  0x04, 0x0b, 0x91, 0x81, 0x00, 0x55, 0x15, 0x12,
  0xf2, 0x00, 0x00, 0x11, 0x10, 0x10, 0x21, 0x43,
  0x65, 0x00, 0x0b, 0xe8, 0x32, 0x9b, 0xfd, 0x46,
  0x97, 0xd9, 0xec, 0x37
};

TEST(SmsMessage, CreateFromPdu) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu1, sizeof(pdu1));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12404492164", sms->smsc_address());
  EXPECT_EQ("+16175927198", sms->sender_address());
  EXPECT_EQ("110228115050-08", sms->timestamp());
  EXPECT_EQ("Here's a longer message [{with some extended characters}] "
            "thrown in, such as £ and ΩΠΨ and §¿ as well.", sms->text());
}

TEST(SmsMessage, CreateFromPduWithAlphaSenderAndUcs2Text) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu2, sizeof(pdu2));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("79037011111", sms->smsc_address());
  EXPECT_EQ("InternetSMS", sms->sender_address());
  EXPECT_EQ("110329192004+05", sms->timestamp());
  EXPECT_EQ("тест", sms->text());
}

TEST(SmsMessage, CreateFromPdu3) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3, sizeof(pdu3));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12345678901", sms->smsc_address());
  EXPECT_EQ("+18005551212", sms->sender_address());
  EXPECT_EQ("110101123456+00", sms->timestamp());
  EXPECT_EQ("hellohello", sms->text());
}

TEST(SmsMessage, CreateFromPdu3WithNonzeroPid) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3_nzpid, sizeof(pdu3_nzpid));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12345678901", sms->smsc_address());
  EXPECT_EQ("+18005551212", sms->sender_address());
  EXPECT_EQ("110101123456+00", sms->timestamp());
  EXPECT_EQ("hellohello", sms->text());
}

TEST(SmsMessage, CreateFromPdu3WithMms) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3_mms, sizeof(pdu3_mms));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12345678901", sms->smsc_address());
  EXPECT_EQ("+18005551212", sms->sender_address());
  EXPECT_EQ("110101123456+00", sms->timestamp());
  EXPECT_EQ("hellohello", sms->text());
}

TEST(SmsMessage, CreateFromPdu3WithNatlNumber) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3_natl, sizeof(pdu3_natl));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12345678901", sms->smsc_address());
  EXPECT_EQ("18005551212", sms->sender_address()); /* no plus */
  EXPECT_EQ("110101123456+00", sms->timestamp());
  EXPECT_EQ("hellohello", sms->text());
}

static const char expected_8bit_data[] = {
  0xe8, 0x32, 0x9b, 0xfd, 0x46, 0x97, 0xd9, 0xec, 0x37, 0xde
};

TEST(SmsMessage, CreateFromPdu3With8BitData) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3_8bit, sizeof(pdu3_8bit));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12345678901", sms->smsc_address());
  EXPECT_EQ("+18005551212", sms->sender_address());
  EXPECT_EQ("110101123456+00", sms->timestamp());
  EXPECT_EQ(expected_8bit_data, sms->text());
}

TEST(SmsMessage, CreateFromPdu3InsufficientData) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3_insufficient_data,
                                              sizeof(pdu3_insufficient_data));

  EXPECT_TRUE(NULL == sms);
}

TEST(SmsMessage, CreateWithGroupFDcs) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu_dcsf1, sizeof(pdu_dcsf1));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("33609001390", sms->smsc_address());
  EXPECT_EQ("1800", sms->sender_address());
  EXPECT_EQ("110624130815+02", sms->timestamp());
  EXPECT_EQ("Info SFR - Confidentiel, à ne jamais transmettre -\r\n"
            "Voici votre nouveau mot de passe : sw2ced pour gérer "
            "votre compte SFR sur www.sfr.fr ou par téléphone au 963",
            sms->text());
}

TEST(SmsMessage, CreateWithGroupFDcs8Bit) {
  SmsMessage* sms = SmsMessage::CreateMessage(pdu3_dcsf_8bit,
                                              sizeof(pdu3_dcsf_8bit));

  ASSERT_TRUE(NULL != sms);
  EXPECT_EQ("12345678901", sms->smsc_address());
  EXPECT_EQ("+18005551212", sms->sender_address());
  EXPECT_EQ("110101123456+00", sms->timestamp());
  EXPECT_EQ(expected_8bit_data, sms->text());
}

int main(int argc, char* argv[]) {
  testing::InitGoogleTest(&argc, argv);
  google::InitGoogleLogging(argv[0]);
  google::ParseCommandLineFlags(&argc, &argv, true);

  return RUN_ALL_TESTS();
}
