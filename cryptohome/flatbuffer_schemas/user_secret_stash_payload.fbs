// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Our Python generator removes the "_serialized_" namespace when generating
// the code, to avoid symbol clash with the code generated by flatc.
namespace cryptohome._serialized_;

// Defined the attributes that may be used in this schema file.
attribute "optional";
attribute "secure";
attribute "serializable";

table ResetSecretMapping (secure) {
  // The auth factor which this is the reset secret for.
  auth_factor_label:string (id: 0);
  // The reset secret for PinWeaver.
  reset_secret:[ubyte] (id: 1);
}

// The ResetSecretMapping can only be used for per-auth-factor reset secrets.
// We introduced another kind of PinWeaver-backed credentials which are guarded
// by a per-auth-factor-type rate-limiter. As rate-limiter is not an auth
// factor, it doesn't have an associated label, so we need a separate map to
// store its reset secret.
table TypeToResetSecretMapping (secure) {
  // The auth factor type which this is the reset secret for.
  auth_factor_type:uint = null (id: 0, optional);
  // The reset secret for PinWeaver.
  reset_secret:[ubyte] (id: 1);
}

// The user secret stash payload. Because it contains sensitive secrets, it can
// be stored to disk only in encrypted form.
table UserSecretStashPayload (serializable, secure) {
  // The file encryption key.
  fek:[ubyte] (id: 0);
  // The file name encryption key.
  fnek:[ubyte] (id: 1);
  // The salt used with |fek|.
  fek_salt:[ubyte] (id: 2);
  // The salt used with |fnek|.
  fnek_salt:[ubyte] (id: 3);
  // The key identifier of |fek|.
  fek_sig:[ubyte] (id: 4);
  // The key identifier of |fnek|.
  fnek_sig:[ubyte] (id: 5);

  // Chaps database encryption key.
  chaps_key:[ubyte] (id: 6);

  // A mapping of auth factor labels to reset secrets.
  reset_secrets:[ResetSecretMapping] (id: 7);

  // A mapping of rate limiters' auth factor types to reset secrets.
  rate_limiter_reset_secrets:[TypeToResetSecretMapping] (id: 8);

  // Key derivation seed. This is used for deriving other fixed key materials
  // that should be kept in USS. Future fixed key materials should be derived
  // by the key derivation seed instead of added as new USS fields.
  key_derivation_seed:[ubyte] (id: 9);
}

root_type UserSecretStashPayload;
