#!/bin/sh
# Copyright 2021 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

echo "Lockbox cache started"

if [ -z "${LOCKBOX_CACHE_DIR}" ]; then
  echo "LOCKBOX_CACHE_DIR is unset";
  exit 1
fi

if [ -z "${LOCKBOX_NVRAM_FILE}" ]; then
  echo "LOCKBOX_NVRAM_FILE is unset";
  exit 1
fi

if [ -z "${INSTALL_ATTRS_CACHE}" ]; then
  echo "INSTALL_ATTRS_CACHE is unset";
  exit 1
fi

if [ -z "${OLD_INSTALL_ATTRS_FILE}" ]; then
  echo "OLD_INSTALL_ATTRS_FILE is unset";
  exit 1
fi

if [ -z "${NEW_INSTALL_ATTRS_FILE}" ]; then
  echo "NEW_INSTALL_ATTRS_FILE is unset";
  exit 1
fi

umask 022
mkdir -p -m 0711 "${LOCKBOX_CACHE_DIR}"

if [ "$(tpm_version_client)" -eq 2 ]; then
  LOCKBOX_INDEX=0x9da5b0
else
  LOCKBOX_INDEX=0x20000004
fi

# Use tpm_manager to read the NV space.
/usr/bin/gdbus wait --system -t 15 org.chromium.TpmManager
tpm_manager_client read_space --index="${LOCKBOX_INDEX}" \
                              --file="${LOCKBOX_NVRAM_FILE}"

# Exit the script if any command fails.
set -e

# Look for the existing install attributes.
# If there's any, move them to new path.
# Note: this whole process is kept as much fault-tolerant as possible.
if [ -s $OLD_INSTALL_ATTRS_FILE ]; then
  if [ ! -s $NEW_INSTALL_ATTRS_FILE ]; then
    echo "Migrating install attributes"
    # First, create a copy to the new location, then rename it.
    # If the copy/rename operation somehow gets interrupted (sudden
    # reboot), the old install_attributes.pb file will still be there at
    # the next reboot.
    # So, it will reach this step again and eventually continue from here.
    mkdir -p $INSTALL_ATTRS_NEW_PATH
    sync
    cp $OLD_INSTALL_ATTRS_FILE $COPY_INSTALL_ATTRS_FILE
    sync
    mv $COPY_INSTALL_ATTRS_FILE $NEW_INSTALL_ATTRS_FILE
    sync
  fi
fi

# If the nvram file is not empty.
if [ -s "${LOCKBOX_NVRAM_FILE}" ]; then
  echo "Validating lockbox"
  lockbox-cache --cache="${INSTALL_ATTRS_CACHE}" \
                --nvram="${LOCKBOX_NVRAM_FILE}" \
                --lockbox="${NEW_INSTALL_ATTRS_FILE}"
else
  echo "Using fallback lockbox"
  # For TPM-less devices and legacy CR1 devices,
  # pretend like lockbox is supported.
  cp "${NEW_INSTALL_ATTRS_FILE}" "${INSTALL_ATTRS_CACHE}"
fi

# There are no other consumers; remove the nvram data.
rm "${LOCKBOX_NVRAM_FILE}"
