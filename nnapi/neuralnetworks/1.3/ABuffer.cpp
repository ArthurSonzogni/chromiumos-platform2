// Copyright 2020 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This is the boilerplate implementation of the IAllocator HAL interface,
// generated by the hidl-gen tool and then modified for use on Chrome OS.
// Modifications include:
// - Removal of non boiler plate client and server related code.
// - Reformatting to meet the Chrome OS coding standards.
//
// Originally generated with the command:
// $ hidl-gen -o output -L c++-adapter -r android.hardware:hardware/interfaces \
//   android.hardware.neuralnetworks@1.3

#include <android/hardware/neuralnetworks/1.3/ABuffer.h>
#include <android/hardware/neuralnetworks/1.3/IBuffer.h>
#include <hidladapter/HidlBinderAdapter.h>

namespace android {
namespace hardware {
namespace neuralnetworks {
namespace V1_3 {

ABuffer::ABuffer(
    const ::android::sp<::android::hardware::neuralnetworks::V1_3::IBuffer>&
        impl)
    : mImpl(impl) {
}  // Methods from ::android::hardware::neuralnetworks::V1_3::IBuffer follow.
::android::hardware::Return<
    ::android::hardware::neuralnetworks::V1_3::ErrorStatus>
ABuffer::copyTo(const ::android::hardware::hidl_memory& dst) {
  auto _hidl_out = mImpl->copyTo(dst);
  if (!_hidl_out.isOkUnchecked()) {
    return _hidl_out;
  }
  return _hidl_out;
}
::android::hardware::Return<
    ::android::hardware::neuralnetworks::V1_3::ErrorStatus>
ABuffer::copyFrom(const ::android::hardware::hidl_memory& src,
                  const ::android::hardware::hidl_vec<uint32_t>& dimensions) {
  auto _hidl_out = mImpl->copyFrom(src, dimensions);
  if (!_hidl_out.isOkUnchecked()) {
    return _hidl_out;
  }
  return _hidl_out;
}

// Methods from ::android::hidl::base::V1_0::IBase follow.

}  // namespace V1_3
}  // namespace neuralnetworks
}  // namespace hardware
}  // namespace android
