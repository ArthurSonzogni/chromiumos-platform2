# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/pkg_config.gni")

libbase_src = "../aosp/system/core/base"
libcutils_src = "../aosp/system/core/libcutils"
libutils_src = "../aosp/system/core/libutils"

group("all") {
  deps = [
    ":libnnapi-base",
    ":libnnapi-cutils",
    ":libnnapi-utils",
  ]
  if (use.test) {
    deps += [
      ":libnnapi-base_testrunner",
      ":libnnapi-cutils_testrunner",
      ":libnnapi-utils_testrunner",
    ]
  }
}

pkg_config("target_defaults") {
  cflags = [
    "-Wall",
    "-Werror",
    "-Wextra",
  ]
  cflags_cc = [ "-std=c++17" ]
  defines = []
  pkg_deps = [ "libbrillo" ]
}

static_library("libnnapi-base") {
  include_dirs = [ "${libbase_src}/include" ]
  configs += [ ":target_defaults" ]
  sources = [
    "${libbase_src}/chrono_utils.cpp",
    "${libbase_src}/errors_unix.cpp",
    "${libbase_src}/file.cpp",
    "${libbase_src}/mapped_file.cpp",
    "${libbase_src}/parsebool.cpp",
    "${libbase_src}/process.cpp",
    "${libbase_src}/properties.cpp",
    "${libbase_src}/stringprintf.cpp",
    "${libbase_src}/strings.cpp",
    "${libbase_src}/threads.cpp",
  ]
}

if (use.test) {
  executable("libnnapi-base_testrunner") {
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    include_dirs = [ "${libbase_src}/include" ]
    deps = [
      ":libnnapi-base",
      "//common-mk/testrunner:testrunner",
    ]
    sources = [
      "${libbase_src}/chrono_utils_test.cpp",
      "${libbase_src}/endian_test.cpp",
      "${libbase_src}/errors_test.cpp",

      # TODO(b/157009593) - Expected unit tests are failing.
      # "${libbase_src}/expected_test.cpp",
      "${libbase_src}/macros_test.cpp",
      "${libbase_src}/mapped_file_test.cpp",
      "${libbase_src}/no_destructor_test.cpp",
      "${libbase_src}/parsebool_test.cpp",
      "${libbase_src}/parsedouble_test.cpp",
      "${libbase_src}/parseint_test.cpp",
      "${libbase_src}/process_test.cpp",
      "${libbase_src}/properties_test.cpp",

      # TODO(b/157089900): android-base/format.h requires libfmt.
      # "${libbase_src}/result_test.cpp",
      "${libbase_src}/scopeguard_test.cpp",
      "${libbase_src}/stringprintf_test.cpp",
      "${libbase_src}/strings_test.cpp",
    ]
  }
}

static_library("libnnapi-cutils") {
  include_dirs = [ "${libcutils_src}/include" ]
  sources = [
    "${libcutils_src}/config_utils.cpp",
    "${libcutils_src}/hashmap.cpp",
    "${libcutils_src}/klog.cpp",
    "${libcutils_src}/load_file.cpp",
    "${libcutils_src}/native_handle.cpp",
    "${libcutils_src}/threads.cpp",
  ]
}

static_library("libnnapi-utils") {
  include_dirs = [
    "${libcutils_src}/include",
    "${libutils_src}/include",
  ]
  sources = [
    "${libutils_src}/Errors.cpp",
    "${libutils_src}/JenkinsHash.cpp",
    "${libutils_src}/NativeHandle.cpp",
    "${libutils_src}/Timers.cpp",
  ]
}

if (use.test) {
  executable("libnnapi-cutils_testrunner") {
    configs += [ "//common-mk:test" ]
    include_dirs = [ "${libcutils_src}/include" ]
    deps = [
      ":libnnapi-cutils",
      "//common-mk/testrunner:testrunner",
    ]
    sources = [ "${libcutils_src}/native_handle_test.cpp" ]
  }
  executable("libnnapi-utils_testrunner") {
    configs += [ "//common-mk:test" ]
    include_dirs = [ "${libutils_src}/include" ]
    deps = [
      ":libnnapi-utils",
      "//common-mk/testrunner:testrunner",
    ]
    sources = [ "${libutils_src}/Mutex_test.cpp" ]
  }
}
