// Copyright 2018 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

option cc_enable_arenas = true;

// This file defines services that will be running in the guest container that
// will be used by the host.
package vm_tools.container;

import "common.proto";

// Request protobuf for launching an application in the container.
message LaunchApplicationRequest {
  // The ID of the application to launch. This should correspond to an
  // identifier for a .desktop file available in the container.
  string desktop_file_id = 1;

  // Files to pass as arguments when launching the application, if any, given
  // as absolute paths within the container's filesystem.
  repeated string files = 2;
}

// Response protobuf for launching an application.
message LaunchApplicationResponse {
  // If true, the requested application launched successfully.
  bool success = 1;

  // The failure_reason if the requested application could not be started.
  string failure_reason = 2;
}

// Request proto for getting an application icon from the container.
message IconRequest {
  // The IDs of the applications to get icons for. These should correspond to
  // identifiers for .desktop files available in the container.
  repeated string desktop_file_ids = 1;

  //  The size of the icon is icon_size by icon_size.
  int32 icon_size = 2;

  // The target scale of this icon. This is the scale at which this icon is
  // designed to be used.
  int32 scale = 3;
}

// One desktop file ID and the icon found for it.
message DesktopIcon {
  string desktop_file_id = 1;

  // Icon data in png format.
  bytes icon = 2;
}

// Response proto for getting an application icon.
message IconResponse {
  repeated DesktopIcon desktop_icons = 1;
}

// Request protobuf for launching a vshd instance.
message LaunchVshdRequest {
  // The host port for vshd to connect to.
  uint32 port = 1;
}

// Response protobuf for launching a vshd instance.
message LaunchVshdResponse {
  // If true, the vshd launched successfully.
  bool success = 1;

  // The failure_reason if vshd could not be started.
  string failure_reason = 2;
}

// Implemented by garcon inside of the container.
service Garcon {
  // Called to launch an application in a container.
  rpc LaunchApplication(LaunchApplicationRequest)
      returns (LaunchApplicationResponse);

  // Get an application icon from the container.
  rpc GetIcon(IconRequest) returns (IconResponse);

  // Launch a vshd instance that will connect back to the host.
  rpc LaunchVshd(LaunchVshdRequest) returns (LaunchVshdResponse);
}
