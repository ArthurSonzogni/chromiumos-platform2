# Copyright 2019 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/pkg_config.gni")

group("host") {
  deps = [
    "//vm_tools/cicerone:cicerone_client",
    "//vm_tools/cicerone:vm_cicerone",
    "//vm_tools/concierge",
    "//vm_tools/maitred:maitred_client",
    "//vm_tools/seneschal",
    "//vm_tools/seneschal:seneschal_client",
    "//vm_tools/syslog:vmlog_forwarder",
    "//vm_tools/vsh",
    "//vm_tools/vsh:vshd",
  ]
  if (use.arcvm) {
    deps += [ ":vm_pstore_dump" ]
  }
  if (use.test) {
    deps += [
      "//vm_tools/cicerone:cicerone_test",
      "//vm_tools/concierge:concierge_test",
      "//vm_tools/syslog:syslog_forwarder_test",
      "//vm_tools/vsh:vsh_test",
    ]
    if (use.arcvm) {
      deps += [ ":vm_pstore_dump_test" ]
    }
  }
  if (use.fuzzer) {
    deps += [
      "//vm_tools/cicerone:cicerone_container_listener_fuzzer",
      "//vm_tools/vsh:vsh_client_fuzzer",
    ]
  }
}

# D-Bus bindings from other platform2 projects need to be listed here so that
# the system include paths for the headers are added through pkg-config.
pkg_config("host_target_defaults_pkgs") {
  pkg_deps = [
    "libbrillo",
    "libchrome",
    "libcros_config",
    "libnet-base",
    "libpatchpanel-client",
  ]
}

config("host_target_defaults") {
  configs = [ ":host_target_defaults_pkgs" ]
  defines = [
    "USE_BIG_GL=${use.libglvnd}",
    "USE_BOREALIS_HOST=${use.borealis_host}",
    "USE_CROSVM_CROSS_DOMAIN_CONTEXT=${use.cross_domain_context}",
    "USE_CROSVM_CROSS_DOMAIN_CONTEXT_BOREALIS=${use.cross_domain_context_borealis}",
    "USE_CROSVM_FIXED_BLOB_MAPPING=${use.crosvm_fixed_blob_mapping}",
    "USE_CROSVM_VENUS_GWP_ASAN=${use.venus_gwp_asan}",
    "USE_CROSVM_VIRTGPU_NATIVE_CONTEXT=${use.virtgpu_native_context}",
    "USE_CROSVM_VIRTIO_VIDEO=${use.crosvm_virtio_video}",
    "USE_CROSVM_VULKAN=${use.vulkan}",
    "USE_PMEM_DEVICE_FOR_ROOTFS=${use.amd64}",
  ]
}

if (use.arcvm) {
  static_library("libvm_pstore_dump") {
    sources = [ "../pstore_dump/persistent_ram_buffer.cc" ]
    configs += [ ":host_target_defaults" ]
    deps = [ "//vm_tools:libvm_tools_common" ]
  }

  executable("vm_pstore_dump") {
    sources = [ "../pstore_dump/main.cc" ]
    configs += [ ":host_target_defaults" ]
    deps = [ ":libvm_pstore_dump" ]
  }
}

if (use.test) {
  if (use.arcvm) {
    executable("vm_pstore_dump_test") {
      sources = [ "../pstore_dump/persistent_ram_buffer_test.cc" ]
      configs += [
        "//common-mk:test",
        ":host_target_defaults",
      ]
      deps = [
        ":libvm_pstore_dump",
        "//common-mk/testrunner:testrunner",
      ]
    }
  }
}

if (use.fuzzer) {
  pkg_config("vm_host_tools_fuzzer_pkg_deps") {
    pkg_deps = [
      "libprotobuf-mutator",
      "protobuf",
      "vm_protos",
    ]
  }
}
