# Copyright 2019 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/ebpf_gen.gni")
import("//common-mk/pkg_config.gni")
import("../sommelier/wayland_protocol.gni")

group("guest") {
  deps = [
    ":guest_service_failure_notifier",
    ":maitred",
    ":port_listener",
    ":upgrade_container",
    ":vm_syslog",
    "//vm_tools/garcon",
    "//vm_tools/vsh:vshd",
  ]
  if (!use.fuzzer) {
    # Exclude notificationd and the demos from fuzzer builds since they
    # pull in wayland, which causes build problems.
    deps += [
      ":notificationd",
      ":wayland_demo",
      ":x11_demo",
    ]
  }
  if (use.test) {
    deps += [
      ":maitred_init_test",
      ":maitred_service_test",
      ":maitred_syslog_test",
      ":notificationd_test",
      "//vm_tools/garcon:garcon_desktop_file_test",
      "//vm_tools/garcon:garcon_icon_finder_test",
      "//vm_tools/garcon:garcon_icon_index_file_test",
      "//vm_tools/garcon:garcon_mime_types_parser_test",
    ]
  }
  if (use.fuzzer) {
    deps += [
      "//vm_tools/garcon:garcon_desktop_file_fuzzer",
      "//vm_tools/garcon:garcon_icon_index_file_fuzzer",
      "//vm_tools/garcon:garcon_ini_parse_util_fuzzer",
      "//vm_tools/garcon:garcon_mime_types_parser_fuzzer",
    ]
  }
}

pkg_config("target_defaults") {
  pkg_deps = [ "libchrome" ]
}

static_library("libmaitred") {
  sources = [
    "../maitred/init.cc",
    "../maitred/service_impl.cc",
  ]
  configs += [ ":target_defaults" ]
  defines = [ "USE_VM_BOREALIS=${use.vm_borealis}" ]
  pkg_deps = [
    "grpc++",
    "libbrillo",
    "protobuf",
    "vm_protos",
  ]
}

static_library("libsyslog") {
  sources = [
    "../syslog/collector.cc",
    "../syslog/guest_collector.cc",
    "../syslog/parser.cc",
  ]
  configs += [ ":target_defaults" ]
  all_dependent_pkg_deps = [ "libminijail" ]
  pkg_deps = [
    "grpc++",
    "protobuf",
    "vm_protos",
  ]
}

executable("maitred") {
  sources = [ "../maitred/main.cc" ]
  configs += [ ":target_defaults" ]
  deps = [
    ":libmaitred",
    "//vm_tools:libvm_tools_common",
  ]
}

executable("guest_service_failure_notifier") {
  sources = [ "../guest_service_failure_notifier/main.cc" ]
  configs += [ ":target_defaults" ]
  pkg_deps = [
    "grpc++",
    "protobuf",
    "vm_protos",
  ]
}

executable("vm_syslog") {
  sources = [ "../syslog/main.cc" ]
  configs += [ ":target_defaults" ]
  deps = [ ":libsyslog" ]
}

generate_vmlinux("vmlinux_h") {
  vmlinux_out_dir = "include/vm_tools/port_listener/vmlinux"
  btf_out_dir = "bpf"
}

generate_ebpf_skeletons("ebpf_listen_tracker") {
  sources = [ "../port_listener/listen_tracker.ebpf.c" ]
  bpf_skeleton_out_dir = "include/vm_tools/port_listener/bpf/generated"
  btf_inout_dir = "bpf"
  deps = [ ":vmlinux_h" ]
}

executable("port_listener") {
  sources = [ "../port_listener/main.cc" ]
  configs += [ ":target_defaults" ]
  pkg_deps = [
    "grpc++",
    "libbpf",
    "protobuf",
    "vm_protos",
  ]
  deps = [ ":ebpf_listen_tracker" ]
}

if (!use.fuzzer) {
  wayland_protocol_library("notification-protocol") {
    sources = [ "../notificationd/protocol/notification-shell-unstable-v1.xml" ]
    configs = [ ":target_defaults" ]
    out_dir = "include"
  }

  static_library("libnotificationd") {
    sources = [
      "../notificationd/dbus_service.cc",
      "../notificationd/notification_daemon.cc",
      "../notificationd/notification_shell_client.cc",
    ]
    include_dirs = [ ".." ]
    defines = [ "WL_HIDE_DEPRECATED" ]
    public_pkg_deps = [
      "wayland-client",
      "wayland-server",
    ]
    pkg_deps = [
      "dbus-1",
      "libbrillo",
    ]
    deps = [ ":notification-protocol" ]
  }

  executable("notificationd") {
    sources = [ "../notificationd/notificationd.cc" ]
    include_dirs = [ ".." ]
    public_pkg_deps = [
      "wayland-client",
      "wayland-server",
    ]
    pkg_deps = [
      "dbus-1",
      "libbrillo",
    ]
    deps = [
      ":libnotificationd",
      ":notification-protocol",
    ]
  }

  executable("wayland_demo") {
    sources = [ "../demos/wayland_demo.cc" ]
    libs = [ "wayland-client" ]
    pkg_deps = [
      "libbrillo",
      "libchrome",
      "wayland-client",
    ]
  }

  executable("x11_demo") {
    sources = [ "../demos/x11_demo.cc" ]
    libs = [ "X11" ]
    pkg_deps = [
      "libbrillo",
      "libchrome",
    ]
  }
}

copy("upgrade_container") {
  sources = [ "../upgrade_container/upgrade_container" ]
  outputs = [ "$root_out_dir/upgrade_container" ]
}

if (use.test) {
  executable("maitred_init_test") {
    sources = [ "../maitred/init_test.cc" ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    deps = [
      ":libmaitred",
      "//common-mk/testrunner:testrunner",
      "//vm_tools:libvm_tools_common",
    ]
  }

  executable("maitred_service_test") {
    sources = [ "../maitred/service_impl_test.cc" ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    deps = [
      ":libmaitred",
      "//common-mk/testrunner:testrunner",
      "//vm_tools:libvm_tools_common",
    ]
  }

  executable("maitred_syslog_test") {
    sources = [
      "../syslog/collector_test.cc",
      "../syslog/parser_test.cc",
    ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    deps = [
      ":libsyslog",
      "//common-mk/testrunner:testrunner",
    ]
  }

  executable("notificationd_test") {
    sources = [ "../notificationd/dbus_service_test.cc" ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
    ]
    public_pkg_deps = [
      "wayland-client",
      "wayland-server",
    ]
    pkg_deps = [
      "dbus-1",
      "libbrillo",
      "libchrome-test",
    ]
    deps = [
      ":libnotificationd",
      ":notification-protocol",
      "//common-mk/testrunner:testrunner",
    ]
  }
}
