// Copyright 2023 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <base/containers/span.h>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "libec/ec_panicinfo.h"

namespace ec {
namespace {

TEST(ParsePanicInfo, ParsePanicInfoSuccess) {
  constexpr uint8_t data[] = {
      0x01, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x64, 0x66, 0xad, 0xde, 0x36, 0xa4, 0x08, 0x10,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x74, 0x00, 0x00, 0x00, 0x50, 0x6e, 0x63, 0x21};
  std::string expected_result =
      "Saved panic data: 08 (NEW)\n"
      "=== PROCESS EXCEPTION: 00 ====== xPSR: ffffffff ===\n"
      "r0 :         r1 :         r2 :         r3 :        \n"
      "r4 :dead6664 r5 :1008a436 r6 :00000000 r7 :00000000\n"
      "r8 :00000000 r9 :00000000 r10:00000000 r11:00000000\n"
      "r12:         sp :00000000 lr :         pc :        \n"
      "\n"
      "cfsr=00000000, shcsr=00000000, hfsr=00000000, dfsr=00000000, "
      "ipsr=00000000\n";
  auto result = ParsePanicInfo(base::span{data});
  EXPECT_TRUE(result.has_value());
  EXPECT_EQ(result.value(), expected_result);
}

TEST(ParsePanicInfo, ParsePanicInfoFailed) {
  constexpr uint8_t data[] = {
      0x54, 0xfa, 0xf6, 0x91, 0x8b, 0xa2, 0xeb, 0x43, 0xd5, 0x64, 0x5a, 0x04,
      0x77, 0x37, 0x0b, 0x35, 0x9b, 0xba, 0xc8, 0x9c, 0xd7, 0x07, 0x91, 0x55,
      0xad, 0x2b, 0x7d, 0x4d, 0x27, 0x89, 0x43, 0x91, 0x33, 0x46, 0x39, 0xe5,
      0x41, 0x2d, 0xd8, 0x7c, 0x96, 0x7e, 0x7e, 0x78, 0xe3, 0xfb, 0x7e, 0x77,
      0x74, 0x8e, 0xde, 0x4f, 0x26, 0x17, 0xda, 0xd2, 0x52, 0x36, 0xac, 0x04,
      0xeb, 0x62, 0xac, 0xec, 0x0e, 0xed, 0x2b, 0xe3, 0x22, 0x35, 0xe7, 0xd3,
      0x9f, 0x75, 0xa0, 0xde, 0x86, 0x5f, 0x6b, 0xe5, 0xa5, 0x97, 0x2d, 0x4e,
      0x8c, 0x07, 0xdd, 0x17, 0x4f, 0xc9, 0xa1, 0xa3, 0x07, 0x49, 0x2e, 0x00,
      0x84, 0xdc, 0x48, 0x81, 0x3e, 0xee, 0xd8, 0x6a, 0x85, 0xc9, 0x64, 0xcf,
      0xf6, 0x12, 0x68, 0x6c, 0x1a, 0xf8, 0xf0, 0xcc, 0x39, 0x5a, 0x89, 0xdc,
      0x6c, 0x89, 0xcb, 0x4b, 0x58, 0xb2, 0x20, 0x80, 0x76, 0xca, 0x90, 0x81,
      0xda, 0xa3, 0x47, 0xa8, 0x7b, 0xea, 0xd4, 0x19, 0xb2, 0xcb, 0x7e, 0x30,
      0x54, 0x4b, 0x5e, 0x9f, 0xec, 0x04, 0x12, 0x4b, 0x11, 0x47, 0x6b, 0x3f,
      0x00, 0x59, 0x71, 0x36, 0x4b, 0x56, 0x18, 0x3c, 0x59, 0x29, 0x58, 0x22,
      0x74, 0x3b, 0x1d, 0x1a};
  auto result = ParsePanicInfo(base::span{data});
  EXPECT_FALSE(result.has_value());
}

}  // namespace
}  // namespace ec
