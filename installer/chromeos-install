#!/bin/sh -u
# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# A script to install from removable media to hard disk.

# Load functions and constants for chromeos-install.
. "$(dirname "$0")/chromeos-common.sh" || exit 1
. /usr/lib/shflags || exit 1

if [ $(uname -m) = "armv7l" ]; then
  DEFAULT_DST=/dev/mmcblk0
else
  DEFAULT_DST=/dev/sda
fi

DEFINE_string dst "${DEFAULT_DST}" "Destination device"
DEFINE_boolean skip_src_removable ${FLAGS_FALSE} \
  "Skip check to ensure source is removable"
DEFINE_boolean skip_rootfs ${FLAGS_FALSE} \
  "Skip installing the rootfs; Only set up partition table"
DEFINE_boolean run_as_root ${FLAGS_FALSE} \
  "Allow root to run this script (Careful, it won't prompt for a password!)"
DEFINE_boolean yes ${FLAGS_FALSE} \
  "Answer yes to everything"

# Parse command line
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

set -e

# Unless you pass --run_as_root, you can't be root when you start this,
# because we want to force you to give the root password as confirmation
# that you're allowed to do it. We don't care what other account you're using;
# you'll still need to sudo before this works.
if [ $(id -u) -eq "0" -a "${FLAGS_run_as_root}" -eq "${FLAGS_FALSE}" ]
then
  echo "Note: You must be the 'chronos' user to run this script. Unless"
  echo "you pass --run_as_root and run as root."
  exit 1
fi

# First find the root partition that we are installing from and verify it.
ROOTDEV=$(rootdev)
# From root partition to root block device.
SRC=$(get_block_dev_from_partition_dev ${ROOTDEV})
REMOVABLE=$(cat /sys/block/${SRC#/dev/}/removable)
if [ "$FLAGS_skip_src_removable" -eq "${FLAGS_FALSE}" -a "$REMOVABLE" != "1" ]
then
  echo "Error: Source does not look like a removable device: $SRC"
  exit 1
fi

# Check out the dst device.
if [ ! -b "$FLAGS_dst" ]
then
  echo "Error: Unable to find destination block device: $FLAGS_dst"
  exit 1
fi
REMOVABLE=$(cat /sys/block/${FLAGS_dst#/dev/}/removable)
if [ $? -ne 0 ]
then
  echo "Error: Invalid destination device (must be whole device): $FLAGS_dst"
  exit 1
fi
if [ "$REMOVABLE" != "0" ]
then
  echo "Error: Attempt to install to a removeable device: $FLAGS_dst"
  exit 1
fi
if [ "$FLAGS_dst" = "$SRC" ]; then
  echo "Error: src and dst the same: $SRC = $FLAGS_dst"
  exit 1
fi

# Ask for root password to be sure.
echo "This will install from '$SRC' to '$FLAGS_dst'. If you are sure this is"
echo "what you want then feel free to enter the root password to proceed."
sudo -K

echo "This will erase all data at this destination: $FLAGS_dst"
if [ "${FLAGS_yes}" -eq "$FLAGS_FALSE" ]; then
  read -p "Are you sure (y/N)? " SURE
  if [ "$SURE" != "y" ] ; then
    echo "Ok, better safe than sorry; you answered '$SURE'."
    exit 1
  fi
fi

##############################################################################
# Helpful constants and functions.

PMBRCODE=/tmp/gptmbr.bin
TMPFILE=/tmp/install-temp-file
TMPMNT=/tmp/install-mount-point
mkdir -p ${TMPMNT}

# Create a loop device on the given file at a specified (sector) offset.
# Remember the loop device using the global variable LOOP_DEV.
# Invoke as: command
# Args: FILE OFFSET
loop_offset_setup() {
  local filename=$1
  local offset=$2

  LOOP_DEV=$(sudo losetup -f)
  if [ -z "$LOOP_DEV" ]
  then
    echo "No free loop device. Free up a loop device or reboot. Exiting."
    exit 1
  fi

  sudo losetup -o $(($offset * 512)) ${LOOP_DEV} ${filename}
}

# Delete the current loop device.
loop_offset_cleanup() {
  # losetup -a doesn't always show every active device, so we'll always try to
  # delete what we think is the active one without checking first. Report
  # success no matter what.
  sudo losetup -d ${LOOP_DEV} || /bin/true
}

# Mount the existing loop device at the mountpoint in $TMPMNT.
# Args: none
mount_on_loop_dev() {
  sudo mount ${LOOP_DEV} ${TMPMNT}
}

# Unmount loop-mounted device.
umount_from_loop_dev() {
  mount | grep -q " on ${TMPMNT} " && sudo umount ${TMPMNT}
}

# Undo both mount and loop.
my_cleanup() {
  umount_from_loop_dev
  loop_offset_cleanup
}

# Copy the SRC_PARTITION onto the DST_DEV device at START_OFFSET and label it,
# assuming it's an ext2-based filesystem.
# Invoke as: command
# Args: SRC_PARTITION DST_DEV START_OFFSET LABEL
install_rootfs() {
  local src_partition=$1
  local dst_dev=$2
  local start_offset=$3
  local label=$4

  # Going to copy using a block size of 1MB which is ok because
  # the partitions are aligned (to 2MB)
  # Need to keep next three lines in step!
  # first is blocksize to dd, second is the same in 512 byte sectors
  # third is number of copy_bs needed to cover 2kB needed for label
  local copy_bs=1M
  local sec_per_copybs=2048
  local tmp_count=1

  # We copy the system image a bit strangely here because we have observed
  # cases in installing to hard disk where people ctrl-c the operation and then
  # are not longer able to properly boot a USB image. This is because when
  # booting from USB we set the root device by label, so if you partially copy
  # the FS here without updating the label then a subsequent USB boot may try
  # to use the wrong device and fail.
  sync

  echo "image $label..."

  # start_offset is in 512 byte sectors, but we will tell dd to use
  # blocksize of copy_bs. Need to convert and check sanity
  local start_off_incopybs=$((${start_offset} / ${sec_per_copybs}))

  if [ $((${start_offset} % ${sec_per_copybs})) -ne 0 ]; then
      echo Rootfs offset ${start_offset} not multiple of block size ${copy_bs}
      echo Rootfs install FAILED
      exit 1
  fi


  # Copy first 1MB of the root image to a temp file, set the label,
  # and then copy it to the dest.
  # (this was done using 2kB with bs=512 tmp_count=4
  # but a 1MB file in tmp should be ok)
  # NOTE: This hack won't work if we stop using an ext-based rootfs.
  local superblock_offset=1024
  local label_field_offset=120
  local label_field_length=16
  sudo dd if=${src_partition} of=${TMPFILE} bs=${copy_bs} count=${tmp_count}
  sudo dd if=/dev/zero of=${TMPFILE} bs=1                \
    seek=$((superblock_offset + label_field_offset)) \
    count=$label_field_length conv=notrunc
  echo -n "${label}" | sudo dd of=${TMPFILE} \
    seek=$((superblock_offset + label_field_offset)) \
    bs=1 count=$((label_field_length - 1)) conv=notrunc
  # Copy the new label superblock to the dest.
  sudo dd if=${TMPFILE} of=${dst_dev} bs=${copy_bs} \
    seek=${start_off_incopybs} conv=notrunc

  # Copy the rest of the source to the dest.
  sudo dd if=${src_partition} of=${dst_dev} conv=notrunc \
    bs=${copy_bs} skip=${tmp_count} \
    seek=$((${start_off_incopybs} + ${tmp_count}))

  sync
}

##############################################################################

# What do we expect & require to have on the source device?
STATEFUL_IMG=$(make_partition_dev ${SRC} 1)
KERNEL_IMG=$(make_partition_dev ${SRC} 2)
ROOTFS_IMG=$(make_partition_dev ${SRC} 3)
OEM_IMG=$(make_partition_dev ${SRC} 8)
ESP_IMG=$(make_partition_dev ${SRC} 12)

if [ $(uname -m) = "armv7l" ]; then
  PMBRCODE=/dev/zero
else
  # Steal the PMBR code from the source MBR to put on the dest MBR, for booting
  # on legacy-BIOS devices.
  sudo dd if=$SRC of=$PMBRCODE bs=512 count=1
fi

# Create the GPT.
install_gpt $FLAGS_dst $ROOTFS_IMG $KERNEL_IMG $STATEFUL_IMG $PMBRCODE $ESP_IMG

if [ $(uname -m) = "armv7l" ]; then
  DEVICE=$(echo $FLAGS_dst | sed -e 's/^.*\([0-9]\)$/\1/')
  MBR_SCRIPT_UIMG=$(make_arm_mbr ${START_KERN_A} ${NUM_KERN_SECTORS} ${DEVICE})
  sudo dd bs=1 count=`stat --printf="%s" ${MBR_SCRIPT_UIMG}` \
     if="$MBR_SCRIPT_UIMG" of=${FLAGS_dst} conv=notrunc
fi

if [ "$FLAGS_skip_rootfs" -eq "$FLAGS_TRUE" ]; then
  echo Done installing partitons.
  exit 0
fi

# Install the content.
echo "Copying kernel..."
sudo dd if=${KERNEL_IMG} of=${FLAGS_dst} conv=notrunc bs=512 \
  seek=${START_KERN_A}
sudo dd if=${KERNEL_IMG} of=${FLAGS_dst} conv=notrunc bs=512 \
  seek=${START_KERN_B}

echo "Copying rootfs..."
install_rootfs ${ROOTFS_IMG} ${FLAGS_dst} ${START_ROOTFS_A} "H-ROOT-A"
install_rootfs ${ROOTFS_IMG} ${FLAGS_dst} ${START_ROOTFS_B} "H-ROOT-B"

echo "Copying OEM customization..."
sudo dd if=${OEM_IMG} of=${FLAGS_dst} conv=notrunc bs=512 seek=${START_OEM}

echo "Copying ESP..."
sudo dd if=${ESP_IMG} of=${FLAGS_dst} conv=notrunc bs=512 seek=${START_ESP}

if [ $(uname -m) != "armv7l" ]; then

  # We can't guarantee that the kernel will see the new partition table, so
  # we can't use it directly. We could force the kernel to reload it with an
  # ioctl, but then we might have the UI mounting and displaying any old
  # filesystems left over from the last install, and we don't want that either.
  # So any access that we need to do to the destination partitions will have
  # to go through loop devices.

  # Now run the postinstall script in each new rootfs. Note that even though
  # we're passing the new destination partition number as an arg, the postinst
  # script had better not try to access it, for the reasons we just gave.
  loop_offset_setup ${FLAGS_dst} ${START_ROOTFS_A}
  trap loop_offset_cleanup EXIT
  mount_on_loop_dev
  trap my_cleanup EXIT
  sudo ${TMPMNT}/postinst $(make_partition_dev ${FLAGS_dst} 3)
  umount_from_loop_dev
  trap loop_offset_cleanup EXIT
  loop_offset_cleanup
  trap - EXIT

  loop_offset_setup ${FLAGS_dst} ${START_ROOTFS_B}
  trap loop_offset_cleanup EXIT
  mount_on_loop_dev
  trap my_cleanup EXIT
  sudo ${TMPMNT}/postinst $(make_partition_dev ${FLAGS_dst} 5)
  umount_from_loop_dev
  trap loop_offset_cleanup EXIT
  loop_offset_cleanup
  trap - EXIT

fi

echo "Installing the stateful partition..."
loop_offset_setup $FLAGS_dst $START_STATEFUL
trap loop_offset_cleanup EXIT
sudo mkfs.ext3 -F -b 4096 -L "H-STATE" ${LOOP_DEV} \
  $(($NUM_STATEFUL_SECTORS / 8))

# Install the stateful partition content
if [ -f /root/.dev_mode ] ; then
  mount_on_loop_dev
  trap my_cleanup EXIT
  sudo cp -fpru /mnt/stateful_partition/var "$TMPMNT/var"
  if [ -d /mnt/stateful_partition/dev_image ] ; then
    sudo cp -fpru /mnt/stateful_partition/dev_image "$TMPMNT/dev_image"
  fi
  umount_from_loop_dev
  trap loop_offset_cleanup EXIT
fi
loop_offset_cleanup
trap - EXIT

if grep "vogue" /etc/lsb-release > /dev/null; then
   sudo uboot-env.py -f /dev/mtdblock0 -o 0x7c000 -s 0x4000 \
    --set bootcmd="mmc read 0 C0008000 0 1; autoscr C0008000"
fi

# Force data to disk before we declare done.
sync

echo "------------------------------------------------------------"
echo ""
echo "Installation to '$FLAGS_dst' complete."
echo "Please shutdown, remove the USB device, cross your fingers, and reboot."
