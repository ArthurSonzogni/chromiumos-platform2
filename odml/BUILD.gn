# Copyright 2024 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/flatbuffer.gni")
import("//common-mk/mojom_bindings_generator.gni")
import("//common-mk/pkg_config.gni")
import("//common-mk/proto_library.gni")

group("all") {
  if (use.feature_management) {
    deps = [
      ":coral_console",
      ":embedding_model_console",
      ":install_dbus_config",
      ":install_init",
      ":install_minijail_conf",
      ":install_policy",
      ":install_service_manager_policy_config",
      ":install_tmpfiles_config",
      ":libdmabufheap",
      ":mantis_console",
      ":odml_console",
      ":odmld",
      ":safety_console",
      ":translator_console",
    ]
    if (use.test) {
      deps += [
        ":coral_testrunner",
        ":mantis_testrunner",
        ":odml_testrunner",
        ":utils_testrunner",
      ]
    }
  }
}

pkg_config("target_defaults") {
  pkg_deps = [
    "absl",
    "flatbuffers",
    "libbrillo",
    "libchrome",
    "libdlcservice-client",
    "libmetrics",
    "libmojo_service_manager_fake",
    "libsession_manager-client",
    "mojo_service_manager",
    "protobuf-lite",
    "system_api",
  ]
  configs = [ "//common-mk:test" ]
  defines = [ "USE_MANTIS=${use.mantis}" ]
  include_dirs = [ "${sysroot}/usr/include/tensorflow" ]
  libs = [
    "tensorflowlite",
    "delegate_loader",
    "tflite_settings_json_parser",
  ]
}

source_set("libdmabufheap_source_set") {
  sources = [
    "dmabufheap/buffer_allocator.cc",
    "dmabufheap/buffer_allocator_wrapper.cc",
  ]

  # Use -fPIC so this code can be linked into a shared library.
  configs += [ "//common-mk:pic" ]
}

shared_library("libdmabufheap") {
  deps = [ ":libdmabufheap_source_set" ]
  install_path = "lib"
}

generate_mojom_bindings("mojo_bindings") {
  mojo_root = "${platform2_root}"
  if (use.ml_benchmark_drivers) {
    use_pic = true
  }
  sources = [
    "../ml/mojom/document_scanner.mojom",
    "../ml/mojom/document_scanner_param_types.mojom",
    "../ml/mojom/file_path.mojom",
    "../ml/mojom/geometry.mojom",
    "../ml/mojom/grammar_checker.mojom",
    "../ml/mojom/graph_executor.mojom",
    "../ml/mojom/handwriting_recognizer.mojom",
    "../ml/mojom/heatmap_palm_rejection.mojom",
    "../ml/mojom/image_content_annotation.mojom",
    "../ml/mojom/machine_learning_service.mojom",
    "../ml/mojom/model.mojom",
    "../ml/mojom/shared_memory.mojom",
    "../ml/mojom/soda.mojom",
    "../ml/mojom/tensor.mojom",
    "../ml/mojom/text_classifier.mojom",
    "../ml/mojom/text_suggester.mojom",
    "../ml/mojom/time.mojom",
    "../ml/mojom/web_platform_handwriting.mojom",
    "mojom/big_buffer.mojom",
    "mojom/bitmap.mojom",
    "mojom/coral_service.mojom",
    "mojom/cros_safety.mojom",
    "mojom/cros_safety_service.mojom",
    "mojom/embedding_model.mojom",
    "mojom/file.mojom",
    "mojom/image_info.mojom",
    "mojom/mantis_processor.mojom",
    "mojom/mantis_service.mojom",
    "mojom/on_device_model.mojom",
    "mojom/on_device_model_service.mojom",
    "mojom/token.mojom",
    "mojom/url.mojom",
    "mojom/uuid.mojom",
  ]
  mojo_extra_args = [
    "--typemap",
    rebase_path("mojom/type_mappings_internal.json"),
  ]
  enabled_features = [
    "file_path_is_string",
    "is_chromeos_ash",
  ]
}

source_set("mojo_bindings_lib") {
  sources = [
    "mojom/adaptation_assets_mojom_traits.h",
    "mojom/file_mojom_traits.cc",
    "mojom/file_mojom_traits.h",
    "mojom/file_path_mojom_traits.cc",
    "mojom/file_path_mojom_traits.h",
    "mojom/model_assets_mojom_traits.h",
    "mojom/read_only_file_mojom_traits.cc",
    "mojom/read_only_file_mojom_traits.h",
    "mojom/token_mojom_traits.cc",
    "mojom/token_mojom_traits.h",
    "mojom/uuid_mojom_traits.cc",
    "mojom/uuid_mojom_traits.h",
    "on_device_model/ml/chrome_ml_types_traits.cc",
    "on_device_model/ml/chrome_ml_types_traits.h",
    "on_device_model/public/cpp/capabilities.h",
    "on_device_model/public/cpp/capabilities_mojom_traits.h",
  ]
  public_deps = [ ":mojo_bindings" ]
  configs += [ ":target_defaults" ]
}

source_set("coral") {
  sources = [
    "coral/clustering/agglomerative_clustering.cc",
    "coral/clustering/clustering_factory.cc",
    "coral/clustering/engine.cc",
    "coral/common.cc",
    "coral/delayed_repeating_timer.cc",
    "coral/embedding/embedding_database.cc",
    "coral/embedding/engine.cc",
    "coral/metrics.cc",
    "coral/service.cc",
    "coral/title_generation/cache_storage.cc",
    "coral/title_generation/engine.cc",
    "coral/title_generation/simple_session.cc",
  ]
  public_deps = [ ":mojo_bindings_lib" ]
  deps = [
    ":coral_proto",
    ":utils",
  ]
  configs += [ ":target_defaults" ]
}

source_set("utils") {
  sources = [ "utils/performance_timer.cc" ]
  configs += [ ":target_defaults" ]
}

source_set("mantis") {
  sources = [
    "mantis/common.cc",
    "mantis/metrics.cc",
    "mantis/processor.cc",
    "mantis/prompt_rewriter.cc",
    "mantis/service.cc",
  ]
  public_deps = [ ":mojo_bindings_lib" ]
  deps = [ ":utils" ]
  configs += [ ":target_defaults" ]
}

source_set("odml") {
  sources = [
    "cros_safety/metrics.cc",
    "cros_safety/safety_service_manager_impl.cc",
    "embedding_model/dlc_model_loader.cc",
    "embedding_model/embedding_model_service.cc",
    "embedding_model/model_factory.cc",
    "embedding_model/model_holder.cc",
    "embedding_model/odml_shim_tokenizer.cc",
    "embedding_model/tflite_model_runner.cc",
    "i18n/ml_service_language_detector.cc",
    "i18n/translator_impl.cc",
    "on_device_model/ml/chrome_ml.cc",
    "on_device_model/ml/chrome_ml_audio_buffer.cc",
    "on_device_model/ml/gpu_blocklist.cc",
    "on_device_model/ml/on_device_model_executor.cc",
    "on_device_model/ml/performance_class.cc",
    "on_device_model/ml/session_accessor.cc",
    "on_device_model/ml/ts_model.cc",
    "on_device_model/on_device_model_service.cc",
    "on_device_model/platform_model_loader_chromeos.cc",
    "on_device_model/public/cpp/model_assets.cc",
    "on_device_model/public/cpp/text_safety_assets.cc",
    "periodic_metrics.cc",
    "session_state_manager/session_state_manager.cc",
    "utils/dlc_client_helper.cc",
    "utils/odml_shim_loader_impl.cc",
  ]
  public_deps = [
    ":mojo_bindings_lib",
    "//ml_core/dlc:dlc_client",
  ]
  deps = [ ":utils" ]
  configs += [ ":target_defaults" ]
}

executable("safety_console") {
  install_path = "/usr/local/bin"
  sources = [ "safety_console.cc" ]
  configs += [ ":target_defaults" ]
  deps = [ ":odml" ]
}

executable("odml_console") {
  install_path = "/usr/local/bin"
  sources = [ "odml_console.cc" ]
  configs += [ ":target_defaults" ]
  deps = [ ":odml" ]
}

executable("mantis_console") {
  install_path = "/usr/local/bin"
  sources = [ "mantis_console.cc" ]
  configs += [ ":target_defaults" ]
  deps = [
    ":mantis",
    ":odml",
  ]
}

executable("coral_console") {
  install_path = "/usr/local/bin"
  sources = [ "coral_console.cc" ]
  configs += [ ":target_defaults" ]
  deps = [
    ":coral",
    ":odml",
  ]
}

executable("embedding_model_console") {
  install_path = "/usr/local/bin"
  sources = [ "embedding_model_console.cc" ]
  configs += [ ":target_defaults" ]
  deps = [ ":odml" ]
}

executable("translator_console") {
  install_path = "/usr/local/bin"
  sources = [ "translator_console.cc" ]
  configs += [ ":target_defaults" ]
  deps = [ ":odml" ]
}

executable("odmld") {
  install_path = "bin"
  sources = [ "odmld.cc" ]
  configs += [ ":target_defaults" ]
  deps = [
    ":coral",
    ":mantis",
    ":odml",
  ]
}

# Install the policy for mojo service manager.
install_config("install_service_manager_policy_config") {
  sources = [ "odmld.jsonc" ]
  install_path = "/etc/mojo/service_manager/policy"
}

install_config("install_minijail_conf") {
  sources = [ "minijail/odmld.conf" ]
  install_path = "minijail_conf"
}

install_config("install_init") {
  sources = [ "init/odmld.conf" ]
  install_path = "upstart"
}

install_config("install_policy") {
  _arch = getenv("ARCH")
  sources = [ "minijail/odmld-seccomp-${_arch}.policy" ]
  install_path = "seccomp_policy"
  outputs = [ "odmld-seccomp.policy" ]
}

install_config("install_dbus_config") {
  sources = [ "dbus/org.chromium.Odml.conf" ]
  install_path = "dbus_system_d"
}

proto_library("coral_proto") {
  proto_in_dir = "coral/proto"
  proto_out_dir = "include/coral/proto_bindings"
  sources = [
    "${proto_in_dir}/embedding.proto",
    "${proto_in_dir}/title_cache.proto",
  ]
  standalone = true
}

if (use.test) {
  pkg_config("test_config") {
    pkg_deps = [
      "libchrome-test",
      "libsession_manager-client-test",
    ]
  }

  executable("odml_testrunner") {
    sources = [
      "cros_safety/safety_service_manager_impl_test.cc",
      "embedding_model/embedding_model_service_test.cc",
      "i18n/fake/fake_translate_api.cc",
      "i18n/translator_impl_test.cc",
      "on_device_model/fake/fake_chrome_ml_api.cc",
      "on_device_model/fake/on_device_model_fake.cc",
      "on_device_model/on_device_model_service_test.cc",
      "on_device_model/public/cpp/test_support/test_response_holder.cc",
      "session_state_manager/session_state_manager_test.cc",
    ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
      ":test_config",
    ]
    run_test = true
    deps = [
      ":odml",
      ":utils",
      "//common-mk/testrunner",
    ]
  }

  executable("coral_testrunner") {
    sources = [
      "coral/clustering/agglomerative_clustering_test.cc",
      "coral/clustering/engine_test.cc",
      "coral/delayed_repeating_timer_test.cc",
      "coral/embedding/embedding_database_test.cc",
      "coral/embedding/engine_test.cc",
      "coral/service_test.cc",
      "coral/title_generation/cache_storage_test.cc",
      "coral/title_generation/engine_test.cc",
      "on_device_model/fake/fake_chrome_ml_api.cc",
      "on_device_model/fake/on_device_model_fake.cc",
    ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
      ":test_config",
    ]
    run_test = true
    deps = [
      ":coral",
      ":odml",
      "//common-mk/testrunner",
    ]
  }

  executable("mantis_testrunner") {
    sources = [
      "mantis/fake/fake_mantis_api.cc",
      "mantis/processor_test.cc",
      "mantis/prompt_rewriter_test.cc",
      "mantis/service_test.cc",
    ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
      ":test_config",
    ]
    run_test = true
    deps = [
      ":mantis",
      ":odml",
      "//common-mk/testrunner",
    ]
  }

  executable("utils_testrunner") {
    sources = [ "utils/no_default_init_test.cc" ]
    configs += [
      "//common-mk:test",
      ":target_defaults",
      ":test_config",
    ]
    run_test = true
    deps = [ "//common-mk/testrunner" ]
  }
}

install_config("install_tmpfiles_config") {
  sources = [ "tmpfiles.d/odml.conf" ]
  install_path = "tmpfilesd"
}
