// Copyright 2024 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Note:
//   1. This file is copied from,
// https://cs.chromium.org/chromium/src/chromeos/ash/services/cros_safety/public/mojom/cros_safety_service.mojom
//   2. On chromium, we must use the version under mojo folder so we do not need
//      to and must not sync this file to chromium.

// Next MinVersion: 4
module cros_safety.mojom;

import "odml/mojom/cros_safety.mojom";

// This enum type identifies the result of retrieving the cloud safety
// session from CloudSafetyInstance.
[Stable, Extensible]
enum GetCloudSafetySessionResult {
  kOk = 0,
  [Default] kGenericError = 1,
  kMantaServiceFailedToCreate = 2,
};

// This enum type identifies the result of retrieving the on device safety
// session from OnDeviceSafetyInstance.
[Stable, Extensible]
enum GetOnDeviceSafetySessionResult {
  kOk = 0,
  [Default] kGenericError = 1,
  [MinVersion=2] kArcNotAllowed = 2,  // Cannot run on this device/user.
  [MinVersion=2] kArcDisabledByUser = 3,  // Inform the user to enable arc.
  [MinVersion=2] kHadesNotAvailable = 4,  // The Hades system has an error.

  // Temporary issue (loading, downloading, etc).
  [MinVersion=2] kHadesNotReady = 5,
  [MinVersion=3] kOnDeviceSafetyNotConnected = 6,  // Internal failure
  [MinVersion=3] kArcGetInstanceForMethodFailed = 7,  // Internal failure
  [MinVersion=3] kArcSafetyServiceNotAvailable = 8,  // Internal failure
  [MinVersion=3] kCrosSafetyServiceNotAvailable = 9,  // Internal failure
};

// CrosSafetyService runs in Chrome which is the entry point of both creating
// both on device or cloud safety sessions. For on device classification it
// connects to the OnDeviceSafetyInstance implementation in ARCVM via the ARC
// Bridge service, whereas for cloud classification is done using the AIService.
// Next Method ID: 2
[Stable]
interface CrosSafetyService {
  // Creates a session to be used for on-device classification
  CreateOnDeviceSafetySession@0(
      pending_receiver<OnDeviceSafetySession> session)
      => (GetOnDeviceSafetySessionResult status);

  // Creates a session to be used for cloud-based classification
  CreateCloudSafetySession@1(pending_receiver<CloudSafetySession> session)
      => (GetCloudSafetySessionResult status);
};
