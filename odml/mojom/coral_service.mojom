// Copyright 2024 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// See go/coral-odml-dd.
module coral.mojom;

import "odml/mojom/token.mojom";
import "odml/mojom/url.mojom";

// Represents metadata of a Chrome tab entity.
struct Tab {
  // This is the exact title string of a tab shown on UI.
  string title;
  // This will be purely viewed as a string for the Coral service. It will not
  // be parsed as a URL structure or used for navigation.
  url.mojom.Url url;
};

// Represents metadata of an ARC app entity.
struct App {
  // This is the exact title string of an ARC app shown on UI.
  string title;
  // App id, like Chrome extension ids, are just a sequence of random
  // characters that uniquely identifies the app/Chrome extension. The client
  // uses this id to refer to the actual app.
  string id;
};

// Entity types that the coral service supports. For each of the entity type
// coral service has a way of formatting them into embedding prompts.
[Extensible]
union Entity {
  // For backward compatibility. In mojom, when deserializing variants of an
  // extensible union that are introduced in newer versions than the version
  // remote is on, they'll be mapped to the variant marked [Default] with
  // nullified value. In service-side logic, we'd like to treat those variants
  // as unknown and unsupported instead of being disguised as a valid entity
  // type (like Tab). So we introduce this default unknown variant.
  [Default]
  bool unknown;
  Tab tab;
  App app;
};

// Configurable options of the embedding engine.
struct EmbeddingOptions {};

// Configurable options of the clustering engine.
// TODO(b/358531135): Decide the cluster algorithm we want to use and add
// the algorithm options.
struct ClusteringOptions {
  // 0 means min items in cluster is 0, which effectively means there is no
  // limit.
  uint32 min_items_in_cluster;
  // 0 is a special value meaning there is no limitation of max items in a
  // cluster.
  uint32 max_items_in_cluster;
  // Max number of clusters to return from the clustering engine. 0 is a
  // special value meaning there is no limitation of max number of clusters.
  uint32 max_clusters;
};

// Configurable options of the title generation engine.
struct TitleGenerationOptions {
  // Max characters allowed in the generated title. 0 is a special value
  // meaning there is no limitation of maximum number of characters.
  uint32 max_characters;
  // Target language of the generated title using ISO 639-2 language code
  // definition. If not set, EN is assumed.
  string? language_code;
};

[Extensible]
enum CoralError {
  [Default] kUnknownError,
  kLoadModelFailed,
  kInvalidArgs,
  kModelExecutionFailed,
  kClusteringError,
};

struct Group {
  // A random id that uniquely identifies the group.
  mojo_base.mojom.Token id;
  // This could be empty, in that case the title will be updated to the
  // observer with corresponding group ID when the generation is done.
  string title;
  // This is sorted by descending rank of importance.
  array<Entity> entities;
};

struct GroupRequest {
  array<Entity> entities;
  EmbeddingOptions embedding_options;
  ClusteringOptions clustering_options;
  TitleGenerationOptions title_generation_options;
};

struct GroupResponse {
  // This is sorted by descending rank of importance.
  array<Group> groups;
};

union GroupResult {
  // Meaning that the request failed.
  CoralError error;
  // Meaning that the request succeeded.
  GroupResponse response;
};

struct CacheEmbeddingsRequest {
  array<Entity> entities;
  EmbeddingOptions embedding_options;
};

// Does not yet contain any fields.
struct CacheEmbeddingsResponse {};

union CacheEmbeddingsResult {
  // Meaning that the request failed.
  CoralError error;
  // Meaning that the request succeeded.
  CacheEmbeddingsResponse response;
};

// The interface is used to provide updates of the |Group.title| field inside
// the |GroupResponse|. Title generation may take significantly high amount of
// time compared to the grouping process, so this observer is used such that
// |CoralService::Group| can return the groupings without titles first, then
// update the title through this observer when they are ready.
interface TitleObserver {
  // Updates the title of the group with id |group_id| to |title|.
  // Currently this should be called exactly once for each group. If |title|
  // is empty, that means some error is encountered and can't be generated.
  TitleUpdated(mojo_base.mojom.Token group_id, string title);
};

// The ChromeOS odml daemon implements this service interface, utilizing the on
// device models for backend logic. Ash Chrome is the client, implementing
// UI features using this coral service.
interface CoralService {
  // Group the request entities into suitable groups with titles. When the
  // observer is passed, the service could return groups with empty title
  // before the title is generated, then trigger title updates on the observer
  // afterwards.
  Group@0(GroupRequest request, pending_remote<TitleObserver>? observer)
      => (GroupResult result);

  // Generate and cache the embeddings for the request entities.
  CacheEmbeddings@1(CacheEmbeddingsRequest request)
      => (CacheEmbeddingsResult result);
};
