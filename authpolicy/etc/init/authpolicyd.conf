# Copyright 2016 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description     "Authpolicy daemon"
author          "chromium-os-dev@chromium.org"

# The service is started by Chrome via UpstartClient::StartAuthPolicyService().
stop on stopping ui
respawn

pre-start script
  # Create a folder on encstateful where machine_pass and config.dat are stored.
  # All other files are written to /tmp which is created fresh for each
  # authpolicyd invocation. (see -t option).
  # On older installations (domain join before authpolicy wrote the password
  # file), the group x access is required by the authpolicyd-exec user to access
  # the machine keytab file.
  AUTHPOLICY_LIB_DIR=/var/lib/authpolicyd
  mkdir -m 0710 -p "${AUTHPOLICY_LIB_DIR}"
  chown -R authpolicyd:authpolicyd "${AUTHPOLICY_LIB_DIR}"

  # Create a folder in /run where the flags default level is stored. Files in
  # /run are wiped on reboot, so that logging is reset on reboot and not
  # permanently persisted for privacy and security reasons.
  AUTHPOLICY_RUN_DIR=/run/authpolicyd
  mkdir -m 0700 -p "${AUTHPOLICY_RUN_DIR}"
  chown -R authpolicyd:authpolicyd "${AUTHPOLICY_RUN_DIR}"
end script

# Minijail actually forks off the desired process.
expect fork

script
  # Start constructing minijail0 args...
  args=""

  # Use Minijail config file.
  args="${args} --config /usr/share/minijail/authpolicyd.conf"

  # Execute authpolicyd.
  args="${args} /usr/sbin/authpolicyd"

  # -e is not specified because the service needs to connect to an AD server to
  # join a domain, authenticate users and fetch user and device policies.

  exec minijail0 ${args}
end script

# TO TEST:
# - Run without exec
# - Remove -t (so test code can read files form there), and add -b /tmp,/tmp,1

# Wait for daemon to claim its D-Bus name before transitioning to started.
post-start exec minijail0 -u authpolicyd -g authpolicyd /usr/bin/gdbus \
    wait --system --timeout 15 org.chromium.AuthPolicy
