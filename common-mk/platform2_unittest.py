#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2020 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Unit tests for platform2.py"""

from __future__ import print_function

import os
import mock
import sys

sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                '..', '..', '..'))

import platform2  # pylint: disable=wrong-import-position
from chromite.lib import cros_test_lib  # pylint: disable=wrong-import-position

PLATFORM_SUBDIR = 'platform'
SYSROOT = '/'


class Platform2ConfigureTest(cros_test_lib.TestCase):
  """Tests Platform2.configure_test()."""

  def _CreateTestData(self, run_test=True, test_config=None):
    """Generates a template of test data."""

    # It emulates a data that is generated by the templates in
    # //common-mk/BUILDCONFIG.gn for this BUILD.gn rule example
    #
    # group("all") {
    #   deps = ["//platform:test"]
    # }
    #
    # executable("test") {
    #   output_name = "output"
    #
    #   run_test = $run_test
    #   test_config = $test_config
    #
    #   # some required variables
    # }
    if test_config is None:
      test_config = {}
    target_prefix = '//%s:' % PLATFORM_SUBDIR
    return {
        target_prefix + 'all': {
            'deps': [
                target_prefix + 'test',
            ],
        },
        target_prefix + 'test': {
            'metadata': {
                '_run_test': [run_test],
                '_test_config': [test_config],
            },
            'outputs': ['output'],
        },
    }

  def _CheckConfigureTest(self, gn_description, expected):
    """Check configure_test returns |expected| outputs with |gn_description|."""
    p2 = platform2.Platform2()
    p2.platform_subdir = PLATFORM_SUBDIR
    p2.sysroot = SYSROOT
    with mock.patch('platform2.Platform2.gn_desc', return_value=gn_description):
      ret = p2.configure_test()
      self.assertEqual(ret, expected)

  def _OutputTemplate(self, options):
    """Create Output Template.

    Add platform2_test.py and some required options to the beginning.
    """
    platform_tooldir = os.path.dirname(os.path.abspath(__file__))
    p2_test_py = os.path.join(platform_tooldir, 'platform2_test.py')
    prefix = [p2_test_py, '--action=run', '--sysroot=%s' % SYSROOT]
    return prefix + options

  def testMultipleTest(self):
    """Verify it can execute multiple tests."""
    target_prefix = '//%s:' % PLATFORM_SUBDIR
    targets = [target_prefix + 'test%s' % str(i) for i in range(10)]
    desc_data = {
        target_prefix + 'all': {
            'deps': targets,
        },
    }
    for target in targets:
      desc_data[target] = {
          'metadata': {
              '_run_test': [True],
          },
          'outputs': [
              'test-%s' % target,
          ],
      }
    self._CheckConfigureTest(
        desc_data,
        [self._OutputTemplate(['--', 'test-%s' % target])
         for target in targets])

  def testRunTest(self):
    """Verify it executes test only when run_test is true."""
    self._CheckConfigureTest(
        self._CreateTestData(run_test=True),
        [self._OutputTemplate(['--', 'output'])])
    self._CheckConfigureTest(
        self._CreateTestData(run_test=False),
        [])

  def testBooleanConfigs(self):
    """Verify it converts boolean configs to flag options."""
    self._CheckConfigureTest(
        self._CreateTestData(test_config={
            'run_as_root': True,
        }),
        [self._OutputTemplate(['--run_as_root', '--', 'output'])])
    self._CheckConfigureTest(
        self._CreateTestData(test_config={
            'run_as_root': False,
        }),
        [self._OutputTemplate(['--', 'output'])])

  def testStringConfigs(self):
    """Verify it converts string configs to not-flag options."""
    self._CheckConfigureTest(
        self._CreateTestData(test_config={
            'gtest_filter': '-*.RunAsRoot',
        }),
        [self._OutputTemplate(['--gtest_filter=-*.RunAsRoot', '--', 'output'])])


if __name__ == '__main__':
  cros_test_lib.main(module=__name__)
