# Copyright 2017 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description   "Start Chrome OS camera service"
author        "chromium-os-dev@chromium.org"

# Ensure imageloader-init has finished so /run/imageloader is available
start on (started system-services or camera-device-added) and stopped imageloader-init
stop on stopping system-services

# Make the camera jobs killable, because if it has a leak it's better to restart
# it than to OOM-panic.
oom score 0

expect fork
respawn
respawn limit 10 60

env UVC_HWTIMESTAMPS_FILE=/sys/module/uvcvideo/parameters/hwtimestamps
env UVC_CLOCK_FILE=/sys/module/uvcvideo/parameters/clock

# Don't respawn too aggressively so kernel has some room to breathe and
# initialize cameras.
env RESPAWN_DELAY=5

# cros_camera_service provides camera service to both Chrome and ARC++:
# Chrome hosts the CameraHalDispatcher Mojo proxy; cros_camera_service forks a
# child process to host the camera HAL adapter and registers to
# CameraHalDispatcher Mojo proxy.  Camera clients can then ask
# CameraHalDispatcher Mojo proxy to get the handle to connect to the camera HAL
# adapter.

pre-start script
  # If the camera-device-added event is triggered too early, the environment
  # such as the /run/camera directory might not be ready yet. Ignore the camera
  # event in that case and wait "starting system-services" event to start
  # cros-camera again when the environment is ready.
  if [ "${UPSTART_EVENTS}" = "camera-device-added" ] && \
     ! status system-services | grep -q "start/running"; then
    logger -t cros-camera "system-services hasn't started yet, ignore."
    stop
    exit 0
  fi

  # Run the board-specific setup hooks, if any.
  sh /etc/camera/setup-hooks.sh || true
  [ -e "${UVC_HWTIMESTAMPS_FILE}" ] && echo 1 > "${UVC_HWTIMESTAMPS_FILE}" || true
  if [ "$(cros_config /camera clock)" = "boottime" ]; then
    printf "boottime" > "${UVC_CLOCK_FILE}" || true
  fi

  # Exit here so that additional commands cannot be executed.
  exit 0
end script

post-start script
  # Run the board-specific hooks, if any.
  sh /etc/camera/post-start-hooks.sh || true
end script

post-stop script
  goal=$(status cros-camera | awk '{split($2, a, "/"); print a[1]}')
  if [ "${goal}" = "start" ]; then
    # Sleep only if it's respawning, so we don't need to wait when doing `stop
    # cros-camera` in tests or manually.
    sleep "${RESPAWN_DELAY}"
  fi
end script

exec minijail0 --config /usr/share/minijail/cros-camera.conf \
    -- /usr/bin/cros_camera_service
