diff --git a/camera/android/libcamera_metadata/src/camera_metadata.c b/camera/android/libcamera_metadata/src/camera_metadata.c
index f9d524b455..304842113e 100644
--- a/camera/android/libcamera_metadata/src/camera_metadata.c
+++ b/camera/android/libcamera_metadata/src/camera_metadata.c
@@ -16,17 +16,23 @@
 
 #define LOG_TAG "camera_metadata"
 
+/*
+ * Replace ALOGE() with a fprintf to stderr so that we don't need to
+ * re-implement Android's logging system.  The log/log.h header file is no
+ * longer necessary once we removed dependency on ALOGE().
+ */
+#define ALOGE(...) fprintf(stderr, LOG_TAG __VA_ARGS__)
+
 #include <system/camera_metadata.h>
 #include <camera_metadata_hidden.h>
 
 #include <assert.h>
 #include <errno.h>
 #include <inttypes.h>
+#include <stddef.h>  // for offsetof
 #include <stdio.h>
 #include <stdlib.h>
 
-#include <log/log.h>
-
 #define OK              0
 #define ERROR           1
 #define NOT_FOUND       (-ENOENT)
@@ -230,7 +236,7 @@ camera_metadata_t *allocate_copy_camera_metadata_checked(
 
     if (src_size < sizeof(camera_metadata_t)) {
         ALOGE("%s: Source size too small!", __FUNCTION__);
-        android_errorWriteLog(0x534e4554, "67782345");
+        // android_errorWriteLog(0x534e4554, "67782345");
         return NULL;
     }
 
@@ -307,7 +313,7 @@ size_t calculate_camera_metadata_size(size_t entry_count,
     memory_needed += sizeof(camera_metadata_buffer_entry_t[entry_count]);
     // Start buffer list at aligned boundary
     memory_needed = ALIGN_TO(memory_needed, DATA_ALIGNMENT);
-    memory_needed += sizeof(uint8_t[data_count]);
+    memory_needed += data_count; // uint8_t data
     // Make sure camera metadata can be stacked in continuous memory
     memory_needed = ALIGN_TO(memory_needed, METADATA_PACKET_ALIGNMENT);
     return memory_needed;
@@ -363,8 +369,7 @@ camera_metadata_t* copy_camera_metadata(void *dst, size_t dst_size,
 
     memcpy(get_entries(metadata), get_entries(src),
             sizeof(camera_metadata_buffer_entry_t[metadata->entry_count]));
-    memcpy(get_data(metadata), get_data(src),
-            sizeof(uint8_t[metadata->data_count]));
+    memcpy(get_data(metadata), get_data(src), metadata->data_count);
 
     assert(validate_camera_metadata_structure(metadata, NULL) == OK);
     return metadata;
@@ -379,7 +384,7 @@ static int validate_and_calculate_camera_metadata_entry_data_size(size_t *data_s
     // Check for overflow
     if (data_count != 0 &&
             camera_metadata_type_size[type] > (SIZE_MAX - DATA_ALIGNMENT + 1) / data_count) {
-        android_errorWriteLog(SN_EVENT_LOG_ID, "30741779");
+        // android_errorWriteLog(SN_EVENT_LOG_ID, "30741779");
         return ERROR;
     }
 
@@ -483,7 +488,7 @@ int validate_camera_metadata_structure(const camera_metadata_t *metadata,
         ALOGE("%s: Data count (%" PRIu32 ") should be <= data capacity "
               "(%" PRIu32 ")",
               __FUNCTION__, header->data_count, header->data_capacity);
-        android_errorWriteLog(SN_EVENT_LOG_ID, "30591838");
+        // android_errorWriteLog(SN_EVENT_LOG_ID, "30591838");
         return CAMERA_METADATA_VALIDATION_ERROR;
     }
 
@@ -621,8 +626,7 @@ int append_camera_metadata(camera_metadata_t *dst,
 
     memcpy(get_entries(dst) + dst->entry_count, get_entries(src),
             sizeof(camera_metadata_buffer_entry_t[src->entry_count]));
-    memcpy(get_data(dst) + dst->data_count, get_data(src),
-            sizeof(uint8_t[src->data_count]));
+    memcpy(get_data(dst) + dst->data_count, get_data(src), src->data_count);
     if (dst->data_count != 0) {
         camera_metadata_buffer_entry_t *entry = get_entries(dst) + dst->entry_count;
         for (size_t i = 0; i < src->entry_count; i++, entry++) {
