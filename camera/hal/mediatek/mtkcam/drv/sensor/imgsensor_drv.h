/*
 * Copyright (C) 2019 MediaTek Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef CAMERA_HAL_MEDIATEK_MTKCAM_DRV_SENSOR_IMGSENSOR_DRV_H_
#define CAMERA_HAL_MEDIATEK_MTKCAM_DRV_SENSOR_IMGSENSOR_DRV_H_

#include <mtkcam/def/common.h>
#include <mtkcam/drv/IHalSensor.h>

#include "mtkcam/custom/mt8183/kernel/imgsensor/kd_camera_feature.h"
#include "mtkcam/custom/mt8183/kernel/imgsensor/kd_imgsensor.h"
#include "mtkcam/custom/mt8183/kernel/imgsensor/kd_imgsensor_define.h"

/******************************************************************************
 *
 ******************************************************************************/
typedef enum {
  CMD_SENSOR_SET_SENSOR_EXP_TIME = NSCam::SENSOR_CMD_SET_SENSOR_EXP_TIME,
  CMD_SENSOR_SET_SENSOR_EXP_LINE = NSCam::SENSOR_CMD_SET_SENSOR_EXP_LINE,
  CMD_SENSOR_SET_SENSOR_GAIN = NSCam::SENSOR_CMD_SET_SENSOR_GAIN,
  CMD_SENSOR_SET_SENSOR_DUAL_GAIN = NSCam::SENSOR_CMD_SET_SENSOR_DUAL_GAIN,
  CMD_SENSOR_SET_FLICKER_FRAME_RATE = NSCam::SENSOR_CMD_SET_FLICKER_FRAME_RATE,
  CMD_SENSOR_SET_VIDEO_FRAME_RATE = NSCam::SENSOR_CMD_SET_VIDEO_FRAME_RATE,
  CMD_SENSOR_SET_AE_EXPOSURE_GAIN_SYNC =
      NSCam::SENSOR_CMD_SET_AE_EXPOSURE_GAIN_SYNC,
  CMD_SENSOR_SET_CCT_FEATURE_CONTROL =
      NSCam::SENSOR_CMD_SET_CCT_FEATURE_CONTROL,
  CMD_SENSOR_SET_SENSOR_CALIBRATION_DATA =
      NSCam::SENSOR_CMD_SET_SENSOR_CALIBRATION_DATA,
  CMD_SENSOR_SET_MAX_FRAME_RATE_BY_SCENARIO =
      NSCam::SENSOR_CMD_SET_MAX_FRAME_RATE_BY_SCENARIO,
  CMD_SENSOR_SET_TEST_PATTERN_OUTPUT =
      NSCam::SENSOR_CMD_SET_TEST_PATTERN_OUTPUT,
  CMD_SENSOR_SET_N3D_I2C_STREAM_REGDATA =
      NSCam::SENSOR_CMD_SET_N3D_I2C_STREAM_REGDATA,
  CMD_SENSOR_SET_N3D_START_STREAMING =
      NSCam::SENSOR_CMD_SET_N3D_START_STREAMING,
  CMD_SENSOR_SET_N3D_STOP_STREAMING = NSCam::SENSOR_CMD_SET_N3D_STOP_STREAMING,
  CMD_SENSOR_SET_ESHUTTER_GAIN = NSCam::SENSOR_CMD_SET_SENSOR_ESHUTTER_GAIN,
  CMD_SENSOR_SET_OB_LOCK = NSCam::SENSOR_CMD_SET_OB_LOCK,
  CMD_SNESOR_SET_SENSOR_OTP_AWB_CMD = NSCam::SENSOR_CMD_SET_SENSOR_OTP_AWB_CMD,
  CMD_SNESOR_SET_SENSOR_OTP_LSC_CMD = NSCam::SENSOR_CMD_SET_SENSOR_OTP_LSC_CMD,
  CMD_SENSOR_SET_SENSOR_EXP_FRAME_TIME =
      NSCam::SENSOR_CMD_SET_SENSOR_EXP_FRAME_TIME,
  CMD_SENSOR_SET_SENSOR_EXP_LINE_BUF_MODE =
      NSCam::SENSOR_CMD_SET_SENSOR_EXP_LINE_BUF_MODE,
  CMD_SENSOR_SET_SENSOR_EXP_TIME_BUF_MODE =
      NSCam::SENSOR_CMD_SET_SENSOR_EXP_TIME_BUF_MODE,
  CMD_SENSOR_SET_SENSOR_GAIN_BUF_MODE =
      NSCam::SENSOR_CMD_SET_SENSOR_GAIN_BUF_MODE,
  CMD_SENSOR_SET_I2C_BUF_MODE_EN = NSCam::SENSOR_CMD_SET_I2C_BUF_MODE_EN,
  CMD_SENSOR_SET_STREAMING_SUSPEND = NSCam::SENSOR_CMD_SET_STREAMING_SUSPEND,
  CMD_SENSOR_SET_STREAMING_RESUME = NSCam::SENSOR_CMD_SET_STREAMING_RESUME,
  CMD_SENSOR_GET_UNSTABLE_DELAY_FRAME_CNT =
      NSCam::SENSOR_CMD_GET_UNSTABLE_DELAY_FRAME_CNT,
  CMD_SENSOR_GET_PIXEL_CLOCK_FREQ = NSCam::SENSOR_CMD_GET_PIXEL_CLOCK_FREQ,
  CMD_SENSOR_GET_FRAME_SYNC_PIXEL_LINE_NUM =
      NSCam::SENSOR_CMD_GET_FRAME_SYNC_PIXEL_LINE_NUM,
  CMD_SENSOR_GET_SENSOR_FEATURE_INFO =
      NSCam::SENSOR_CMD_GET_SENSOR_FEATURE_INFO,
  CMD_SENSOR_GET_DEFAULT_FRAME_RATE_BY_SCENARIO =
      NSCam::SENSOR_CMD_GET_DEFAULT_FRAME_RATE_BY_SCENARIO,
  CMD_SENSOR_GET_TEST_PATTERN_CHECKSUM_VALUE =
      NSCam::SENSOR_CMD_GET_TEST_PATTERN_CHECKSUM_VALUE,
  CMD_SENSOR_GET_TEMPERATURE_VALUE = NSCam::SENSOR_CMD_GET_TEMPERATURE_VALUE,
  CMD_SENSOR_GET_SENSOR_CROP_WIN_INFO =
      NSCam::SENSOR_CMD_GET_SENSOR_CROP_WIN_INFO,
  CMD_SENSOR_GET_SENSOR_VC_INFO = NSCam::SENSOR_CMD_GET_SENSOR_VC_INFO,
  CMD_SENSOR_GET_SENSOR_PDAF_INFO = NSCam::SENSOR_CMD_GET_SENSOR_PDAF_INFO,
  CMD_SENSOR_GET_SENSOR_N3D_STREAM_TO_VSYNC_TIME =
      NSCam::SENSOR_CMD_GET_SENSOR_N3D_STREAM_TO_VSYNC_TIME,
  CMD_SENSOR_SET_YUV_FEATURE_CMD = NSCam::SENSOR_CMD_SET_YUV_FEATURE_CMD,
  CMD_SENSOR_SET_YUV_SINGLE_FOCUS_MODE =
      NSCam::SENSOR_CMD_SET_YUV_SINGLE_FOCUS_MODE,
  CMD_SENSOR_SET_YUV_CANCEL_AF = NSCam::SENSOR_CMD_SET_YUV_CANCEL_AF,
  CMD_SENSOR_SET_YUV_CONSTANT_AF = NSCam::SENSOR_CMD_SET_YUV_CONSTANT_AF,
  CMD_SENSOR_SET_YUV_INFINITY_AF = NSCam::SENSOR_CMD_SET_YUV_INFINITY_AF,
  CMD_SENSOR_SET_YUV_AF_WINDOW = NSCam::SENSOR_CMD_SET_YUV_AF_WINDOW,
  CMD_SENSOR_SET_YUV_AE_WINDOW = NSCam::SENSOR_CMD_SET_YUV_AE_WINDOW,
  CMD_SENSOR_SET_YUV_GAIN_AND_EXP_LINE =
      NSCam::SENSOR_CMD_SET_YUV_GAIN_AND_EXP_LINE,
  CMD_SENSOR_SET_YUV_3A_CMD = NSCam::SENSOR_CMD_SET_YUV_3A_CMD,
  CMD_SENSOR_GET_YUV_AF_STATUS = NSCam::SENSOR_CMD_GET_YUV_AF_STATUS,
  CMD_SENSOR_GET_YUV_AE_STATUS = NSCam::SENSOR_CMD_GET_YUV_AE_STATUS,
  CMD_SENSOR_GET_YUV_AWB_STATUS = NSCam::SENSOR_CMD_GET_YUV_AWB_STATUS,
  CMD_SENSOR_GET_YUV_EV_INFO_AWB_REF_GAIN =
      NSCam::SENSOR_CMD_GET_YUV_EV_INFO_AWB_REF_GAIN,
  CMD_SENSOR_GET_YUV_CURRENT_SHUTTER_GAIN_AWB_GAIN =
      NSCam::SENSOR_CMD_GET_YUV_CURRENT_SHUTTER_GAIN_AWB_GAIN,
  CMD_SENSOR_GET_YUV_AF_MAX_NUM_FOCUS_AREAS =
      NSCam::SENSOR_CMD_GET_YUV_AF_MAX_NUM_FOCUS_AREAS,
  CMD_SENSOR_GET_YUV_AE_MAX_NUM_METERING_AREAS =
      NSCam::SENSOR_CMD_GET_YUV_AE_MAX_NUM_METERING_AREAS,
  CMD_SENSOR_GET_YUV_EXIF_INFO = NSCam::SENSOR_CMD_GET_YUV_EXIF_INFO,
  CMD_SENSOR_GET_YUV_DELAY_INFO = NSCam::SENSOR_CMD_GET_YUV_DELAY_INFO,
  CMD_SENSOR_GET_YUV_AE_AWB_LOCK_INFO = NSCam::SENSOR_CMD_GET_YUV_AE_AWB_LOCK,
  CMD_SENSOR_GET_YUV_AE_FLASHLIGHT_INFO = NSCam::SENSOR_CMD_GET_YUV_STROBE_INFO,
  CMD_SENSOR_GET_YUV_TRIGGER_FLASHLIGHT_INFO =
      NSCam::SENSOR_CMD_GET_YUV_TRIGGER_FLASHLIGHT_INFO,
  CMD_SENSOR_SET_YUV_AUTOTEST = NSCam::SENSOR_CMD_SET_YUV_AUTOTEST,
  CMD_SENSOR_SET_IHDR_SHUTTER_GAIN =
      NSCam::SENSOR_CMD_SET_SENSOR_HDR_SHUTTER_GAIN,
  CMD_SENSOR_SET_HDR_SHUTTER = NSCam::SENSOR_CMD_SET_SENSOR_HDR_SHUTTER,
  CMD_SENSOR_SET_SENSOR_AWB_GAIN = NSCam::SENSOR_CMD_SET_SENSOR_HDR_AWB_GAIN,
  CMD_SENSOR_GET_PDAF_DATA = NSCam::SENSOR_CMD_GET_PDAF_DATA,
  CMD_SET_PDFOCUS_AREA = NSCam::SENSOR_CMD_SET_PDFOCUS_AREA,
  CMD_SENSOR_SET_SENSOR_ISO = NSCam::SENSOR_CMD_SET_SENSOR_ISO,
  CMD_SENSOR_GET_SENSOR_PDAF_CAPACITY =
      NSCam::SENSOR_CMD_GET_SENSOR_PDAF_CAPACITY,
  CMD_SENSOR_GET_SENSOR_HDR_CAPACITY =
      NSCam::SENSOR_CMD_GET_SENSOR_HDR_CAPACITY,
  CMD_SENSOR_GET_SENSOR_PDAF_REG_SETTING =
      NSCam::SENSOR_CMD_GET_SENSOR_PDAF_REG_SETTING,
  CMD_SENSOR_SET_SENSOR_PDAF_REG_SETTING =
      NSCam::SENSOR_CMD_SET_SENSOR_PDAF_REG_SETTING,
  CMD_SENSOR_GET_4CELL_DATA = NSCam::SENSOR_CMD_GET_4CELL_SENSOR,
  CMD_SENSOR_GET_MIPI_PIXEL_RATE = NSCam::SENSOR_CMD_GET_MIPI_PIXEL_RATE,
  CMD_SENSOR_SET_HDR_ATR = NSCam::SENSOR_CMD_SET_SENSOR_HDR_ATR,
  CMD_SENSOR_SET_HDR_TRI_GAIN = NSCam::SENSOR_CMD_SET_SENSOR_HDR_TRI_GAIN,
  CMD_SENSOR_SET_HDR_TRI_SHUTTER = NSCam::SENSOR_CMD_SET_SENSOR_HDR_TRI_SHUTTER,
  CMD_SENSOR_SET_SENSOR_LSC_TBL = NSCam::SENSOR_CMD_SET_SENSOR_LSC_TBL,
  CMD_SENSOR_GET_SENSOR_SYNC_MODE_CAPACITY =
      NSCam::SENSOR_CMD_GET_SENSOR_SYNC_MODE_CAPACITY,
  CMD_SENSOR_GET_SENSOR_SYNC_MODE = NSCam::SENSOR_CMD_GET_SENSOR_SYNC_MODE,
  CMD_SENSOR_SET_SENSOR_SYNC_MODE = NSCam::SENSOR_CMD_SET_SENSOR_SYNC_MODE,

  CMD_SENSOR_GET_INPUT_BIT_ORDER = 0x5000,
  CMD_SENSOR_GET_PAD_PCLK_INV,
  CMD_SENSOR_GET_SENSOR_ORIENTATION_ANGLE,
  CMD_SENSOR_GET_SENSOR_FACING_DIRECTION,
  CMD_SENSOR_GET_SENSOR_VIEWANGLE,
  CMD_SENSOR_GET_MCLK_CONNECTION,
  CMD_SENSOR_GET_MIPI_SENSOR_PORT,
  CMD_SENSOR_SET_DEBUG_DUMP,
  CMD_SENSOR_OPEN_SECURE_SESSION,
  CMD_SENSOR_CLOSE_SECURE_SESSION,
  CMD_SENSOR_SET_AS_SECURE_DRIVER,
  CMD_SENSOR_MAX = 0xFFFF
} CMD_SENSOR_ENUM;

/******************************************************************************
 *
 ******************************************************************************/
typedef enum {
  IMAGE_SENSOR_TYPE_RAW,
  IMAGE_SENSOR_TYPE_YUV,
  IMAGE_SENSOR_TYPE_YCBCR,
  IMAGE_SENSOR_TYPE_RGB565,
  IMAGE_SENSOR_TYPE_RGB888,
  IMAGE_SENSOR_TYPE_JPEG,
  IMAGE_SENSOR_TYPE_RAW8,
  IMAGE_SENSOR_TYPE_RAW12,
  IMAGE_SENSOR_TYPE_RAW14,
  IMAGE_SENSOR_TYPE_UNKNOWN = 0xFFFF,
} IMAGE_SENSOR_TYPE;

typedef enum {
  SENSOR_NO_ERROR = 0,  ///< The function work successfully
  SENSOR_ALREADY_SEARCH,
  SENSOR_UNKNOWN_ERROR = 0x80000000,  ///< Unknown error
  SENSOR_INVALID_DRIVER = 0x80000001,
  SENSOR_NO_SENSOR = 0x80000002,
  SENSOR_INVALID_SENSOR = 0x80000003,
  SENSOR_INVALID_PARA = 0x80000004,
} SENSOR_ERROR_ENUM;

typedef struct {
  ACDK_SENSOR_INFO_STRUCT info;
  ACDK_SENSOR_RESOLUTION_INFO_STRUCT resolutionInfo;
} SENSORDRV_INFO_STRUCT, *PSENSORDRV_INFO_STRUCT;

#endif  // CAMERA_HAL_MEDIATEK_MTKCAM_DRV_SENSOR_IMGSENSOR_DRV_H_
