// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";

package perfetto.protos;

import "third_party/perfetto/protos/perfetto/metrics/metrics.proto";

// Camera stream metadata associated with the capture request and result
// buffers.
message Stream {
  optional int64 stream_id = 1;
  optional int32 width = 2;
  optional int32 height = 3;
  optional int32 format = 4;
}

message CaptureResultBufferMetrics {
  // The stream this capture result buffer is for.
  optional Stream stream = 1;

  // The latency from when the result buffer is attached to the capture result
  // to when the buffer is removed from the capture result, either due to
  // intermediate buffer processing in post-processing or because the buffer is
  // sent to the camera client.
  optional int64 min_e2e_latency_us = 2;
  optional int64 avg_e2e_latency_us = 3;
  optional int64 max_e2e_latency_us = 4;
}

message CameraStreamMetrics {
  // End-to-end and HAL latency for the configure_streams() call.
  optional int64 e2e_configure_streams_latency_us = 1;
  optional int64 hal_configure_streams_latency_us = 2;

  // End-to-end latency for when a capture request is received to when the
  // process_capture_request() for the capture request call returns from the
  // camera HAL.
  optional int64 min_e2e_request_latency_us = 3;
  optional int64 avg_e2e_request_latency_us = 4;
  optional int64 max_e2e_request_latency_us = 5;

  // HAL latency for the duration of the process_capture_request() call.
  optional int64 min_hal_request_latency_us = 6;
  optional int64 avg_hal_request_latency_us = 7;
  optional int64 max_hal_request_latency_us = 8;

  repeated CaptureResultBufferMetrics result_buffer_metrics = 9;
}

message CameraCoreMetrics {
  // Camera session identifier.
  optional int32 sid = 1;

  // Latency for the open() call.
  optional int64 open_device_latency_us = 2;

  // Latency for the initialize() call.
  optional int64 initialize_latency_us = 3;

  // Configuration latency, the aggregated request latency, and the aggregated
  // per-stream result buffer latency of each set of stream configuration. A
  // camera session can call configure_streams() multiple times to configure
  // different set of streams.
  repeated CameraStreamMetrics stream_metrics = 4;

  // Latency for the close() call.
  optional int64 close_device_latency_us = 5;
}

message CameraCoreMetricsPerSession {
  repeated CameraCoreMetrics sessions = 1;
}

extend TraceMetrics {
  optional CameraCoreMetricsPerSession camera_core_metrics = 500;
}
