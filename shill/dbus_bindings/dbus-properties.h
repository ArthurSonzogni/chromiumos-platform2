
// TODO(petkov): dbusxx-xml2cpp skips the org.freedesktop.DBus.Properties
// interface. This header file was generated by running dbusxx-xml2cpp on
// dbus-properties.xml with a modified interface name and then correcting the
// interface name in this file. Switch to automatically generating this file
// whenever dbusxx-xml2cpp is enhanced to support this.

/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbus_bindings_dbus_properties_h__PROXY_MARSHAL_H
#define __dbusxx__dbus_bindings_dbus_properties_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>
namespace org {
namespace freedesktop {
namespace DBus {

class Properties_proxy
: public ::DBus::InterfaceProxy
{
public:

    Properties_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus.Properties")
    {
        connect_signal(Properties_proxy, MmPropertiesChanged, _MmPropertiesChanged_stub);
        connect_signal(Properties_proxy, PropertiesChanged, _PropertiesChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Variant Get(const std::string& interface_name, const std::string& property_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface_name;
        wi << property_name;
        call.member("Get");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    void Set(const std::string& interface_name, const std::string& property_name, const ::DBus::Variant& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface_name;
        wi << property_name;
        wi << value;
        call.member("Set");
        ::DBus::Message ret = invoke_method(call);
    }

    std::map< std::string, ::DBus::Variant > GetAll(const std::string& interface_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << interface_name;
        call.member("GetAll");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void MmPropertiesChanged(const std::string& interface, const std::map< std::string, ::DBus::Variant >& properties) = 0;
    virtual void PropertiesChanged(const std::string& interface, const std::map< std::string, ::DBus::Variant >& changed_properties, const std::vector< std::string >& invalidated_properties) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _MmPropertiesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string interface; ri >> interface;
        std::map< std::string, ::DBus::Variant > properties; ri >> properties;
        MmPropertiesChanged(interface, properties);
    }
    void _PropertiesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string interface; ri >> interface;
        std::map< std::string, ::DBus::Variant > changed_properties; ri >> changed_properties;
        std::vector< std::string > invalidated_properties; ri >> invalidated_properties;
        PropertiesChanged(interface, changed_properties, invalidated_properties);
    }
};

} } }
#endif //__dbusxx__dbus_bindings_dbus_properties_h__PROXY_MARSHAL_H
