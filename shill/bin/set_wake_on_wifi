#!/bin/sh
# Copyright (c) 2014 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Set the Wake on WiFi features enabled.

FLAGS_HELP="Usage:

  $(basename $0)

or

  $(basename $0) [packet | ssid | packet_and_ssid | none] "

FLIMFLAM=org.chromium.flimflam
IMANAGER=${FLIMFLAM}.Manager
IDEVICE=${FLIMFLAM}.Device
PROPERTY_NAME=WakeOnWiFiFeaturesEnabled
PROPERTY_DESC="Wake on WiFi features enabled"

usage() {
  echo "Invalid invocation: $*"
  echo
  echo "${FLAGS_HELP}"
  exit 1
}

dbus() {
  local obj
  local meth

  obj="$1"
  meth="$2"
  shift 2

  dbus-send --system --print-reply --fixed --dest="${FLIMFLAM}" "${obj}" \
    "${meth}" "$@"
}

get_property() {
  local interface
  local object
  local property

  interface="${1:?internal error}"
  object="${2:?internal error}"
  property="${3:?internal error}"

  dbus "${object}" "${interface}.GetProperties" 2>/dev/null \
    | sed -n "/\/${property}/{s/.* //p}"
}

get_devices() {
  dbus / "${IMANAGER}.GetProperties" 2>/dev/null \
    | sed -n "/\/Devices\//{s/.* //p}"
}

get_first_wifi_device() {
  local device
  local device_type

  for device in $(get_devices); do
    device_type="$(get_property ${IDEVICE} ${device} Type)"
    if [ "${device_type}" = "wifi" ]; then
      echo "${device}"
      break
    fi
  done
}

display_value() {
  local wifi_device
  local value

  wifi_device="$1"
  value=$(get_property "${IDEVICE}" "${wifi_device}" "${PROPERTY_NAME}")

  if [ -n "${value}" ]; then
    echo "Current ${PROPERTY_DESC} : ${value}"
    return
  fi

  echo "This connection manager instance does not support ${PROPERTY_DESC}"
}

main() {
  local wifi_device
  wifi_device="$(get_first_wifi_device)"

  if [ -z "${wifi_device}" ]; then
    echo "No WiFi device"
    exit 1
  fi

  if [ $# -gt 1 ]; then
    usage "No more than one argument may be provided"
  fi

  if [ $# -lt 1 ]; then
    display_value "${wifi_device}"
    exit 0
  fi

  local set_value
  set_value="$1"

  case "${set_value}" in
    packet|ssid|packet_and_ssid|none) ;;
    *) usage "Invalid argument: $1" ;;
  esac

  dbus "${wifi_device}" "${IDEVICE}.SetProperty" string:"${PROPERTY_NAME}" \
    "variant:string:${set_value}"
}

main "$@"
