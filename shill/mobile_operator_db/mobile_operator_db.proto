// Copyright 2018 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;

package shill.mobile_operator_db;

message FilterRange {
  // Numerical range to filter a value.
  required uint64 start = 1;
  required uint64 end = 2;
}

message Filter {
  // A filter can be one of the following types.
  enum Type {
    IMSI = 1;
    ICCID = 2;
    OBSOLETE_SID = 3;
    OPERATOR_NAME = 4;
    MCCMNC = 5;
    GID1 = 6;
  };
  required Type type = 1;
  // A regular expression specifying the values that are *accepted* by this
  // filter. The field to be tested is chosen by the |type|.
  // The regular expression should be specified as a re2 regular expression.
  optional string regex = 2;
  // Rather than a regular expression, the filter can be expressed by one
  // or several numerical ranges.
  // The value will be accepted if start <= value <= end for one of the ranges.
  repeated FilterRange range = 3;
  // Same as regex, but the result is inverted. This is needed because re2
  // doesn't support negative lookahead.
  optional string exclude_regex = 4;
}

message LocalizedName {
  required string name = 1;
  // Language is specified with two letter language codes. See xml:lang.
  // If missing, language is assumed to be "en".
  optional string language = 2;
}

message MobileAPN {
  required string apn = 1;
  repeated LocalizedName localized_name = 3;
  optional string OBSOLETE_gateway = 4;
  optional string username = 5;
  optional string password = 6;
  repeated string OBSOLETE_dns = 7;

  enum Authentication {
    DEFAULT_AUTH = 0;
    PAP = 1;
    CHAP = 2;
  }
  // Shill will default to CHAP when an username or password is used, and no
  // authentication is provided.
  optional Authentication authentication = 8;
  optional bool OBSOLETE_is_attach_apn = 9;

  enum IpType {
    UNKNOWN = 0;
    IPV4 = 1;
    IPV6 = 2;
    IPV4V6 = 3;
  }
  optional IpType ip_type = 10 [default = IPV4];
  // When a filter is present, only select the APN if all filters match.
  repeated Filter apn_filter = 11;

  // The types of data connections that this APN supports.
  // Follow the same naming convention used in Android's carrierapns.
  enum ApnType {
    DEFAULT = 0;  // internet data
    IA = 1;       // Initial Attach
    DUN = 2;      // tethering
  }
  // At least one type has to be set.
  repeated ApnType type = 12;

  // Don't allow any other APNs of the same type in the round robin. This
  // overrides any User and Admin APNs. Its main purpose should be to force
  // a DUN APN and prevent users from changing it. To allow some flexibility,
  // this flag will not block modem APNs. Multiple required APNs for the same
  // type are allowed.
  optional bool is_required_by_carrier_spec = 13 [default = false];
}

enum HttpMethod {
  GET = 1;
  POST = 2;
}

message OnlinePortal {
  // Some OnlinePortals are only valid for a restricted set of MCCMNCs, etc.
  // Use this filter to restrict when the OnlinePortal is valid.
  // The OnlinePortal is assumed to be valid if the filter is not provided.
  optional Filter olp_filter = 1;
  required HttpMethod method = 2;
  required string url = 3;
  optional string post_data = 4;
}

message Data {
  // A unique identifier for this M[V]NO.
  required string uuid = 1;
  optional string country = 3;
  // List of localized names for this provider.
  // If provided, the first is chosen as the default.
  repeated LocalizedName localized_name = 4;
  // Indicates that this provider requires roaming and the customer is not
  // charged additional for roaming. This is particularly useful for some MVNOs.
  optional bool requires_roaming = 5 [default = false];
  repeated OnlinePortal olp = 6;
  optional int32 mtu = 7;
  // Use the 'localized_name' above for the operator name in the UI with a
  // higher priority than the information coming from the SIM card.
  optional bool prioritizes_name = 8 [default = false];
  // 1. currently, only filtering by MCCMNC type is processed
  // 2. Filter against serving operator info to decide if HOME provider has
  //    requested roaming enabled by default, update |requires_roaming|.
  repeated Filter roaming_filter = 9;

  // Flag to enable tethering for a carrier. During the initial release of the
  // tethering feature, the flag will be set to false to block tethering for
  // all carriers, except the ones that are specifically enabled. When the
  // tethering feature is mature, the default will be set to True, so tethering
  // would be enabled on all carriers unless specifically disabled.
  optional bool tethering_allowed = 10 [default = false];

  // If true, the DUN APN will be used for user and tethering data when
  // tethering is enabled. When tethering is enabled, the DEFAULT connection
  // will disconnect, a new connection will be established using the DUN APN,
  // and all data will go through the DUN connection. When tethering is
  // disabled, the user data will go though the DEFAULT APN connection.
  optional bool use_dun_apn_as_default = 11;

  // The url used for the mobile hotspot entitlement check using the ChromeOS
  // open source entitlement check implementation. Only static urls are
  // supported.
  optional string mhs_entitlement_url = 12;

  // Parameters to be included in the entitlement check message body.
  enum EntitlementParam {
    IMSI = 1;
  };
  repeated EntitlementParam mhs_entitlement_param = 13;

  // The HTTP method used in the request. If any
  // |mhs_entitlement_param| parameters are used, the request should be a POST
  // request to be able to send the JSON message.
  optional HttpMethod mhs_entitlement_method = 14 [default = POST];

  // ///////////////////////////////////////////////////////////////////////////
  // GSM specific properties [21 - 40]

  // MCCMNC is the concatenation of MCC and MNC.
  // MCC is a three digit ITU E.212 Mobile Country Code (e.g. '310' or '409')
  // and MNC is a two or three digit GSM Mobile Network Code.
  repeated string mccmnc = 21;
  repeated MobileAPN mobile_apn = 22;

  // ///////////////////////////////////////////////////////////////////////////
  // CDMA specific properties [41-60]. No longer used but kept here so people
  // don't reuse the field IDs.

  // repeated string sid = 41;
  // repeated string nid = 42;
  // optional string activation_code = 43;
}

message MobileVirtualNetworkOperator {
  repeated Filter mvno_filter = 1;
  // When nested under an MNO, the data provided in an MVNO is used to augment
  // the data provided by its MNO. All provided top-level fields in
  // |MobileVirtualNetworkOperator::data| *replace* the corresponding top-level
  // fields in |MobileNetworkOperator::data|. No attempt is made to merge lists
  // etc.
  required Data data = 2;
}

message MobileNetworkOperator {
  required Data data = 1;
  repeated MobileVirtualNetworkOperator mvno = 2;
  // The database inevitably contains some duplicate MobileNetworkOperators that
  // are impossible to distinguish using MCCMNC/name. In such a case, this bool
  // may be set to pick out one of the duplicates as the intended operator.
  // Note that if you're using this property, you should DTRT, and find out why
  // there is an ambiguous entry in the database.
  // TODO(pprabhu): Add a presubmit-hook to ensure that no more than one of the
  // duplicates is earmarked.
  optional bool earmarked = 3;
}

// Top-level message.
// The Database is a single message of type |MobileOperatorDB|.
message MobileOperatorDB {
  repeated MobileNetworkOperator mno = 1;
  repeated MobileVirtualNetworkOperator mvno = 3;
}
