# Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# cromo
#
# starts cromo if a Gobi modem has been detected and after
# systems-services have been started

start on gobi_modem and started system-services

respawn

# enable cromo
# uid and gid hardcoded in sys-apps/baselayout

pre-start script
	mkdir -p /var/run/cromo
	chown cromo:cromo /var/run/cromo

	# XXX: What if /var/lib is a symlink?
	if [ -h /var/lib/cromo ] ; then
		logger -t "$UPSTART_JOB" "unlinking /var/lib/cromo"
		unlink /var/lib/cromo
	fi
	mkdir -p /var/lib/cromo
	chown root:root /var/lib/cromo
	chmod 555 /var/lib/cromo

	config_group=/var/lib/cromo/madison-config-group
	if [ -h $config_group ] ; then
		logger -t "$UPSTART_JOB" "unlinking $config_group"
		unlink $config_group
	fi
	if [ ! -e $config_group ] ; then
		echo madison > $config_group
		chown chronos:cromo $config_group
		chmod 640 $config_group
	fi
end script

exec /usr/sbin/cromo

#
# post-stop cleans up (resets) any gobi devices that are listed in the
# usb-devices file.  On normal shutdown, gobi-cromo-plugin will empty
# the file and nothing will be reset.  On abnormal termination, the
# file will contain a list of devices which require a reset.
#
post-stop script
	logger -t "$UPSTART_JOB" "rebooting modems after abnormal termination"
	for dev in $(cat /var/run/cromo/usb-devices); do
		VALID='^[[:digit:].:-]\+$'
		if ! echo "$dev" | grep -q "$VALID" ; then
			logger -t "$UPSTART_JOB" "not rebooting invalid device $dev"
			continue
		fi
		if [ ! -e /sys/bus/usb/devices/$dev ] ; then
			logger -t "$UPSTART_JOB" "not rebooting missing device $dev"
			continue
		fi
		logger -t "$UPSTART_JOB" "rebooting device $dev"
		( echo 0 > /sys/bus/usb/devices/$dev/authorized && \
		  echo 1 > /sys/bus/usb/devices/$dev/authorized && \
		  logger -t "$UPSTART_JOB" "rebooted device $dev" ) ||
		logger -t "$UPSTART_JOB" "failed to reboot device $dev"
	done
end script
