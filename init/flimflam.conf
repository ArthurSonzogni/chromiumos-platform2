# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description   "Run the flimflam network connection manager"
author        "chromium-os-dev@chromium.org"

# Default log level and scopes for shill.
env SHILL_LOG_LEVEL=1
env SHILL_LOG_SCOPES=

start on (started wpasupplicant and started udev and
          stopped iptables and stopped ip6tables)
respawn

pre-start script
  # cleanup any links to shill's resolv.conf file.
  rm -f /var/run/flimflam/resolv.conf
  if [ -f /home/chronos/.disable_shill ]; then
    # the removal of the (possible) symlink above is sufficient.
    true
  else
    mkdir -p /var/run/shill/
    mkdir -p /var/run/flimflam/
    ln -s /var/run/shill/resolv.conf /var/run/flimflam/resolv.conf

    # Copy flimflam's default profile if shill doesn't have one.
    mkdir -p /var/cache/shill
    if [ ! -f /var/cache/shill/default.profile -a \
      -f /var/cache/flimflam/default.profile ]; then
      cp /var/cache/flimflam/default.profile /var/cache/shill/default.profile
      chmod a+r /var/cache/shill/default.profile
    fi
  fi
end script


# HEADS UP!  'expect fork' is usually a loser when used with
# 'script'.  Unfortunately, flimflam/shill needs 'expect fork', and
# we need a script to figure out command arguments at run time.
#
# To avoid confusing Upstart, the script below can use only shell
# built-in operations until it gets to the 'exec' at the end.  Any
# command that causes the shell to fork/exec a subprocess is a
# no-no.
expect fork
script
  if [ -f /home/chronos/.disable_shill ]; then
    DAEMONBIN="flimflamd"
    ARGS=""
  else
    DAEMONBIN="shill"
    # Hook for mod_for_test_scripts/100setupTestingInterface.
    SHILL_TEST_ARGS=""
    ARGS="--log-level=${SHILL_LOG_LEVEL} --log-scopes=${SHILL_LOG_SCOPES}"
    ARGS="${ARGS} ${SHILL_TEST_ARGS}"
  fi

  # -k filename: Filename to read encrypted configuration keymatter
  ARGS="${ARGS} -k /var/lib/whitelist/owner.key"
  # if upstart respawns us, re-push the per-user profile as done by login.conf
  if [ -f /var/run/state/logged-in ]; then
    ARGS="${ARGS} --push ~chronos/flimflam"
  fi

  # If OOBE has not completed (i.e. EULA not agreed to), do not run
  # portal checks.
  if [ ! -f /home/chronos/.oobe_completed ]; then
    ARGS="${ARGS} --portal-list ''"
  fi

  exec ${DAEMONBIN} ${ARGS}
end script

# after start, udevd can advertise to flimflam the builtin WIFI device exists.
post-start exec udevadm trigger --action=add --sysname-match=wlan0
