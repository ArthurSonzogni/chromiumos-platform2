#!/bin/sh

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

HAS_INITRAMFS=0
if [ -d /dev/.initramfs ]
then
  # The initrd will have mounted /sys, /proc, and /dev for us.
  HAS_INITRAMFS=1
else
  mount -n -t sysfs -onodev,noexec,nosuid sysfs /sys
  mount -n -t proc -onodev,noexec,nosuid proc /proc
  mount -n -t tmpfs -omode=0755 udev /dev
fi

PRE_UPTIME_STAT=$(cat /proc/uptime)
PRE_DISK_STAT=$(cat /sys/block/sda/stat)

# Since we defer udev until later in the boot process, we pre-populate /dev
# with the set of devices needed for X and other early services to run.
cp -a -f /lib/chromiumos/devices/* /dev

# Splash screen! Unless we are in noninteractive mode.
# TODO(sosa@chromium.org) - Use kernel flag
if [ -x /usr/bin/ply-image ]; then
  if [ ! -f /root/.factory_test ] && [ ! -f /root/.factory_installer ]; then
    # Moblin trick: Disable blinking cursor. Without this a splash screen
    # will show a distinct cursor shape even when the cursor is set to none.
    echo 0 > /sys/devices/virtual/graphics/fbcon/cursor_blink

    /usr/bin/ply-image /usr/share/chromeos-assets/images/login_splash.png &
  fi
fi

# If we are running from initramfs, the mountpoints
# will already have been mounted from the initramfs init.  We also can't call
# rootdev, since it isn't meaningful.
if [ "$HAS_INITRAMFS" = "0" ]; then
  mount -n -t tmpfs tmp /tmp
  mount -n -t tmpfs -onosuid,nodev shmfs /dev/shm
  mount -n -t devpts -onoexec,nosuid,gid=5,mode=0620 devpts /dev/pts

  # Mount our stateful partition. It's always partition 1.
  ROOT_DEV=$(rootdev)
  # On verified boot, we get the real root from the dm slaves.
  if [ "$ROOT_DEV" = "/dev/dm-0" ]; then
    ROOT_DEV="/dev/$(basename /sys/block/dm-0/slaves/*)"
  fi
  STATE_DEV=${ROOT_DEV%[0-9]*}1
fi

# For factory install shim, we never want to write to the SDCard.
if [ -f /root/.factory_installer ]; then
  mount -n -t tmpfs tmp /mnt/stateful_partition
else
  mount -n -t ext3 "$STATE_DEV" /mnt/stateful_partition
fi

# Check if we need to perform firmware update.
NEED_FIRMWARE_UPDATE="/mnt/stateful_partition/.need_firmware_update"
FIRMWARE_UPDATE_SCRIPT="/usr/sbin/chromeos-firmwareupdate"
if [ -f "$NEED_FIRMWARE_UPDATE" ]; then
  rm -f "$NEED_FIRMWARE_UPDATE"
  if [ -x "$FIRMWARE_UPDATE_SCRIPT" ]; then
    "$FIRMWARE_UPDATE_SCRIPT"
  fi
fi

# Check if the stateful partition has requested self-destruction
# This is used for the factory install process
RESET_FILE="/mnt/stateful_partition/factory_install_reset"
if [ -f "$RESET_FILE" ]; then
  if [ $(stat -c%u "$RESET_FILE") -eq 0 ]; then
    echo "Erasing stateful partition..."
    exec /sbin/clobber-state
  fi
fi

# Check if we have an update to stateful pending.  This is used for dev_mode.
VAR_NEW="/mnt/stateful_partition/var_new"
DEVELOPER_NEW="/mnt/stateful_partition/dev_image_new"
STATEFUL_UPDATE="/mnt/stateful_partition/.update_available"
if [ -f "$STATEFUL_UPDATE" ] ; then
  sudo rm -rf /mnt/stateful_partition/dev_image
  sudo rm -rf /mnt/stateful_partition/var
  sudo mv "$DEVELOPER_NEW" /mnt/stateful_partition/dev_image
  sudo mv "$VAR_NEW" /mnt/stateful_partition/var
  sudo rm "$STATEFUL_UPDATE"
fi

# Make sure stateful partition has some basic directories
mkdir -p -m 0755 /mnt/stateful_partition/etc
mkdir -p -m 0755 /mnt/stateful_partition/home
mkdir -p -m 0755 /mnt/stateful_partition/var/cache
mkdir -p -m 0755 /mnt/stateful_partition/var/empty
mkdir -p -m 0755 /mnt/stateful_partition/var/lib
mkdir -p -m 0755 /mnt/stateful_partition/var/lib/ureadahead
mkdir -p -m 0755 /mnt/stateful_partition/var/lock
mkdir -p -m 0755 /mnt/stateful_partition/var/log
mkdir -p -m 0755 /mnt/stateful_partition/var/run
chmod 0755 /mnt/stateful_partition/var

mkdir -p -m 1777 /mnt/stateful_partition/var/tmp

# Directory for ChromeOS metrics collection
mkdir -p -m 0755 /mnt/stateful_partition/var/log/metrics
chown chronos:chronos /mnt/stateful_partition/var/log/metrics

# Create a directory for the window manager to write logs to before the
# user has logged in (it won't be able to do it itself, since it runs as
# chronos but /var/log is owned by root).
mkdir -p -m 0755 /mnt/stateful_partition/var/log/window_manager
chown chronos:chronos /mnt/stateful_partition/var/log/window_manager

# Mount some /var directories and /home
mount -n --bind /mnt/stateful_partition/var /var
mount -n --bind /mnt/stateful_partition/home /home

# Mount stateful partition for dev packages
# TODO(sosa@chromium.org) - Use kernel flag
if [ -f /root/.dev_mode ] ; then
  mount -n --bind /mnt/stateful_partition/dev_image /usr/local
fi

mount -n -t tmpfs -omode=0755,nosuid varrun /var/run
touch /var/run/.ramfs  # TODO: Is this needed?
mount -n -t tmpfs -omode=1777,nodev,noexec,nosuid varlock /var/lock
touch /var/lock/.ramfs # TODO: Is this needed?
mount -n -t tmpfs media /media

mount -n -t debugfs debugfs /sys/kernel/debug

if [ -e /mnt/stateful_partition/.consider_oobe ]; then
  # Mount OEM partner partition if OOBE has not yet been completed.
  if [ ! -e /home/chronos/.oobe_completed ]; then
    OEM_DEV=${ROOT_DEV%[0-9]*}8
    mount -n -t ext3 "$OEM_DEV" /mnt/partner_partition
  fi
fi

#
# Note that ureadahead depends on some of the operations above.
# Notably, the command requires /var to be mounted, because the pack
# file is located in /var/lib/ureadahead, and ureadahead tracing
# requires /sys/kernel/debug be mounted.
#
ureadahead &

# Some things freak out if no hostname is set.
hostname localhost

# create salt for user data dir crypto
mkdir -p /home/.shadow
SALT=/home/.shadow/salt
(test -f "$SALT" || head -c 16 /dev/urandom > "$SALT") &

# Write out uptime and disk stats pre/post startup
cat /proc/uptime > /tmp/uptime-post-startup
! cat /sys/block/sda/stat > /tmp/disk-post-startup
echo "$PRE_UPTIME_STAT" > /tmp/uptime-pre-startup
echo "$PRE_DISK_STAT" > /tmp/disk-pre-startup

# Always return success to avoid killing init
exit 0
