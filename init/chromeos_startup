#!/bin/sh

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# The kernel mounts /proc and /sys during initialization, prior
# to starting init.

# Mount /tmp first, so that bootstat can record output right away.
mount -n -t tmpfs tmp /tmp
bootstat pre-startup

# Since we defer udev until later in the boot process, we pre-populate /dev
# with the set of devices needed for X and other early services to run.
mount -n -t tmpfs -omode=0755 udev /dev
cp -a -f /lib/chromiumos/devices/* /dev

# Splash screen! Unless we are in noninteractive mode.
# TODO(sosa@chromium.org) - Use kernel flag
if [ -x /usr/bin/ply-image ]; then
  if [ ! -f /root/.factory_test ] && [ ! -f /root/.factory_installer ]; then
    # Moblin trick: Disable blinking cursor. Without this a splash screen
    # will show a distinct cursor shape even when the cursor is set to none.
    echo 0 > /sys/devices/virtual/graphics/fbcon/cursor_blink

    /usr/bin/ply-image /usr/share/chromeos-assets/images/login_splash.png &
  fi
fi

mount -n -t tmpfs -onosuid,nodev shmfs /dev/shm
mount -n -t devpts -onoexec,nosuid,gid=5,mode=0620 devpts /dev/pts

# Check if we are booted on physical media. rootdev will fail if we are in
# an initramfs or tmpfs rootfs.
ROOT_DEV=$(rootdev)
ROOTDEV_RET_CODE=$?
if [ "$ROOTDEV_RET_CODE" = "0" ]; then
  # Find our stateful partition. It's always partition 1.
  # On verified boot, we get the real root from the dm slaves.
  if [ "$ROOT_DEV" = "/dev/dm-0" ]; then
    ROOT_DEV="/dev/$(basename /sys/block/dm-0/slaves/*)"
  fi
  STATE_DEV=${ROOT_DEV%[0-9]*}1

  # For factory install shim, we never want to write to the SDCard.
  if [ -f /root/.factory_installer ]; then
    mount -n -t tmpfs -omode=0755 tmp /mnt/stateful_partition
    # Fetch our writeable lsb-release from the stateful
    # partition if available.
    TMP_STATEFUL="$(mktemp -d)"
    mkdir -p /mnt/stateful_partition/etc
    mount -n -t ext3 "$STATE_DEV" "$TMP_STATEFUL"
    if [ -f "${TMP_STATEFUL}/etc/lsb-release" ]; then
      cp -a "${TMP_STATEFUL}/etc/lsb-release" \
          /mnt/stateful_partition/etc/lsb-release
    fi
    umount "$TMP_STATEFUL"
    rmdir "$TMP_STATEFUL"
  else
    mount -n -t ext3 "$STATE_DEV" /mnt/stateful_partition
  fi
fi

# Check if we need to perform firmware update.
NEED_FIRMWARE_UPDATE="/mnt/stateful_partition/.need_firmware_update"
FIRMWARE_UPDATE_SCRIPT="/usr/sbin/chromeos-firmwareupdate"
if [ -f "$NEED_FIRMWARE_UPDATE" ]; then
  rm -f "$NEED_FIRMWARE_UPDATE"
  if [ -x "$FIRMWARE_UPDATE_SCRIPT" ]; then
    "$FIRMWARE_UPDATE_SCRIPT"
  fi
fi

# Check if the stateful partition has requested self-destruction
# This is used for the factory install process
RESET_FILE="/mnt/stateful_partition/factory_install_reset"
if [ -f "$RESET_FILE" ]; then
  if [ $(stat -c%u "$RESET_FILE") -eq 0 ]; then
    echo "Erasing stateful partition..."
    # Show a splash image to inform OPs it is wiping the disk.
    if [ -x /usr/bin/ply-image ]; then
      echo 0 > /sys/devices/virtual/graphics/fbcon/cursor_blink
      cp -f /mnt/stateful_partition/wipe_splash.png /tmp/
      /usr/bin/ply-image /tmp/wipe_splash.png &
    fi
    FAST=$(cat $RESET_FILE)
    if [ "$FAST" = "fast" ]; then
      exec /sbin/clobber-state fast
    else
      exec /sbin/clobber-state
    fi
  fi
fi

# Check if we have an update to stateful pending.  This is used for dev_mode.
VAR_NEW="/mnt/stateful_partition/var_new"
DEVELOPER_NEW="/mnt/stateful_partition/dev_image_new"
STATEFUL_UPDATE="/mnt/stateful_partition/.update_available"
if [ -f "$STATEFUL_UPDATE" ] ; then
  sudo rm -rf /mnt/stateful_partition/dev_image
  sudo rm -rf /mnt/stateful_partition/var
  sudo mv "$DEVELOPER_NEW" /mnt/stateful_partition/dev_image
  sudo mv "$VAR_NEW" /mnt/stateful_partition/var
  sudo rm "$STATEFUL_UPDATE"
fi

# Make sure stateful partition has some basic directories
mkdir -p -m 0755 /mnt/stateful_partition/etc
mkdir -p -m 0755 /mnt/stateful_partition/home
mkdir -p -m 0755 /mnt/stateful_partition/var/cache
mkdir -p -m 0755 /mnt/stateful_partition/var/empty
mkdir -p -m 0755 /mnt/stateful_partition/var/lib
mkdir -p -m 0755 /mnt/stateful_partition/var/lib/ureadahead
mkdir -p -m 0755 /mnt/stateful_partition/var/lock
mkdir -p -m 0755 /mnt/stateful_partition/var/log
mkdir -p -m 0755 /mnt/stateful_partition/var/run
chmod 0755 /mnt/stateful_partition/var

mkdir -p -m 1777 /mnt/stateful_partition/var/tmp

# Directory for ChromeOS metrics collection
mkdir -p -m 0755 /mnt/stateful_partition/var/log/metrics
chown chronos:chronos /mnt/stateful_partition/var/log/metrics

# Create a directory for the window manager to write logs to before the
# user has logged in (it won't be able to do it itself, since it runs as
# chronos but /var/log is owned by root).
mkdir -p -m 0755 /mnt/stateful_partition/var/log/window_manager
chown chronos:chronos /mnt/stateful_partition/var/log/window_manager

# Mount some /var directories and /home
mount -n --bind /mnt/stateful_partition/var /var
mount -n --bind /mnt/stateful_partition/home /home

# Mount stateful partition for dev packages
# TODO(sosa@chromium.org) - Use kernel flag
if [ -f /root/.dev_mode ] ; then
  mount -n --bind /mnt/stateful_partition/dev_image /usr/local
fi

mount -n -t tmpfs -omode=0755,nosuid varrun /var/run
touch /var/run/.ramfs  # TODO: Is this needed?
mount -n -t tmpfs -omode=1777,nodev,noexec,nosuid varlock /var/lock
touch /var/lock/.ramfs # TODO: Is this needed?
mount -n -t tmpfs media /media

mount -n -t debugfs debugfs /sys/kernel/debug

# NOTE: ensure that a rootdev has been found.
if [ -e /mnt/stateful_partition/.consider_oobe ] && \
   [ "$ROOTDEV_RET_CODE" = "0" ]; then
  # Mount OEM partner partition if OOBE has not yet been completed.
  # Also create /tmp/machine-info.
  if [ ! -e /home/chronos/.oobe_completed ]; then
    OEM_DEV=${ROOT_DEV%[0-9]*}8
    mount -n -t ext3 "$OEM_DEV" /mnt/partner_partition
    mosys -k smbios info system > /tmp/machine-info
  fi
fi

#
# Note that ureadahead depends on some of the operations above.
# Notably, the command requires /var to be mounted, because the pack
# file is located in /var/lib/ureadahead, and ureadahead tracing
# requires /sys/kernel/debug be mounted.
#
ureadahead &

# Some things freak out if no hostname is set.
hostname localhost

# create salt for user data dir crypto
mkdir -p /home/.shadow
SALT=/home/.shadow/salt
(test -f "$SALT" || head -c 16 /dev/urandom > "$SALT") &

bootstat post-startup

# Always return success to avoid killing init
exit 0
