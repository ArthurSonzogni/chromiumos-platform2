# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description     "Setup compressed swap (zram) experiment (field trial)"
author          "chromium-os-dev@chromium.org"

start on starting swap

script
  # SWAP_ENABLE_FILE indicates that swap is to be used and contains the swap
  # size.  If the file was created by the experiment, rather than manually via
  # crosh, then SWAP_FIELD_TRIAL_FORCED also exists, to restore the original
  # condition when we stop the experiment.  SWAP_FIELD_TRIAL_ENROLLED is
  # created when the experiment has been set up.
  SWAP_ENABLE_FILE=/home/chronos/.swap_enabled
  SWAP_FIELD_TRIAL_ENROLLED=/home/chronos/.swap_exp_enrolled
  SWAP_FIELD_TRIAL_FORCED=/home/chronos/.swap_exp_forced

  # Already enrolled --- nothing to do.
  if [ -f $SWAP_FIELD_TRIAL_ENROLLED ]; then
    exit 0
  fi

  # Don't set the experiment up unless we're running verified Chrome OS.
  # Of course you need to tweak this when debugging.
  dev=$(crossystem devsw_boot)
  if [ -z "$dev" -o "$dev" = 1 ]; then
    exit 0
  fi

  # We deal with only 2GB or 4GB platforms.
  if [ $(awk '/MemTotal/ { print $2; }' < /proc/meminfo) -gt 3000000 ]; then
    is_bigram=true
  else
    is_bigram=false
  fi

  # We have to special-case Snow devices.
  if grep "CHROMEOS_RELEASE_BOARD=daisy" /etc/lsb-release; then
    is_snow=true
  else
    is_snow=false
  fi

  # We leave alone (group=x) folks who are using swap and have picked swap
  # sizes that don't fit in our groups.  For the other folks, we use nine
  # groups:
  #
  # group 0 - 2 GB RAM, no swap
  # group 1 - 2 GB RAM, 2 GB SWAP
  # group 2 - 2 GB RAM, 3 GB SWAP
  #
  # group 3 - 4 GB RAM, no swap
  # group 4 - 4 GB RAM, 4 GB SWAP
  # group 5 - 4 GB RAM, 6 GB SWAP
  #
  # group 6 - Snow (2 GB RAM), no swap
  # group 7 - Snow (2 GB RAM), 1 GB SWAP
  # group 8 - Snow (2 GB RAM), 2 GB SWAP
  #
  # We use a different (smaller) swap size for Snow because we've seen that a 3
  # GB swap causes thrashing, probably due to the non-swappable graphics
  # memory.
  group=x

  if [ -f $SWAP_ENABLE_FILE ]; then
    is_forced=false
    # User is using swap.  Respect that choice, but see if we can still add
    # this device to the experiment.
    if [ -s $SWAP_ENABLE_FILE ]; then
      chosen_size=$(head -1 $SWAP_ENABLE_FILE | cut -c1-4)
      if [ $is_snow = true ]; then
        # Snow devices (2 GB)
        case "$chosen_size" in
          1000) group=7 ;;
          2000) group=8 ;;
        esac
      elif [ $is_bigram = true ]; then
        # 4 GB devices
        case "$chosen_size" in
          4000) group=4 ;;
          6000) group=5 ;;
        esac
      else
        # Non-Snow 2 GB devices
        case "$chosen_size" in
          2000) group=1 ;;
          3000) group=2 ;;
        esac
      fi
    else
      # $SWAP_ENABLE_FILE is empty, indicating user picked the default size
      # (1.5 x RAM).  Note we don't have a group for that much swap on Snow.
      if [ $is_bigram = true ]; then
        group=5
      elif [ $is_snow = false ]; then
        group=2
      fi
    fi
  else
    # The user hasn't set up swap.  Enroll the user in a random group.  First
    # select the swap size (0, small, large) from the last 6 digits of the md5
    # hash of the wifi device hardware address.
    is_forced=true
    if [ $is_snow = true ]; then
      wifidevice=mlan0
    else
      wifidevice=wlan0
    fi
    macaddress=$(ifconfig $wifidevice | head -1 | awk '{print $5}')
    if [ -z "$macaddress" ]; then
      logger "zram experiment could not find adapter, using time"
      macaddress=$(date +%N)
    fi
    group=$(echo $macaddress | md5sum |
            awk '{print ("0x" substr($1, length($1) - 6)) % 3}')

    # Then select the device-specific group (2 GB = 0,1,2; 4 GB = 3,4,5;
    # Snow = 6,7,8).
    if [ $is_bigram = true ]; then
      group=$((group + 3))
    fi
    if [ $is_snow = true ]; then
      group=$((group + 6))
    fi
  fi

  # Select the swap size for the group (x = no group, and 0, 3 and 6 are the
  # control groups).
  if [ $group != x -a $group != 0 -a $group != 3 -a $group != 6 ]; then
    # Record that this was a forced enrollment so that we can turn it off at
    # the end of the field trial.
    if [ $is_forced = true ]; then
      touch $SWAP_FIELD_TRIAL_FORCED
      echo $(case $group in
               # 2 GB devices
               1) echo 2000 ;;
               2) echo 3000 ;;
               # 4 GB devices
               4) echo 4000 ;;
               5) echo 6000 ;;
               # Snow
               7) echo 1000 ;;
               8) echo 2000 ;;
             esac) > $SWAP_ENABLE_FILE
    fi
  fi

  # Record the group number and complete the field trial enrollment.
  echo $group > $SWAP_FIELD_TRIAL_ENROLLED

end script
