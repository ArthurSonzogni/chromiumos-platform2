// Copyright (c) 2011 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "power_manager/power_manager_service.h"

#include "base/logging.h"
#include "power_manager/backlight_controller.h"
#include "power_manager/powerd.h"

namespace power_manager {

namespace gobject {

// Forward declarations required by power_manager_bindings_server.h
void power_manager_decrease_screen_brightness(PowerManager* self,
                                              gboolean allow_off);
void power_manager_increase_screen_brightness(PowerManager* self);
gboolean power_manager_get_idle_time(PowerManager* self, int64_t* ret);

// This header is generated by dbus-binding-tool as part of the build process.
// We force its contents into power_manager::gobject, and then wrap it with
// the PowerManagerService object.
#include "power_manager_bindings_server.h"

struct PowerManager {
  GObject parent_instance;
  PowerManagerService* service;
};

struct PowerManagerClass {
  GObjectClass parent_class;
};

G_DEFINE_TYPE(PowerManager, power_manager, G_TYPE_OBJECT);

GObject* power_manager_constructor(GType gtype,
                                   guint n_properties,
                                   GObjectConstructParam* properties) {
  GObjectClass* parent_class;
  parent_class = G_OBJECT_CLASS(power_manager_parent_class);

  return parent_class->constructor(gtype, n_properties, properties);
}

void power_manager_class_init(PowerManagerClass* klass) {
  GObjectClass* gobject_class = G_OBJECT_CLASS(klass);
  gobject_class->constructor = power_manager_constructor;
}

void power_manager_init(PowerManager* self) {
  self->service = NULL;
}

// Forward calls into the C++ object.

void power_manager_decrease_screen_brightness(PowerManager* self,
                                              gboolean allow_off) {
  if (self->service)
    self->service->DecreaseScreenBrightness(allow_off);
}

void power_manager_increase_screen_brightness(PowerManager* self) {
  if (self->service)
    self->service->IncreaseScreenBrightness();
}

gboolean power_manager_get_idle_time(PowerManager* self, int64_t* ret) {
  if (self->service) {
    *ret = self->service->GetIdleTime();
    return true;
  }
  return false;
}

}  // namespace gobject

//////////////////////////////////////////////////////////////////////////////
// Power manager service

PowerManagerService::PowerManagerService(Daemon* daemon)
    : power_manager_(NULL),
      daemon_(daemon) {
}

PowerManagerService::~PowerManagerService() {
  if (power_manager_)
    g_object_unref(power_manager_);
}

bool PowerManagerService::Initialize() {
  dbus_g_object_type_install_info(
      gobject::power_manager_get_type(),
      &gobject::dbus_glib_power_manager_object_info);
  return Reset();
}

bool PowerManagerService::Register(
    const chromeos::dbus::BusConnection &connection) {
  if (!chromeos::dbus::AbstractDbusService::Register(connection))
    return false;

  // Relying on the existing message filters of powerd and powerman
  // to handle all of their signals. Specifically-targetted messages
  // are delivered to this object.

  // TODO(cwolfe): Daemon includes both D-Bus functionality and logic for
  // routing operations to its various subsystems. This service class provides
  // an opportunity to (gradually) refactor the D-Bus calls out of Daemon,
  // simplifying it in the process. Will file this as a low-priority cleanup.

  return true;
}

bool PowerManagerService::Reset() {
  if (power_manager_)
    g_object_unref(power_manager_);
  power_manager_ =
      reinterpret_cast<gobject::PowerManager*>(
          g_object_new(gobject::power_manager_get_type(), NULL));

  // Allow references to this instance.
  power_manager_->service = this;

  return true;
}

void PowerManagerService::DecreaseScreenBrightness(gboolean allow_off) {
  LOG(INFO) << "Received PowerManagerService::DecreaseScreenBrightness "
            << allow_off;

  // Assume that the change is user-initiated.
  daemon_->DecreaseScreenBrightness(allow_off, true);
}

void PowerManagerService::IncreaseScreenBrightness() {
  LOG(INFO) << "Received PowerManagerService::IncreaseScreenBrightness";

  // Assume that the change is user-initiated.
  daemon_->IncreaseScreenBrightness(true);
}

int64 PowerManagerService::GetIdleTime() {
  LOG(INFO) << "Received PowerManagerService::GetIdleTime";
  int64 idle_time_ms;
  CHECK(daemon_->GetIdleTime(&idle_time_ms));
  return idle_time_ms;
}

}  // namespace power_manager
