On Chrome OS, we want to dim the screen when the user is idle. To do this,
the power manager subscribes for idle notifications from XSync, and adjusts
the backlight based on whether or not the user is idle.

Executable programs:
  * backlight-tool (backlight_tool.cc)
    Simple tool to get and set the brightness level of the display backlight.
  * powerd (powerd.cc)
    Upper power manager. Adjusts device status based on whether the
    user is idle and on video activity indicator from Chrome.
    This daemon is responsible for dimming the backlight or turning off the
    screen based on user idle, and it is responsible for adjusting backlight
    intensity based on user input and ambient light condition. The daemon also
    monitors plug state (on ac or on battery) and battery state-of-charge.
  * powerm (powerman_daemon.cc)
    Lower power manager. Provides infrastructure for invoking suspend to RAM and
    system shutdown. Handles input events for hall effect sensor (lid) and power
    button.
  * xidle-example (examples/xidle_example.cc)
    Prints console notifications when the user is and is not idle.

Main Classes:
  * AmbientLightSensor (ambient_light_sensor.{cc,h})
    Polls the ambient light sensor for current lighting conditions.
  * Backlight (backlight.{cc,h})
    Get and set the brightness level of the display backlight.
  * BacklightController (backlight_controller.{cc,h})
    Adjusts the backlight based on whether the user is idle.
  * VideoDetector (video_detector.{cc,h})
    Polls the root window for video activity timestamp posted by the window
    manager. Allows powerd to defer idle when video has been playing recently.
  * XIdle (xidle.{cc,h})
    Receive notifications from the X Server when the user is marked as
    idle, or as no longer idle

Unit tests:
  * idle_dimmer_unittest.cc:
    Tests the BacklightController class.
  * xidle_unittest.cc:
    Tests the XIdle class with a real X server (or a virtual framebuffer).

Autotests:
  * hardware_Backlight
    Verifies that backlight-tool can adjust brightness.
  * power_Backlight
    Verifies that adjusting the brightness with the backlight-tool changes the
    amount of power used by the machine.

Configs:
  * keyboard_backlight_steps:
    This file is used to specify the brightness steps that the keyboard
    backlight will use in response to the ALS. If you don't want to use the
    ALS to control this backlight, remove the file from the device. The file is
    a series of lines in the format:

    <backlight percentage> <decrease threshold> <increase threshold>

    The thresholds are in raw lux values outputted from the ambient light
    sensor. Values of -1 for a threshold indicate an infinite positive or
    negative value depending on the context. An example:

    20.0 20 35

    This means set to 20% of max, if the lux value is decreasing and above 20 or
    the lux value is increasing and below 35. These thresholds indicate when the
    brightness level should leave this step. When specifying the thresholds you
    should end up with a contiguous block of overlapping intervals, such that
    once you decrease into a level you need to increase above the decrease
    threshold of the previous step to return to it. This is done to eliminate
    situations where the lux level is slightly unstable and the light flickers
    between steps. Non-overlapping intervals will likely have flickering and the
    behaviour of discontinuous intervals is undefined.

    You should have a set of intervals that look something like this, though
    with possibly more or fewer steps, differently sized intervals, etc:

    |
    |
    |
    |
    |
KBL |                      |------------| E
    |                 |----------| D
    |          |----------| C
    |    |----------| B
    |--------| A
  0 |                               |-------------------------- F
    |__________________________________________________________
    0                        ALS Lux Value

    The steps file would be in the following order: A, B, C, D, E, F.
    A would have a -1 for a decrease threshold and F would have a -1 for an
    increase threshold. What ever the backlight percentage is for E should be
    the value that appears in keyboard_backlight_max_percent and the backlight
    percentage for F should appear in keyboard_backlight_min_percent.