#!/bin/sh

# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

. /usr/share/misc/shflags

DEFINE_boolean test $FLAGS_FALSE "support power_Resume test" t
DEFINE_boolean cancel $FLAGS_FALSE "cancel suspend, but send resume signal" c
DEFINE_integer wakeup_count -1 \
    "wakeup event count from start of shutdown. -1 to disable" w

log_msg() {
    logger -t "powerd_suspend[${PPID}]" $@
}

# Check pm_wakeup_events status and return success to cancel the suspend
suspend_pm_wakeup_cancel() {
    if [ "${FLAGS_wakeup_count}" -eq -1 ] ||
       echo "${FLAGS_wakeup_count}" > "/sys/power/wakeup_count"; then
        return 1;
    else
        log_msg "Aborting suspend, wake event received"
        return 0;
    fi
}

# these files are created by powerm | powerd and their existence means
# event has occurred which should cancel suspend
suspend_cancel() {
    if [ $FLAGS_cancel -eq $FLAGS_TRUE ] ||
       [ -e "/var/run/power_manager/lid_opened" ] ||
       [ -e "/var/run/power_manager/chronos/user_active" ] ||
       suspend_pm_wakeup_cancel; then
        cancel=1
        return 0
    else
        cancel=0
        return 1
    fi
}

cleanup_for_resume() {
    rm -f "/var/run/power_manager/lid_opened"
    rm -f "/var/run/power_manager/chronos/user_active"
}

log_msg "Going to suspend-to-RAM state : args=$@"
# Parse command line
FLAGS "$@" || exit 1
eval set -- "$FLAGS_ARGV"

# - logs the time going to suspend (no-op if no RTC).
cp /sys/class/rtc/rtc0/since_epoch /var/log/metrics/suspend-to-ram-time \
  2> /dev/null || true

# - announces the event
/usr/bin/dbus-send --type=signal --system / \
  org.chromium.PowerManager.PowerStateChanged string:mem

# - stores the current power status
power_status_on_suspend=/var/log/metrics/power-status-on-suspend
power-supply-info \
  | /bin/grep -Eq '^[[:space:]]+online:[[:space:]]+no$'
if [ $? -eq 0 ]; then
    echo OnBattery > $power_status_on_suspend
else
    echo OnAC > $power_status_on_suspend
fi

# Disable USB-Persist to save 500ms
# (by not waiting for USB devices to reset and resume)
for i in /sys/bus/usb/devices/*/power/persist; do echo 0 > $i; done

# - deletes hwclock snapshot from previous resumes
rm -f /var/run/power_manager/hwclock-on-resume

# - suspends the cryptohome device
#CRYPTOHOME=/dev/mapper/cryptohome
#/usr/bin/test -b $CRYPTOHOME && /sbin/dmsetup suspend $CRYPTOHOME

log_msg "Explicit sync"
sync

if suspend_cancel; then
    log_msg "Cancel suspend at kernel"
else
    log_msg "Finalizing suspend"
    # - suspends to ram
    echo -n mem > /sys/power/state
fi

if [ $cancel -eq 0 ]; then
    # On resume:
    if [ $FLAGS_test -eq $FLAGS_TRUE ]; then
        # - records the hwclock time at resume. It is read by power_Resume test.
        /sbin/hwclock --utc --debug > /var/run/power_manager/hwclock-on-resume &
        log_msg "Recorded hwclock time for test"
    fi

    # - sends UMA metrics on resume
    /usr/bin/send_metrics_on_resume &
fi

# - announces the event
/usr/bin/dbus-send --type=signal --system / \
    org.chromium.PowerManager.PowerStateChanged string:on &

cleanup_for_resume

#  - re-kicks laptop mode since AC<->Battery transition might've happened
#    while the system was suspended. Sleep a bit, though, to take care of
#    racing with USB stack coming up.
(sleep 10 && /usr/sbin/laptop_mode auto) > /dev/null &

# - resumes cryptohome device
#/usr/bin/test -b $CRYPTOHOME && /sbin/dmsetup resume $CRYPTOHOME

log_msg "Resume finished"
