// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `resourced_bridge.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct RequestedCpuFrequency {
    // message fields
    pub freq_val: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestedCpuFrequency {
    fn default() -> &'a RequestedCpuFrequency {
        <RequestedCpuFrequency as ::protobuf::Message>::default_instance()
    }
}

impl RequestedCpuFrequency {
    pub fn new() -> RequestedCpuFrequency {
        ::std::default::Default::default()
    }

    // int64 freq_val = 1;


    pub fn get_freq_val(&self) -> i64 {
        self.freq_val
    }
    pub fn clear_freq_val(&mut self) {
        self.freq_val = 0;
    }

    // Param is passed by value, moved
    pub fn set_freq_val(&mut self, v: i64) {
        self.freq_val = v;
    }
}

impl ::protobuf::Message for RequestedCpuFrequency {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.freq_val = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.freq_val != 0 {
            my_size += ::protobuf::rt::value_size(1, self.freq_val, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.freq_val != 0 {
            os.write_int64(1, self.freq_val)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestedCpuFrequency {
        RequestedCpuFrequency::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "freq_val",
                |m: &RequestedCpuFrequency| { &m.freq_val },
                |m: &mut RequestedCpuFrequency| { &mut m.freq_val },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestedCpuFrequency>(
                "RequestedCpuFrequency",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestedCpuFrequency {
        static instance: ::protobuf::rt::LazyV2<RequestedCpuFrequency> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestedCpuFrequency::new)
    }
}

impl ::protobuf::Clear for RequestedCpuFrequency {
    fn clear(&mut self) {
        self.freq_val = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestedCpuFrequency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestedCpuFrequency {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestedInterval {
    // message fields
    pub interval_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestedInterval {
    fn default() -> &'a RequestedInterval {
        <RequestedInterval as ::protobuf::Message>::default_instance()
    }
}

impl RequestedInterval {
    pub fn new() -> RequestedInterval {
        ::std::default::Default::default()
    }

    // int64 interval_ms = 1;


    pub fn get_interval_ms(&self) -> i64 {
        self.interval_ms
    }
    pub fn clear_interval_ms(&mut self) {
        self.interval_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_interval_ms(&mut self, v: i64) {
        self.interval_ms = v;
    }
}

impl ::protobuf::Message for RequestedInterval {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.interval_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.interval_ms != 0 {
            my_size += ::protobuf::rt::value_size(1, self.interval_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.interval_ms != 0 {
            os.write_int64(1, self.interval_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestedInterval {
        RequestedInterval::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "interval_ms",
                |m: &RequestedInterval| { &m.interval_ms },
                |m: &mut RequestedInterval| { &mut m.interval_ms },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestedInterval>(
                "RequestedInterval",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestedInterval {
        static instance: ::protobuf::rt::LazyV2<RequestedInterval> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestedInterval::new)
    }
}

impl ::protobuf::Clear for RequestedInterval {
    fn clear(&mut self) {
        self.interval_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestedInterval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestedInterval {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReturnCode {
    // message fields
    pub status: ReturnCode_Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReturnCode {
    fn default() -> &'a ReturnCode {
        <ReturnCode as ::protobuf::Message>::default_instance()
    }
}

impl ReturnCode {
    pub fn new() -> ReturnCode {
        ::std::default::Default::default()
    }

    // .resourced_bridge.ReturnCode.Status status = 1;


    pub fn get_status(&self) -> ReturnCode_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ReturnCode_Status::SUCCESS;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ReturnCode_Status) {
        self.status = v;
    }
}

impl ::protobuf::Message for ReturnCode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ReturnCode_Status::SUCCESS {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ReturnCode_Status::SUCCESS {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReturnCode {
        ReturnCode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ReturnCode_Status>>(
                "status",
                |m: &ReturnCode| { &m.status },
                |m: &mut ReturnCode| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReturnCode>(
                "ReturnCode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReturnCode {
        static instance: ::protobuf::rt::LazyV2<ReturnCode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReturnCode::new)
    }
}

impl ::protobuf::Clear for ReturnCode {
    fn clear(&mut self) {
        self.status = ReturnCode_Status::SUCCESS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReturnCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReturnCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ReturnCode_Status {
    SUCCESS = 0,
    FAIL_OUT_OF_BOUNDS = 1,
    FAIL_UNABLE_TO_SET = 2,
    FAIL_CRITICAL = 3,
}

impl ::protobuf::ProtobufEnum for ReturnCode_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ReturnCode_Status> {
        match value {
            0 => ::std::option::Option::Some(ReturnCode_Status::SUCCESS),
            1 => ::std::option::Option::Some(ReturnCode_Status::FAIL_OUT_OF_BOUNDS),
            2 => ::std::option::Option::Some(ReturnCode_Status::FAIL_UNABLE_TO_SET),
            3 => ::std::option::Option::Some(ReturnCode_Status::FAIL_CRITICAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ReturnCode_Status] = &[
            ReturnCode_Status::SUCCESS,
            ReturnCode_Status::FAIL_OUT_OF_BOUNDS,
            ReturnCode_Status::FAIL_UNABLE_TO_SET,
            ReturnCode_Status::FAIL_CRITICAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ReturnCode_Status>("ReturnCode.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ReturnCode_Status {
}

impl ::std::default::Default for ReturnCode_Status {
    fn default() -> Self {
        ReturnCode_Status::SUCCESS
    }
}

impl ::protobuf::reflect::ProtobufValue for ReturnCode_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CpuRaplPowerData {
    // message fields
    pub power_limit_0: i64,
    pub power_limit_1: i64,
    pub cpu_energy: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CpuRaplPowerData {
    fn default() -> &'a CpuRaplPowerData {
        <CpuRaplPowerData as ::protobuf::Message>::default_instance()
    }
}

impl CpuRaplPowerData {
    pub fn new() -> CpuRaplPowerData {
        ::std::default::Default::default()
    }

    // int64 power_limit_0 = 1;


    pub fn get_power_limit_0(&self) -> i64 {
        self.power_limit_0
    }
    pub fn clear_power_limit_0(&mut self) {
        self.power_limit_0 = 0;
    }

    // Param is passed by value, moved
    pub fn set_power_limit_0(&mut self, v: i64) {
        self.power_limit_0 = v;
    }

    // int64 power_limit_1 = 2;


    pub fn get_power_limit_1(&self) -> i64 {
        self.power_limit_1
    }
    pub fn clear_power_limit_1(&mut self) {
        self.power_limit_1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_power_limit_1(&mut self, v: i64) {
        self.power_limit_1 = v;
    }

    // int64 cpu_energy = 3;


    pub fn get_cpu_energy(&self) -> i64 {
        self.cpu_energy
    }
    pub fn clear_cpu_energy(&mut self) {
        self.cpu_energy = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_energy(&mut self, v: i64) {
        self.cpu_energy = v;
    }
}

impl ::protobuf::Message for CpuRaplPowerData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.power_limit_0 = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.power_limit_1 = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cpu_energy = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.power_limit_0 != 0 {
            my_size += ::protobuf::rt::value_size(1, self.power_limit_0, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.power_limit_1 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.power_limit_1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpu_energy != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cpu_energy, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.power_limit_0 != 0 {
            os.write_int64(1, self.power_limit_0)?;
        }
        if self.power_limit_1 != 0 {
            os.write_int64(2, self.power_limit_1)?;
        }
        if self.cpu_energy != 0 {
            os.write_int64(3, self.cpu_energy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CpuRaplPowerData {
        CpuRaplPowerData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "power_limit_0",
                |m: &CpuRaplPowerData| { &m.power_limit_0 },
                |m: &mut CpuRaplPowerData| { &mut m.power_limit_0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "power_limit_1",
                |m: &CpuRaplPowerData| { &m.power_limit_1 },
                |m: &mut CpuRaplPowerData| { &mut m.power_limit_1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cpu_energy",
                |m: &CpuRaplPowerData| { &m.cpu_energy },
                |m: &mut CpuRaplPowerData| { &mut m.cpu_energy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CpuRaplPowerData>(
                "CpuRaplPowerData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CpuRaplPowerData {
        static instance: ::protobuf::rt::LazyV2<CpuRaplPowerData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CpuRaplPowerData::new)
    }
}

impl ::protobuf::Clear for CpuRaplPowerData {
    fn clear(&mut self) {
        self.power_limit_0 = 0;
        self.power_limit_1 = 0;
        self.cpu_energy = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CpuRaplPowerData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CpuRaplPowerData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BatteryData {
    // message fields
    pub status: BatteryData_BatteryStatus,
    pub power_state: BatteryData_DNotifierPowerState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatteryData {
    fn default() -> &'a BatteryData {
        <BatteryData as ::protobuf::Message>::default_instance()
    }
}

impl BatteryData {
    pub fn new() -> BatteryData {
        ::std::default::Default::default()
    }

    // .resourced_bridge.BatteryData.BatteryStatus status = 1;


    pub fn get_status(&self) -> BatteryData_BatteryStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = BatteryData_BatteryStatus::CHARGING;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: BatteryData_BatteryStatus) {
        self.status = v;
    }

    // .resourced_bridge.BatteryData.DNotifierPowerState power_state = 2;


    pub fn get_power_state(&self) -> BatteryData_DNotifierPowerState {
        self.power_state
    }
    pub fn clear_power_state(&mut self) {
        self.power_state = BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1;
    }

    // Param is passed by value, moved
    pub fn set_power_state(&mut self, v: BatteryData_DNotifierPowerState) {
        self.power_state = v;
    }
}

impl ::protobuf::Message for BatteryData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.power_state, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != BatteryData_BatteryStatus::CHARGING {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if self.power_state != BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1 {
            my_size += ::protobuf::rt::enum_size(2, self.power_state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != BatteryData_BatteryStatus::CHARGING {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if self.power_state != BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1 {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.power_state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatteryData {
        BatteryData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BatteryData_BatteryStatus>>(
                "status",
                |m: &BatteryData| { &m.status },
                |m: &mut BatteryData| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BatteryData_DNotifierPowerState>>(
                "power_state",
                |m: &BatteryData| { &m.power_state },
                |m: &mut BatteryData| { &mut m.power_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BatteryData>(
                "BatteryData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BatteryData {
        static instance: ::protobuf::rt::LazyV2<BatteryData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatteryData::new)
    }
}

impl ::protobuf::Clear for BatteryData {
    fn clear(&mut self) {
        self.status = BatteryData_BatteryStatus::CHARGING;
        self.power_state = BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BatteryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatteryData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BatteryData_BatteryStatus {
    CHARGING = 0,
    DISCHARGING = 1,
}

impl ::protobuf::ProtobufEnum for BatteryData_BatteryStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BatteryData_BatteryStatus> {
        match value {
            0 => ::std::option::Option::Some(BatteryData_BatteryStatus::CHARGING),
            1 => ::std::option::Option::Some(BatteryData_BatteryStatus::DISCHARGING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BatteryData_BatteryStatus] = &[
            BatteryData_BatteryStatus::CHARGING,
            BatteryData_BatteryStatus::DISCHARGING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BatteryData_BatteryStatus>("BatteryData.BatteryStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BatteryData_BatteryStatus {
}

impl ::std::default::Default for BatteryData_BatteryStatus {
    fn default() -> Self {
        BatteryData_BatteryStatus::CHARGING
    }
}

impl ::protobuf::reflect::ProtobufValue for BatteryData_BatteryStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BatteryData_DNotifierPowerState {
    DNOTIFIER_POWER_STATE_D1 = 0,
    DNOTIFIER_POWER_STATE_D2 = 1,
    DNOTIFIER_POWER_STATE_D3 = 2,
    DNOTIFIER_POWER_STATE_D4 = 3,
    DNOTIFIER_POWER_STATE_D5 = 4,
}

impl ::protobuf::ProtobufEnum for BatteryData_DNotifierPowerState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BatteryData_DNotifierPowerState> {
        match value {
            0 => ::std::option::Option::Some(BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1),
            1 => ::std::option::Option::Some(BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D2),
            2 => ::std::option::Option::Some(BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D3),
            3 => ::std::option::Option::Some(BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D4),
            4 => ::std::option::Option::Some(BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D5),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BatteryData_DNotifierPowerState] = &[
            BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1,
            BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D2,
            BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D3,
            BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D4,
            BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D5,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BatteryData_DNotifierPowerState>("BatteryData.DNotifierPowerState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BatteryData_DNotifierPowerState {
}

impl ::std::default::Default for BatteryData_DNotifierPowerState {
    fn default() -> Self {
        BatteryData_DNotifierPowerState::DNOTIFIER_POWER_STATE_D1
    }
}

impl ::protobuf::reflect::ProtobufValue for BatteryData_DNotifierPowerState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InitData {
    // message fields
    pub cpu_default_frequency: ::std::vec::Vec<i64>,
    pub battery_init: ::protobuf::SingularPtrField<BatteryData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InitData {
    fn default() -> &'a InitData {
        <InitData as ::protobuf::Message>::default_instance()
    }
}

impl InitData {
    pub fn new() -> InitData {
        ::std::default::Default::default()
    }

    // repeated int64 cpu_default_frequency = 1;


    pub fn get_cpu_default_frequency(&self) -> &[i64] {
        &self.cpu_default_frequency
    }
    pub fn clear_cpu_default_frequency(&mut self) {
        self.cpu_default_frequency.clear();
    }

    // Param is passed by value, moved
    pub fn set_cpu_default_frequency(&mut self, v: ::std::vec::Vec<i64>) {
        self.cpu_default_frequency = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cpu_default_frequency(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.cpu_default_frequency
    }

    // Take field
    pub fn take_cpu_default_frequency(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.cpu_default_frequency, ::std::vec::Vec::new())
    }

    // .resourced_bridge.BatteryData battery_init = 2;


    pub fn get_battery_init(&self) -> &BatteryData {
        self.battery_init.as_ref().unwrap_or_else(|| <BatteryData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_battery_init(&mut self) {
        self.battery_init.clear();
    }

    pub fn has_battery_init(&self) -> bool {
        self.battery_init.is_some()
    }

    // Param is passed by value, moved
    pub fn set_battery_init(&mut self, v: BatteryData) {
        self.battery_init = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_battery_init(&mut self) -> &mut BatteryData {
        if self.battery_init.is_none() {
            self.battery_init.set_default();
        }
        self.battery_init.as_mut().unwrap()
    }

    // Take field
    pub fn take_battery_init(&mut self) -> BatteryData {
        self.battery_init.take().unwrap_or_else(|| BatteryData::new())
    }
}

impl ::protobuf::Message for InitData {
    fn is_initialized(&self) -> bool {
        for v in &self.battery_init {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.cpu_default_frequency)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.battery_init)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cpu_default_frequency {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.battery_init.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cpu_default_frequency {
            os.write_int64(1, *v)?;
        };
        if let Some(ref v) = self.battery_init.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InitData {
        InitData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cpu_default_frequency",
                |m: &InitData| { &m.cpu_default_frequency },
                |m: &mut InitData| { &mut m.cpu_default_frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BatteryData>>(
                "battery_init",
                |m: &InitData| { &m.battery_init },
                |m: &mut InitData| { &mut m.battery_init },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InitData>(
                "InitData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InitData {
        static instance: ::protobuf::rt::LazyV2<InitData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InitData::new)
    }
}

impl ::protobuf::Clear for InitData {
    fn clear(&mut self) {
        self.cpu_default_frequency.clear();
        self.battery_init.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InitData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EmptyMessage {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmptyMessage {
    fn default() -> &'a EmptyMessage {
        <EmptyMessage as ::protobuf::Message>::default_instance()
    }
}

impl EmptyMessage {
    pub fn new() -> EmptyMessage {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EmptyMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmptyMessage {
        EmptyMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmptyMessage>(
                "EmptyMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmptyMessage {
        static instance: ::protobuf::rt::LazyV2<EmptyMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmptyMessage::new)
    }
}

impl ::protobuf::Clear for EmptyMessage {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmptyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16resourced_bridge.proto\x12\x10resourced_bridge\"2\n\x15RequestedCp\
    uFrequency\x12\x19\n\x08freq_val\x18\x01\x20\x01(\x03R\x07freqVal\"4\n\
    \x11RequestedInterval\x12\x1f\n\x0binterval_ms\x18\x01\x20\x01(\x03R\nin\
    tervalMs\"\xa3\x01\n\nReturnCode\x12;\n\x06status\x18\x01\x20\x01(\x0e2#\
    .resourced_bridge.ReturnCode.StatusR\x06status\"X\n\x06Status\x12\x0b\n\
    \x07SUCCESS\x10\0\x12\x16\n\x12FAIL_OUT_OF_BOUNDS\x10\x01\x12\x16\n\x12F\
    AIL_UNABLE_TO_SET\x10\x02\x12\x11\n\rFAIL_CRITICAL\x10\x03\"y\n\x10CpuRa\
    plPowerData\x12\"\n\rpower_limit_0\x18\x01\x20\x01(\x03R\x0bpowerLimit0\
    \x12\"\n\rpower_limit_1\x18\x02\x20\x01(\x03R\x0bpowerLimit1\x12\x1d\n\n\
    cpu_energy\x18\x03\x20\x01(\x03R\tcpuEnergy\"\x84\x03\n\x0bBatteryData\
    \x12C\n\x06status\x18\x01\x20\x01(\x0e2+.resourced_bridge.BatteryData.Ba\
    tteryStatusR\x06status\x12R\n\x0bpower_state\x18\x02\x20\x01(\x0e21.reso\
    urced_bridge.BatteryData.DNotifierPowerStateR\npowerState\".\n\rBatteryS\
    tatus\x12\x0c\n\x08CHARGING\x10\0\x12\x0f\n\x0bDISCHARGING\x10\x01\"\xab\
    \x01\n\x13DNotifierPowerState\x12\x1c\n\x18DNOTIFIER_POWER_STATE_D1\x10\
    \0\x12\x1c\n\x18DNOTIFIER_POWER_STATE_D2\x10\x01\x12\x1c\n\x18DNOTIFIER_\
    POWER_STATE_D3\x10\x02\x12\x1c\n\x18DNOTIFIER_POWER_STATE_D4\x10\x03\x12\
    \x1c\n\x18DNOTIFIER_POWER_STATE_D5\x10\x04\"\x80\x01\n\x08InitData\x122\
    \n\x15cpu_default_frequency\x18\x01\x20\x03(\x03R\x13cpuDefaultFrequency\
    \x12@\n\x0cbattery_init\x18\x02\x20\x01(\x0b2\x1d.resourced_bridge.Batte\
    ryDataR\x0bbatteryInit\"\x0e\n\x0cEmptyMessage2\x97\x02\n\x15ResourcedCo\
    mmListener\x12T\n\x0fStartCpuUpdates\x12#.resourced_bridge.RequestedInte\
    rval\x1a\x1c.resourced_bridge.ReturnCode\x12N\n\x0eStopCpuUpdates\x12\
    \x1e.resourced_bridge.EmptyMessage\x1a\x1c.resourced_bridge.ReturnCode\
    \x12X\n\x0fSetCpuFrequency\x12'.resourced_bridge.RequestedCpuFrequency\
    \x1a\x1c.resourced_bridge.ReturnCode2\xff\x01\n\rResourcedComm\x12H\n\nV\
    mInitData\x12\x1a.resourced_bridge.InitData\x1a\x1e.resourced_bridge.Emp\
    tyMessage\x12T\n\x0eCpuPowerUpdate\x12\".resourced_bridge.CpuRaplPowerDa\
    ta\x1a\x1e.resourced_bridge.EmptyMessage\x12N\n\rBatteryUpdate\x12\x1d.r\
    esourced_bridge.BatteryData\x1a\x1e.resourced_bridge.EmptyMessageB\x03\
    \xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
