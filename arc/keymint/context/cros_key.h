// Copyright 2023 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef ARC_KEYMINT_CONTEXT_CROS_KEY_H_
#define ARC_KEYMINT_CONTEXT_CROS_KEY_H_

#include <memory>
#include <string>

#include <base/memory/ref_counted.h>
#include <base/memory/weak_ptr.h>
#include <brillo/secure_blob.h>
#include <chaps/pkcs11/cryptoki.h>
#include <hardware/keymaster_defs.h>
#include <keymaster/key.h>
#include <keymaster/key_factory.h>
#include <keymaster/operation.h>

#include "arc/keymint/context/context_adaptor.h"
#include "arc/keymint/key_data.pb.h"

namespace arc::keymint::context {

class CrosOperationFactory;

class CrosKeyFactory : public ::keymaster::KeyFactory {
 public:
  CrosKeyFactory(base::WeakPtr<ContextAdaptor> context_adaptor,
                 keymaster_algorithm_t algorithm);
  // Not copyable nor assignable.
  CrosKeyFactory(const CrosKeyFactory&) = delete;
  CrosKeyFactory& operator=(const CrosKeyFactory&) = delete;

  // Creates a ::keymaster::Key object given an instance of KeyData.
  //
  // If the blob was generated by arc-keymintd for a CrOS key (like chaps
  // keys), this method will load it with the configuration necessary to execute
  // operations on the original key in chaps.
  //
  // Returns error otherwise as the blob was either generated by Android or is
  // invalid.
  keymaster_error_t LoadKey(
      KeyData&& key_data,
      ::keymaster::AuthorizationSet&& hw_enforced,
      ::keymaster::AuthorizationSet&& sw_enforced,
      ::keymaster::UniquePtr<::keymaster::Key>* key) const;

  // Needed to implement pure virtual function in parent class and will return
  // error. Should never be called.
  keymaster_error_t LoadKey(
      ::keymaster::KeymasterKeyBlob&& key_material,
      const ::keymaster::AuthorizationSet& additional_params,
      ::keymaster::AuthorizationSet&& hw_enforced,
      ::keymaster::AuthorizationSet&& sw_enforced,
      ::keymaster::UniquePtr<::keymaster::Key>* key) const override;

  // Retrieve the operation factory for CrOS keys.
  ::keymaster::OperationFactory* GetOperationFactory(
      keymaster_purpose_t purpose) const override;

  // Key generation is not handled by this factory and will return error. Should
  // never be called.
  keymaster_error_t GenerateKey(
      const ::keymaster::AuthorizationSet& key_description,
      ::keymaster::UniquePtr<::keymaster::Key> attestation_signing_key,
      const ::keymaster::KeymasterBlob& issuer_subject,
      ::keymaster::KeymasterKeyBlob* key_blob,
      ::keymaster::AuthorizationSet* hw_enforced,
      ::keymaster::AuthorizationSet* sw_enforced,
      ::keymaster::CertificateChain* cert_chain) const override;

  keymaster_error_t ImportKey(
      const ::keymaster::AuthorizationSet& key_description,
      keymaster_key_format_t input_key_material_format,
      const ::keymaster::KeymasterKeyBlob& input_key_material,
      ::keymaster::UniquePtr<::keymaster::Key> attestation_signing_key,
      const ::keymaster::KeymasterBlob& issuer_subject,
      ::keymaster::KeymasterKeyBlob* output_key_blob,
      ::keymaster::AuthorizationSet* hw_enforced,
      ::keymaster::AuthorizationSet* sw_enforced,
      ::keymaster::CertificateChain* cert_chain) const override;

  // Key import is not handled by this factory and this will return error. This
  // method should never be called.
  const keymaster_key_format_t* SupportedImportFormats(
      size_t* format_count) const override;

  // Key export is not handled by this factory and this will return error. This
  // method should never be called.
  const keymaster_key_format_t* SupportedExportFormats(
      size_t* format_count) const override;

  // Expose the dbus adaptor object to be used by operations.
  const base::WeakPtr<ContextAdaptor>& context_adaptor() const {
    return context_adaptor_;
  }

 private:
  base::WeakPtr<ContextAdaptor> context_adaptor_;

  mutable std::unique_ptr<CrosOperationFactory> sign_factory_;
};

class CrosOperationFactory : public ::keymaster::OperationFactory {
 public:
  CrosOperationFactory(keymaster_algorithm_t algorithm,
                       keymaster_purpose_t purpose);
  ~CrosOperationFactory() override;
  // Not copyable nor assignable.
  CrosOperationFactory(const CrosOperationFactory&) = delete;
  CrosOperationFactory& operator=(const CrosOperationFactory&) = delete;

  // Informs what type of cryptographic operation this factory can handle.
  KeyType registry_key() const override;

  // Returns a |CrosOperation| for the given key.
  ::keymaster::OperationPtr CreateOperation(
      ::keymaster::Key&& key,
      const ::keymaster::AuthorizationSet& begin_params,
      keymaster_error_t* error) override;

 private:
  keymaster_algorithm_t algorithm_;
  keymaster_purpose_t purpose_;
};

}  // namespace arc::keymint::context

#endif  // ARC_KEYMINT_CONTEXT_CROS_KEY_H_
