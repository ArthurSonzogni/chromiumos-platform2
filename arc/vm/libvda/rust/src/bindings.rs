// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//! Auto-generated code from /platform2/arc/vm/libvda/libvda.h.

#![cfg_attr(feature = "cargo-clippy", allow(clippy::all))]
#![allow(
    dead_code,
    non_camel_case_types,
    non_upper_case_globals,
    non_snake_case
)]

/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const vda_impl_type_FAKE: vda_impl_type = 0;
pub const vda_impl_type_GAVDA: vda_impl_type = 1;
pub type vda_impl_type = u32;
pub use self::vda_impl_type as vda_impl_type_t;
pub const vda_result_SUCCESS: vda_result = 0;
pub const vda_result_ILLEGAL_STATE: vda_result = 1;
pub const vda_result_INVALID_ARGUMENT: vda_result = 2;
pub const vda_result_UNREADABLE_INPUT: vda_result = 3;
pub const vda_result_PLATFORM_FAILURE: vda_result = 4;
pub const vda_result_INSUFFICIENT_RESOURCES: vda_result = 5;
pub const vda_result_CANCELLED: vda_result = 6;
pub type vda_result = u32;
pub use self::vda_result as vda_result_t;
pub const vda_profile_VIDEO_CODEC_PROFILE_UNKNOWN: vda_profile = -1;
pub const vda_profile_VIDEO_CODEC_PROFILE_MIN: vda_profile = -1;
pub const vda_profile_H264PROFILE_MIN: vda_profile = 0;
pub const vda_profile_H264PROFILE_BASELINE: vda_profile = 0;
pub const vda_profile_H264PROFILE_MAIN: vda_profile = 1;
pub const vda_profile_H264PROFILE_EXTENDED: vda_profile = 2;
pub const vda_profile_H264PROFILE_HIGH: vda_profile = 3;
pub const vda_profile_H264PROFILE_HIGH10PROFILE: vda_profile = 4;
pub const vda_profile_H264PROFILE_HIGH422PROFILE: vda_profile = 5;
pub const vda_profile_H264PROFILE_HIGH444PREDICTIVEPROFILE: vda_profile = 6;
pub const vda_profile_H264PROFILE_SCALABLEBASELINE: vda_profile = 7;
pub const vda_profile_H264PROFILE_SCALABLEHIGH: vda_profile = 8;
pub const vda_profile_H264PROFILE_STEREOHIGH: vda_profile = 9;
pub const vda_profile_H264PROFILE_MULTIVIEWHIGH: vda_profile = 10;
pub const vda_profile_H264PROFILE_MAX: vda_profile = 10;
pub const vda_profile_VP8PROFILE_MIN: vda_profile = 11;
pub const vda_profile_VP8PROFILE_ANY: vda_profile = 11;
pub const vda_profile_VP8PROFILE_MAX: vda_profile = 11;
pub const vda_profile_VP9PROFILE_MIN: vda_profile = 12;
pub const vda_profile_VP9PROFILE_PROFILE0: vda_profile = 12;
pub const vda_profile_VP9PROFILE_PROFILE1: vda_profile = 13;
pub const vda_profile_VP9PROFILE_PROFILE2: vda_profile = 14;
pub const vda_profile_VP9PROFILE_PROFILE3: vda_profile = 15;
pub const vda_profile_VP9PROFILE_MAX: vda_profile = 15;
pub const vda_profile_HEVCPROFILE_MIN: vda_profile = 16;
pub const vda_profile_HEVCPROFILE_MAIN: vda_profile = 16;
pub const vda_profile_HEVCPROFILE_MAIN10: vda_profile = 17;
pub const vda_profile_HEVCPROFILE_MAIN_STILL_PICTURE: vda_profile = 18;
pub const vda_profile_HEVCPROFILE_MAX: vda_profile = 18;
pub const vda_profile_DOLBYVISION_MIN: vda_profile = 19;
pub const vda_profile_DOLBYVISION_PROFILE0: vda_profile = 19;
pub const vda_profile_DOLBYVISION_PROFILE4: vda_profile = 20;
pub const vda_profile_DOLBYVISION_PROFILE5: vda_profile = 21;
pub const vda_profile_DOLBYVISION_PROFILE7: vda_profile = 22;
pub const vda_profile_DOLBYVISION_MAX: vda_profile = 22;
pub const vda_profile_THEORAPROFILE_MIN: vda_profile = 23;
pub const vda_profile_THEORAPROFILE_ANY: vda_profile = 23;
pub const vda_profile_THEORAPROFILE_MAX: vda_profile = 23;
pub const vda_profile_AV1PROFILE_MIN: vda_profile = 24;
pub const vda_profile_AV1PROFILE_PROFILE_MAIN: vda_profile = 24;
pub const vda_profile_AV1PROFILE_PROFILE_HIGH: vda_profile = 25;
pub const vda_profile_AV1PROFILE_PROFILE_PRO: vda_profile = 26;
pub const vda_profile_AV1PROFILE_MAX: vda_profile = 26;
pub const vda_profile_VIDEO_CODEC_PROFILE_MAX: vda_profile = 26;
pub type vda_profile = i32;
pub use self::vda_profile as vda_profile_t;
pub const vda_pixel_format_YV12: vda_pixel_format = 0;
pub const vda_pixel_format_NV12: vda_pixel_format = 1;
pub const vda_pixel_format_PIXEL_FORMAT_MAX: vda_pixel_format = 1;
pub type vda_pixel_format = u32;
pub use self::vda_pixel_format as vda_pixel_format_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct video_frame_plane {
    pub offset: i32,
    pub stride: i32,
}
#[test]
fn bindgen_test_layout_video_frame_plane() {
    assert_eq!(
        ::std::mem::size_of::<video_frame_plane>(),
        8usize,
        concat!("Size of: ", stringify!(video_frame_plane))
    );
    assert_eq!(
        ::std::mem::align_of::<video_frame_plane>(),
        4usize,
        concat!("Alignment of ", stringify!(video_frame_plane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<video_frame_plane>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(video_frame_plane),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<video_frame_plane>())).stride as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(video_frame_plane),
            "::",
            stringify!(stride)
        )
    );
}
pub type video_frame_plane_t = video_frame_plane;
pub const vda_event_type_UNKNOWN: vda_event_type = 0;
pub const vda_event_type_PROVIDE_PICTURE_BUFFERS: vda_event_type = 1;
pub const vda_event_type_PICTURE_READY: vda_event_type = 2;
pub const vda_event_type_NOTIFY_END_OF_BITSTREAM_BUFFER: vda_event_type = 3;
pub const vda_event_type_NOTIFY_ERROR: vda_event_type = 4;
pub const vda_event_type_RESET_RESPONSE: vda_event_type = 5;
pub const vda_event_type_FLUSH_RESPONSE: vda_event_type = 6;
pub type vda_event_type = u32;
pub use self::vda_event_type as vda_event_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct provide_picture_buffers_event_data {
    pub min_num_buffers: u32,
    pub width: i32,
    pub height: i32,
}
#[test]
fn bindgen_test_layout_provide_picture_buffers_event_data() {
    assert_eq!(
        ::std::mem::size_of::<provide_picture_buffers_event_data>(),
        12usize,
        concat!("Size of: ", stringify!(provide_picture_buffers_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<provide_picture_buffers_event_data>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(provide_picture_buffers_event_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<provide_picture_buffers_event_data>())).min_num_buffers
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(provide_picture_buffers_event_data),
            "::",
            stringify!(min_num_buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<provide_picture_buffers_event_data>())).width as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(provide_picture_buffers_event_data),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<provide_picture_buffers_event_data>())).height as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(provide_picture_buffers_event_data),
            "::",
            stringify!(height)
        )
    );
}
pub type provide_picture_buffers_event_data_t = provide_picture_buffers_event_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct picture_ready_event_data {
    pub picture_buffer_id: i32,
    pub bitstream_id: i32,
    pub crop_left: i32,
    pub crop_top: i32,
    pub crop_right: i32,
    pub crop_bottom: i32,
}
#[test]
fn bindgen_test_layout_picture_ready_event_data() {
    assert_eq!(
        ::std::mem::size_of::<picture_ready_event_data>(),
        24usize,
        concat!("Size of: ", stringify!(picture_ready_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<picture_ready_event_data>(),
        4usize,
        concat!("Alignment of ", stringify!(picture_ready_event_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<picture_ready_event_data>())).picture_buffer_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(picture_ready_event_data),
            "::",
            stringify!(picture_buffer_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<picture_ready_event_data>())).bitstream_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(picture_ready_event_data),
            "::",
            stringify!(bitstream_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<picture_ready_event_data>())).crop_left as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(picture_ready_event_data),
            "::",
            stringify!(crop_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<picture_ready_event_data>())).crop_top as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(picture_ready_event_data),
            "::",
            stringify!(crop_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<picture_ready_event_data>())).crop_right as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(picture_ready_event_data),
            "::",
            stringify!(crop_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<picture_ready_event_data>())).crop_bottom as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(picture_ready_event_data),
            "::",
            stringify!(crop_bottom)
        )
    );
}
pub type picture_ready_event_data_t = picture_ready_event_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vda_event_data {
    pub provide_picture_buffers: provide_picture_buffers_event_data_t,
    pub picture_ready: picture_ready_event_data_t,
    pub bitstream_id: i32,
    pub result: vda_result_t,
    _bindgen_union_align: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_vda_event_data() {
    assert_eq!(
        ::std::mem::size_of::<vda_event_data>(),
        24usize,
        concat!("Size of: ", stringify!(vda_event_data))
    );
    assert_eq!(
        ::std::mem::align_of::<vda_event_data>(),
        4usize,
        concat!("Alignment of ", stringify!(vda_event_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vda_event_data>())).provide_picture_buffers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_event_data),
            "::",
            stringify!(provide_picture_buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_event_data>())).picture_ready as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_event_data),
            "::",
            stringify!(picture_ready)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_event_data>())).bitstream_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_event_data),
            "::",
            stringify!(bitstream_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_event_data>())).result as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_event_data),
            "::",
            stringify!(result)
        )
    );
}
pub type vda_event_data_t = vda_event_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vda_input_format {
    pub profile: vda_profile_t,
    pub min_width: u32,
    pub min_height: u32,
    pub max_width: u32,
    pub max_height: u32,
}
#[test]
fn bindgen_test_layout_vda_input_format() {
    assert_eq!(
        ::std::mem::size_of::<vda_input_format>(),
        20usize,
        concat!("Size of: ", stringify!(vda_input_format))
    );
    assert_eq!(
        ::std::mem::align_of::<vda_input_format>(),
        4usize,
        concat!("Alignment of ", stringify!(vda_input_format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_input_format>())).profile as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_input_format),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_input_format>())).min_width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_input_format),
            "::",
            stringify!(min_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_input_format>())).min_height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_input_format),
            "::",
            stringify!(min_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_input_format>())).max_width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_input_format),
            "::",
            stringify!(max_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_input_format>())).max_height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_input_format),
            "::",
            stringify!(max_height)
        )
    );
}
pub type vda_input_format_t = vda_input_format;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vda_event {
    pub event_type: vda_event_type_t,
    pub event_data: vda_event_data_t,
}
#[test]
fn bindgen_test_layout_vda_event() {
    assert_eq!(
        ::std::mem::size_of::<vda_event>(),
        28usize,
        concat!("Size of: ", stringify!(vda_event))
    );
    assert_eq!(
        ::std::mem::align_of::<vda_event>(),
        4usize,
        concat!("Alignment of ", stringify!(vda_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_event>())).event_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_event),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_event>())).event_data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_event),
            "::",
            stringify!(event_data)
        )
    );
}
pub type vda_event_t = vda_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vda_capabilities {
    pub num_input_formats: usize,
    pub input_formats: *const vda_input_format_t,
    pub num_output_formats: usize,
    pub output_formats: *const vda_pixel_format_t,
}
#[test]
fn bindgen_test_layout_vda_capabilities() {
    assert_eq!(
        ::std::mem::size_of::<vda_capabilities>(),
        32usize,
        concat!("Size of: ", stringify!(vda_capabilities))
    );
    assert_eq!(
        ::std::mem::align_of::<vda_capabilities>(),
        8usize,
        concat!("Alignment of ", stringify!(vda_capabilities))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vda_capabilities>())).num_input_formats as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_capabilities),
            "::",
            stringify!(num_input_formats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_capabilities>())).input_formats as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_capabilities),
            "::",
            stringify!(input_formats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vda_capabilities>())).num_output_formats as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_capabilities),
            "::",
            stringify!(num_output_formats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_capabilities>())).output_formats as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_capabilities),
            "::",
            stringify!(output_formats)
        )
    );
}
pub type vda_capabilities_t = vda_capabilities;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vda_session_info {
    pub ctx: *mut ::std::os::raw::c_void,
    pub event_pipe_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vda_session_info() {
    assert_eq!(
        ::std::mem::size_of::<vda_session_info>(),
        16usize,
        concat!("Size of: ", stringify!(vda_session_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vda_session_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vda_session_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_session_info>())).ctx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_session_info),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vda_session_info>())).event_pipe_fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vda_session_info),
            "::",
            stringify!(event_pipe_fd)
        )
    );
}
pub type vda_session_info_t = vda_session_info;
extern "C" {
    pub fn initialize(impl_type: vda_impl_type_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn deinitialize(impl_: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn get_vda_capabilities(impl_: *mut ::std::os::raw::c_void) -> *const vda_capabilities_t;
}
extern "C" {
    pub fn init_decode_session(
        impl_: *mut ::std::os::raw::c_void,
        profile: vda_profile_t,
    ) -> *mut vda_session_info_t;
}
extern "C" {
    pub fn close_decode_session(
        impl_: *mut ::std::os::raw::c_void,
        session_info: *mut vda_session_info_t,
    );
}
extern "C" {
    pub fn vda_decode(
        ctx: *mut ::std::os::raw::c_void,
        bitstream_id: i32,
        fd: ::std::os::raw::c_int,
        offset: u32,
        bytes_used: u32,
    ) -> vda_result_t;
}
extern "C" {
    pub fn vda_set_output_buffer_count(
        ctx: *mut ::std::os::raw::c_void,
        num_output_buffers: usize,
    ) -> vda_result_t;
}
extern "C" {
    pub fn vda_use_output_buffer(
        ctx: *mut ::std::os::raw::c_void,
        picture_buffer_id: i32,
        format: vda_pixel_format_t,
        fd: ::std::os::raw::c_int,
        num_planes: usize,
        planes: *mut video_frame_plane_t,
    ) -> vda_result_t;
}
extern "C" {
    pub fn vda_flush(ctx: *mut ::std::os::raw::c_void) -> vda_result_t;
}
extern "C" {
    pub fn vda_reset(ctx: *mut ::std::os::raw::c_void) -> vda_result_t;
}
