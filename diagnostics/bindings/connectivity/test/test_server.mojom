// Copyright 2021 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module diagnostics.bindings.connectivity.test.server.mojom;

import "diagnostics/bindings/connectivity/test/test_common.mojom";

struct MySubStruct {
  int32 num;
};

struct MyStruct {
  int32 num;
  string str;
  string? opt_str;
  MySubStruct s;
  MySubStruct? s_opt;
};

union MyUnion {
  int32 num;
  string str;
  string? opt_str;
  MyStruct my_struct;
  MyStruct? my_struct_opt;
};

enum MyEnum {
  A,
  B,
  C,
};

[Extensible]
enum EnumWithDefault {
  [Default] A,
  B,
  C,
};

interface TestSuccess {
  Foo();
  Bar() => ();
  Args(int16 a, string b, string? c);
  Response() => (int16 a, string b, string? c);
  IO(int16 a, string b, string? c) => (int16 a, string b, string? c);
  FunStruct(MyStruct? s) => (MyStruct? s);
  FunUnion(MyUnion? u) => (MyUnion? u);
  FunEnum(MyEnum e) => (MyEnum e);
  FunEnumWithDefault(EnumWithDefault e) => (EnumWithDefault e);
  FunCommon(diagnostics.bindings.connectivity.test.common.mojom.CommonStruct s);
  FunCommonNull(
    diagnostics.bindings.connectivity.test.common.mojom.CommonStruct? s);
};

interface TestMissFunction {
  Foo();
};

interface TestWrongFunctionType1 {
  Foo();
};

interface TestWrongFunctionType2 {
  Foo() => ();
};

interface TestWrongType {
  Foo(string a);
};

interface TestWrongReturnType {
  Foo() => (int32 a);
};

interface TestCannotBeNull {
  Foo(string a);
};

struct WrongStruct {
  string s;
  int32 n;
};

interface TestWrongStruct {
  Foo(WrongStruct s);
};

union WrongUnion {
  int32 num;
};

interface TestWrongUnion {
  Foo(WrongUnion u);
};
