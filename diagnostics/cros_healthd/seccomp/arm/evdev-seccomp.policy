# Copyright 2022 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


mmap2: arg2 in ~PROT_EXEC || arg2 in ~PROT_WRITE
mprotect: arg2 in ~PROT_EXEC || arg2 in ~PROT_WRITE
munmap: 1
rt_sigaction: 1
statx: 1
read: 1
close: 1
openat: 1
fstatfs64: 1
epoll_wait: 1
send: 1
# ioctl values:
#   0x5401 == TCGETS
#   0x8913 == SIOCGIFFLAGS
#   0x8914 == SIOCSIFFLAGS
#   0x80604518 == EVIOCGKEY(96)
#   0x80ff4508 == EVIOCGUNIQ(255)
#   0x80044525 == EVIOCGBIT(EV_SW, 4)
#   0x80044531 == EVIOCGBIT(EV_LED, 4)
#   0x80104535 == EVIOCGBIT(EV_FF, 16)
#   0x80044524 == EVIOCGBIT(EV_MSC, 4)
#   0x80044532 == EVIOCGBIT(EV_SND, 4)
#   0x80084502 == EVIOCGID
#   0x80044501 == EVIOCGVERSION
#   0x80084523 == EVIOCGBIT(EV_ABS, 8)
#   0x80044522 == EVIOCGBIT(EV_REL, 4)
#   0x80044519 == EVIOCGLED(4)
#   0x80044520 == EVIOCGBIT(0, 4)
#   0x8004451b == EVIOCGSW(4)
#   0x80ff4506 == EVIOCGNAME(255)
#   0x80ff4507 == EVIOCGPHYS(255)
#   0x80604521 == EVIOCGBIT(EV_KEY, 96)
#   0x80044509 == EVIOCGPROP(4)
#   0x80084503 == EVIOCGREP
#   0x8404450a == EVIOCGMTSLOTS(1028)
#  The ABS_ codes are from linux/include/uapi/linux/input-event-codes.h. All
#  possible codes should be included. It is used when a perihperal supporting
#  the code is connected.
#   0x80184540 == EVIOCGABS(ABS_X)
#   0x80184541 == EVIOCGABS(ABS_Y)
#   0x80184542 == EVIOCGABS(ABS_Z)
#   0x80184543 == EVIOCGABS(ABS_RX)
#   0x80184544 == EVIOCGABS(ABS_RY)
#   0x80184545 == EVIOCGABS(ABS_RZ)
#   0x80184546 == EVIOCGABS(ABS_THROTTLE)
#   0x80184547 == EVIOCGABS(ABS_RUDDER)
#   0x80184548 == EVIOCGABS(ABS_WHEEL)
#   0x80184549 == EVIOCGABS(ABS_GAS)
#   0x8018454a == EVIOCGABS(ABS_BRAKE)
#   0x80184550 == EVIOCGABS(ABS_HAT0X)
#   0x80184551 == EVIOCGABS(ABS_HAT0Y)
#   0x80184552 == EVIOCGABS(ABS_HAT1X)
#   0x80184553 == EVIOCGABS(ABS_HAT1Y)
#   0x80184554 == EVIOCGABS(ABS_HAT2X)
#   0x80184555 == EVIOCGABS(ABS_HAT2Y)
#   0x80184556 == EVIOCGABS(ABS_HAT3X)
#   0x80184557 == EVIOCGABS(ABS_HAT3Y)
#   0x80184558 == EVIOCGABS(ABS_PRESSURE)
#   0x80184559 == EVIOCGABS(ABS_DISTANCE)
#   0x8018455a == EVIOCGABS(ABS_TILT_X)
#   0x8018455b == EVIOCGABS(ABS_TILT_Y)
#   0x8018455c == EVIOCGABS(ABS_TOOL_WIDTH)
#   0x80184560 == EVIOCGABS(ABS_VOLUME)
#   0x80184561 == EVIOCGABS(ABS_PROFILE)
#   0x80184568 == EVIOCGABS(ABS_MISC)
#   0x8018456f == EVIOCGABS(ABS_MT_SLOT)
#   0x80184570 == EVIOCGABS(ABS_MT_TOUCH_MAJOR)
#   0x80184571 == EVIOCGABS(ABS_MT_TOUCH_MINOR)
#   0x80184572 == EVIOCGABS(ABS_MT_WIDTH_MAJOR)
#   0x80184573 == EVIOCGABS(ABS_MT_WIDTH_MINOR)
#   0x80184574 == EVIOCGABS(ABS_MT_ORIENTATION)
#   0x80184575 == EVIOCGABS(ABS_MT_POSITION_X)
#   0x80184576 == EVIOCGABS(ABS_MT_POSITION_Y)
#   0x80184577 == EVIOCGABS(ABS_MT_TOOL_TYPE)
#   0x80184578 == EVIOCGABS(ABS_MT_BLOB_ID)
#   0x80184579 == EVIOCGABS(ABS_MT_TRACKING_ID)
#   0x8018457a == EVIOCGABS(ABS_MT_PRESSURE)
#   0x8018457b == EVIOCGABS(ABS_MT_DISTANCE)
#   0x8018457c == EVIOCGABS(ABS_MT_TOOL_X)
#   0x8018457d == EVIOCGABS(ABS_MT_TOOL_Y)
ioctl: arg1 == 0x5401 || arg1 == 0x8913 || arg1 == 0x8914 || \
       arg1 == 0x80604518 || arg1 == 0x80ff4508 || arg1 == 0x80044525 || \
       arg1 == 0x80044531 || arg1 == 0x80104535 || arg1 == 0x80044524 || \
       arg1 == 0x80044532 || arg1 == 0x80084502 || arg1 == 0x80044501 || \
       arg1 == 0x80084523 || arg1 == 0x80044522 || arg1 == 0x80044519 || \
       arg1 == 0x80044520 || arg1 == 0x8004451b || arg1 == 0x80ff4506 || \
       arg1 == 0x80ff4507 || arg1 == 0x80604521 || arg1 == 0x80044509 || \
       arg1 == 0x80084503 || arg1 == 0x80184540 || arg1 == 0x80184541 || \
       arg1 == 0x80184558 || arg1 == 0x80184559 || arg1 == 0x8018455c || \
       arg1 == 0x8018456f || arg1 == 0x80184570 || arg1 == 0x80184571 || \
       arg1 == 0x80184575 || arg1 == 0x80184576 || arg1 == 0x80184579 || \
       arg1 == 0x8018457a || arg1 == 0x8404450a || arg1 == 0x8018455b || \
       arg1 == 0x80184577 || arg1 == 0x8018457b || arg1 == 0x8018455a || \
       arg1 == 0x80184574 || arg1 == 0x80184568 || arg1 == 0x8018457c || \
       arg1 == 0x8018457d || arg1 == 0x80184542 || arg1 == 0x80184560 || \
       arg1 == 0x80184561 || arg1 == 0x80184572 || arg1 == 0x80184573 || \
       arg1 == 0x80184578 || arg1 == 0x80184543 || arg1 == 0x80184544 || \
       arg1 == 0x80184545 || arg1 == 0x80184546 || arg1 == 0x80184547 || \
       arg1 == 0x80184548 || arg1 == 0x80184549 || arg1 == 0x8018454a || \
       arg1 == 0x80184550 || arg1 == 0x80184551 || arg1 == 0x80184552 || \
       arg1 == 0x80184553 || arg1 == 0x80184554 || arg1 == 0x80184555 || \
       arg1 == 0x80184556 || arg1 == 0x80184557
recvmsg: 1
rt_sigprocmask: 1
epoll_ctl: 1
fcntl64: 1
getpid: 1
brk: 1
_llseek: 1
geteuid32: 1
getuid32: 1
getegid32: 1
getgid32: 1
write: 1
access: 1
set_robust_list: 1
readlink: 1
pipe2: 1
unshare: 1
signalfd4: 1
capget: 1
clone: 1
sendmsg: 1
ARM_set_tls: 1
set_tid_address: 1
rseq: 1
ugetrlimit: 1
getrandom: arg2 in ~GRND_RANDOM
capset: 1
uname: 1
getdents64: 1
futex: 1
restart_syscall: 1
dup2: 1
connect: 1
setpgid: 1
setsid: 1
rt_sigtimedwait: 1
wait4: 1
statfs64: 1
setgroups32: 1
setresgid32: 1
setresuid32: 1
epoll_create1: 1
gettid: 1
memfd_create: 1
eventfd2: 1
socket: arg0 == AF_UNIX
exit_group: 1
rt_sigreturn: 1
clock_gettime64: 1
umount2: 1
clock_gettime: 1
clock_getres: 1
clock_getres_time64: 1
gettimeofday: 1
