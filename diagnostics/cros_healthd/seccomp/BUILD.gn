# Copyright 2023 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//diagnostics/cros_healthd/seccomp/check_seccomp.gni")

group("seccomp") {
  deps = [
    ":diagnostics_seccomp",
    ":diagnostics_seccomp_delegate",
    ":diagnostics_seccomp_healthd",
  ]
}

BASE_REQUIRED_SYSCALLS = [
  # These time syscalls are usually used in some conditions (e.g. logging).
  "clock_getres",
  "clock_gettime",
  "gettimeofday",
  "exit_group",
]

if (getenv("ARCH") == "arm") {
  BASE_REQUIRED_SYSCALLS += [
    "clock_getres_time64",
    "clock_gettime64",
  ]
}

BASE_DENIED_SYSCALLS = [
  # This often be added because of the syscall that minijail execute the
  # jailed process, which is not needed.
  "execve",
]

install_and_check_seccomp_policy("diagnostics_seccomp") {
  _arch = getenv("ARCH")
  sources = [
    "${_arch}/btmon-seccomp.policy",
    "${_arch}/ectool_i2cread-seccomp.policy",
    "${_arch}/fio-seccomp.policy",
    "${_arch}/hciconfig-seccomp.policy",
    "${_arch}/healthd_rm-seccomp.policy",
    "${_arch}/iw-seccomp.policy",
    "${_arch}/memtester-seccomp.policy",
    "${_arch}/stressapptest-seccomp.policy",
  ]
  install_path = "seccomp_policy"

  required_syscalls = BASE_REQUIRED_SYSCALLS
  denied_syscalls = BASE_DENIED_SYSCALLS
}

install_and_check_seccomp_policy("diagnostics_seccomp_delegate") {
  _arch = getenv("ARCH")
  sources = [
    "${_arch}/drm-seccomp.policy",
    "${_arch}/ec_fan-seccomp.policy",
    "${_arch}/ec_led-seccomp.policy",
    "${_arch}/ec_lid_angle-seccomp.policy",
    "${_arch}/evdev-seccomp.policy",
    "${_arch}/fingerprint-seccomp.policy",
    "${_arch}/floating_point-seccomp.policy",
    "${_arch}/prime_search-seccomp.policy",
    "${_arch}/psr-seccomp.policy",
    "${_arch}/readonly-fetchers-seccomp.policy",
  ]
  install_path = "seccomp_policy"

  required_syscalls = BASE_REQUIRED_SYSCALLS + [
                        # These syscalls are required by all executor delegates.
                        # Filter arg2 to disallow GRND_RANDOM (2).
                        "getrandom: arg2 in ~GRND_RANDOM",

                        # Required for syslog.
                        "connect",
                        "socket: arg0 == AF_UNIX",
                      ]
  if (_arch == "arm64") {
    required_syscalls += [ "process_vm_readv" ]
  }
  denied_syscalls = BASE_DENIED_SYSCALLS
}

# TODO(b/182964589): Merge this back to diagnostics_seccomp once we can remove
# execve seccomp.
install_and_check_seccomp_policy("diagnostics_seccomp_healthd") {
  _arch = getenv("ARCH")
  sources = [ "${_arch}/cros_healthd-seccomp.policy" ]
  install_path = "seccomp_policy"

  required_syscalls = BASE_REQUIRED_SYSCALLS
  denied_syscalls = []
}
