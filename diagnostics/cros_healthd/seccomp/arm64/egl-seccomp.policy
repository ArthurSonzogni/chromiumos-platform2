# Copyright 2024 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# rseq should be first due to frequency and purpose to decrease nptl latency
rseq: 1

# Required seccomp by seccomp checker
clock_getres: 1
clock_gettime: 1
gettimeofday: 1
exit_group: 1
process_vm_readv: 1

brk: 1
# Dangerous syscall needed for graphics fetcher
clone: 1
clone3: 1
close: 1
connect: 1
epoll_create1: 1
epoll_ctl: 1
epoll_pwait: 1
eventfd2: 1
fcntl: 1
futex: 1
getegid: 1
geteuid: 1
getgid: 1
getpid: 1
getrandom: arg2 in ~GRND_RANDOM
gettid: 1
# Used occasionally by libevent discovered in production use (b/166445013)
getuid: 1
# ioctl values:
#   0x40048001 == _IOC(_IOC_WRITE, 0x80, 0x1, 0x4)
#   0x40088007 == _IOC(_IOC_WRITE, 0x80, 0x7, 0x8)
#   0x40088026 == _IOC(_IOC_WRITE, 0x80, 0x25, 0x8)
#   0x40088026 == _IOC(_IOC_WRITE, 0x80, 0x26, 0x8)
#   0x40108003 == _IOC(_IOC_WRITE, 0x80, 0x3, 0x10)
#   0x40108014 == _IOC(_IOC_WRITE, 0x80, 0x14, 0x10)
#   0x40108024 == _IOC(_IOC_WRITE, 0x80, 0x24, 0x10)
#   0x40208018 == _IOC(_IOC_WRITE, 0x80, 0x18, 0x20)
#   0x4018800e == _IOC(_IOC_WRITE, 0x80, 0xe, 0x18)
#   0x40206441 == _IOC(_IOC_WRITE, 0x64, 0x41, 0x20)
#   0x80048011 == _IOC(_IOC_READ, 0x80, 0x11, 0x4)
#   0x80086444 == _IOC(_IOC_READ, 0x64, 0x44, 0x8)
#   0x8008802d == _IOC(_IOC_READ, 0x80, 0x2d, 0x8)
#   0xc0018036 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x36, 0x1)
#   0xc0048000 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0, 0x4)
#   0xc0048033 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x34, 0x4)
#   0xc0048034 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x34, 0x4)
#   0xc0108027 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x27, 0x10)
#   0xc0188030 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x30, 0x18)
#   0xc0188033 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x33, 0x18)
#   0xc0186440 == _IOC(_IOC_READ|_IOC_WRITE, 0x64, 0x40, 0x18)
#   0xc0208005 == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x5, 0x20)
#   0xc0306443 == _IOC(_IOC_READ|_IOC_WRITE, 0x64, 0x43, 0x30)
#   0xc040803b == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x3b, 0x40)
#   0xc070803a == _IOC(_IOC_READ|_IOC_WRITE, 0x80, 0x3a, 0x70)
#   0x40086409 == DRM_IOCTL_GEM_CLOSE
#   0xc00c644a == DRM_IOCTL_MSM_SUBMITQUEUE_NEW
#   0xc00c6448 == DRM_IOCTL_MSM_GEM_MADVISE or DRM_IOCTL_PANFROST_MADVISE
#   0xc0106442 == DRM_IOCTL_AMDGPU_CTX or DRM_IOCTL_ETNAVIV_GEM_NEW or
#                 DRM_IOCTL_LIMA_GEM_INFO or DRM_IOCTL_MSM_GEM_NEW or
#                 DRM_IOCTL_V3D_CREATE_BO or DRM_IOCTL_VC4_WAIT_BO
#   0xc018644c == DRM_IOCTL_VC4_PERFMON_CREATE
#   0xc010640c == DRM_IOCTL_GET_CAP
#   0xc0186443 == DRM_IOCTL_AMDGPU_BO_LIST or DRM_IOCTL_MSM_GEM_INFO
#   0xc0106440 == DRM_IOCTL_ETNAVIV_GET_PARAM or DRM_IOCTL_EXYNOS_GEM_CREATE or
#                 DRM_IOCTL_LIMA_GET_PARAM or DRM_IOCTL_MSM_GET_PARAM or
#                 DRM_IOCTL_OMAP_GET_PARAM or DRM_IOCTL_TEGRA_GEM_CREATE
#   0xc0406400 == DRM_IOCTL_VERSION
#   0x4004644b == DRM_IOCTL_MSM_SUBMITQUEUE_CLOSE
#   0xc04064a0 == DRM_IOCTL_MODE_GETRESOURCES
#   0xc04064aa == DRM_IOCTL_MODE_GETPROPERTY
#   0xc05064a7 == DRM_IOCTL_MODE_GETCONNECTOR
#   0xc01464a6 == DRM_IOCTL_MODE_GETENCODER
#   0xc06864a1 == DRM_IOCTL_MODE_GETCRTC
#   0xc01064ac == DRM_IOCTL_MODE_GETPROPBLOB
#   0xc0206440 == DRM_IOCTL_AMDGPU_GEM_CREATE
#   0x6442     == DRM_IOCTL_I915_FLIP
#   0x40046445 == DRM_IOCTL_I915_IRQ_WAIT or DRM_IOCTL_MSM_GEM_CPU_FINI
#   0x5401     == TCGETS
#   0x8913     == SIOCGIFFLAGS
#   0x8914     == SIOCSIFFLAGS
#   0x8004     == _IOC(_IOC_NONE, 0x80, 0x4, 0)
ioctl: arg1 == BLKGETSIZE64 || arg1 == SIOCSIFFLAGS || arg1 == BLKSSZGET || \
       arg1 == SIOCGIFFLAGS || arg1 == TCGETS || arg1 == 0x40048001 || \
       arg1 == 0x40108003 || arg1 == 0x40108014 || arg1 == 0x40208018 || \
       arg1 == 0x80048011 || arg1 == 0xc0048000 || arg1 == 0xc0208005 || \
       arg1 == 0x40086409 || arg1 == 0xc00c644a || arg1 == 0xc00c6448 || \
       arg1 == 0xc0106442 || arg1 == 0xc018644c || arg1 == 0xc010640c || \
       arg1 == 0xc0186443 || arg1 == 0xc0106440 || arg1 == 0xc0406400 || \
       arg1 == 0x4004644b || arg1 == 0xc04064a0 || arg1 == 0xc04064aa || \
       arg1 == 0xc05064a7 || arg1 == 0xc01464a6 || arg1 == 0xc06864a1 || \
       arg1 == 0xc0186440 || arg1 == 0xc01064ac || arg1 == 0x40088026 || \
       arg1 == 0xc0018036 || arg1 == 0x4018800e || arg1 == 0xc0206440 || \
       arg1 == 0x80086444 || arg1 == 0x6442 || arg1 == 0x40046445 || \
       arg1 == 0x40206441 || arg1 == 0xc0306443 || arg1 == 0x5401 || \
       arg1 == 0x8913 || arg1 == 0x40088007 || arg1 == 0x8004 || \
       arg1 == 0x8914 || arg1 == 0xc0048033 || arg1 == 0xc0048034 || \
       arg1 == 0xc0188033 || arg1 == 0x40088025 || arg1 == 0x40108024 || \
       arg1 == 0x8008802d || arg1 == 0xc0108027 || arg1 == 0xc0188030 || \
       arg1 == 0xc040803b || arg1 == 0xc070803a

# Dangerous syscall needed for graphics fetcher
memfd_create: 1
mmap: arg2 in ~PROT_EXEC || arg2 in ~PROT_WRITE
mseal: 1
mprotect: arg2 in ~PROT_EXEC || arg2 in ~PROT_WRITE
# Used occasionally by glibc discovered in production use (b/167617776)
newfstatat: 1
openat: 1
pipe2: 1
read: 1
recvmsg: 1
rt_sigaction: 1
rt_sigprocmask: 1
sendmsg: 1
sendto: 1
set_robust_list: 1
signalfd4: 1
# socket is a required syscall for logging.
socket: arg0 == AF_UNIX
socketpair: arg0 == AF_UNIX
uname: 1
write: 1
exit: 1
kcmp: 1
lseek: 1
madvise: 1
sched_setaffinity: 1
setpriority: 1
sched_setscheduler: 1
sched_getaffinity: 1
sysinfo: 1
fstat: 1
fstatfs: 1
shutdown: 1
readlinkat: 1
getdents64: 1
faccessat: 1
ppoll: 1
munmap: 1
# Graphics fetcher will crash without prctl.
# TODO(b/333978583): Document why prctl is required.
prctl: arg0 == PR_SET_NO_NEW_PRIVS || arg0 == PR_SET_NAME
dup: 1
