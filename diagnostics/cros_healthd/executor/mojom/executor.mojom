// Copyright 2020 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// API exposed by cros_healthd's root-level executor. This is used by the
// sandboxed cros_healthd daemon when it needs to perform a high-privilege
// operation.

module ash.cros_healthd.mojom;

import "diagnostics/mojom/public/nullable_primitives.mojom";

// Provides the result of running a process.
struct ExecutedProcessResult {
  // Return code received from the process (0=success). If this is non-zero then
  // stdout and/or stderr may be empty.
  int32 return_code;
  // Contents of stdout from running the process.
  string out;
  // Contents of stderr from running the process. If this is non-empty it may
  // indicate there is a problem, even if |return_code| is 0.
  string err;
};

// Fingerprint frame result.
struct FingerprintFrameResult {
  // Frame data. The length is |width| * |height|.
  array<uint8> frame;
  // Frame width.
  int32 width;
  // Frame height.
  int32 height;
};

// An enumeration of fingerprint capture type.
//
// NextMinVersion: 1, NextIndex: 3
enum FingerprintCaptureType {
  // Checkerboard test.
  kCheckerboardTest = 0,
  // Inverted checkerboard test.
  kInvertedCheckerboardTest = 1,
  // Pixel reset value test.
  kResetTest = 2,
};

// Root-level executor interface exposed to the cros_healthd daemon. In
// production, this is implemented by the Executor daemon.
interface Executor {
  // Obtains fan speed by running ectool and returns the result.
  //
  // The response:
  // * |result| - contains information received from running the tool.
  GetFanSpeed() => (ExecutedProcessResult result);

  // Obtains wireless interface by running "iw dev" and returns the result.
  //
  // The response:
  // * |result| - contains information received from running the tool.
  GetInterfaces() => (ExecutedProcessResult result);

  // Obtains wireless link by running "iw <interface> link" and returns
  // the result.
  //
  // The response:
  // * |result| - contains information received from running the tool.
  GetLink(string interface_name) => (ExecutedProcessResult result);

  // Obtains wireless link info by running "iw <interface> info" and returns
  // the result.
  //
  // The response:
  // * |result| - contains information received from running the tool.
  GetInfo(string interface_name) => (ExecutedProcessResult result);

  // Obtains wireless scan dump by running "iw <interface> scan dump" and
  // returns the result.
  //
  // The response:
  // * |result| - contains information received from running the tool.
  GetScanDump(string interface_name) => (ExecutedProcessResult result);

  // Runs memtester and returns the result. The executor can only run one
  // instance of the memtester process at a time, which is reasonable since
  // memtester mlocks the vast majority of the device's memory, and a second
  // memtester process would have no memory to test.
  //
  // The request:
  // * |test_mem_kib| - The amount of memory used for memory test, should be
  //                    greater than zero.
  // The response:
  // * |result| - contains information received from running memtester.
  RunMemtester(uint32 test_mem_kib) => (ExecutedProcessResult result);

  // Kills an existing memtester process, which must have been started by the
  // executor.
  KillMemtester();

  // Reads the I/O file of each process in the array and returns a map of the
  // raw, trimmed contents with no parsing.
  //
  // The response:
  // * |contents| - a map that contains contents of each I/O file with pids as
  //                keys.
  GetProcessIOContents(array<uint32> pids) => (map<uint32, string> contents);

  // Reads MSR register from /dev/cpu/|cpu_index|/msr file.
  //
  // The response:
  // * |contents| - contains the value of 64-bit MSR register value.
  ReadMsr(uint32 msr_reg, uint32 cpu_index) => (NullableUint64? value);

  // Get UEFI Secure Boot variable file content
  GetUEFISecureBootContent() => (string contents);

  // Get UEFI platform size variable file content
  GetUEFIPlatformSizeContent() => (string contents);

  // Obtains lid angle by running ectool and returns the result.
  //
  // The response:
  // * |result| - contains the angle between lid and base received from running
  //              the tool.
  GetLidAngle() => (ExecutedProcessResult result);
};
