// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.cros_healthd.mojom;

import "diagnostics/cros_healthd/mojom/executor.mojom";
import "diagnostics/mojom/external/time.mojom";
import "diagnostics/mojom/public/cros_healthd_diagnostics.mojom";
import "diagnostics/mojom/public/cros_healthd_probe.mojom";
import "diagnostics/mojom/public/cros_healthd_routines.mojom";

interface Delegate {
  // Get fingerprint frame data with specific capture type. We only support
  // testing related capture types.
  //
  // The request:
  // * |type| - The capture type.
  //
  // The response:
  // * |result| - Fingerprint frame result.
  // * |err| - Error message if existed.
  GetFingerprintFrame(FingerprintCaptureType type)
      => (FingerprintFrameResult result, string? err);

  // Get fingerprint information.
  //
  // The response:
  // * |result| - Fingerprint information.
  // * |err| - Error message if existed.
  GetFingerprintInfo() => (FingerprintInfoResult result, string? err);

  // Set the target LED to the specified color.
  //
  // The request:
  // * |name| - The target LED.
  // * |color| - The specified LED color.
  //
  // The response:
  // * |err| - Error message if existed.
  SetLedColor(LedName name, LedColor color) => (string? err);

  // Switch the LED back to be automatically controlled by EC.
  //
  // The request:
  // * |name| - The target LED.
  //
  // The response:
  // * |err| - Error message if existed.
  ResetLedColor(LedName name) => (string? err);

  // Monitor audio jack events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorAudioJack(pending_remote<AudioJackObserver> observer);

  // Monitor touchpad events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorTouchpad(pending_remote<TouchpadObserver> observer);

  // Fetch boot performance info.
  FetchBootPerformance() => (BootPerformanceResult result);

  // Monitor touchscreen events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorTouchscreen(pending_remote<TouchscreenObserver> observer);

  // Monitor stylus garage events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorStylusGarage(pending_remote<StylusGarageObserver> observer);

  // Monitor stylus events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorStylus(pending_remote<StylusObserver> observer);

  // Obtains lid angle from EC. Returns null if error is happened.
  GetLidAngle() => (uint16? lid_angle);

  // Get Platform Service Record (PSR) information.
  //
  // The response:
  // * |result| - PSR information result.
  // * |err| - Error message if existed.
  GetPsr() => (PsrInfo result, string? err);

  // Returns a map of connector_ids to display info that records the
  // active external display connectors.
  //
  // The request:
  // * |last_known_connectors| - The set of connectors last identified.
  //
  // The response:
  // * |connectors| - Maps the connector_id to its corresponding display info.
  // * |err| - Error message if existed.
  GetConnectedExternalDisplayConnectors(array<uint32>? last_known_connectors)
      => (map<uint32, ExternalDisplayInfo> connectors, string? err);

  // Returns whether a privacy screen is supported and whether is enabled on the
  // embedded display.
  //
  // The response:
  // * |privacy_screen_supported| - Whether privacy screen is supported on the
  //                                device.
  // * |privacy_screen_enabled| - Whether privacy screen is on.
  GetPrivacyScreenInfo() => (bool privacy_screen_supported,
                             bool privacy_screen_enabled,
                             string? err);

  // Fetch display info.
  //
  // The response:
  // * |result| - Struct containing display info.
  FetchDisplayInfo() => (DisplayResult result);

  // Monitor power button events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorPowerButton(pending_remote<PowerButtonObserver> observer);

  // Run a prime search routine.
  //
  // The request:
  // * |exec_duration| - The time duration this routine should run.
  // * |max_num| - The maximum number under which all prime number should be
  //               found.
  //
  // The response:
  // * |passed| - Whether the routine has passed.
  RunPrimeSearch(
      ash.cros_healthd.external.mojo_base.mojom.TimeDelta exec_duration,
      uint64 max_num) => (bool passed);

  // Monitor volume button events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorVolumeButton(pending_remote<VolumeButtonObserver> observer);

  // Run a floating point accuracy routine.
  //
  // The request:
  // * |exec_duration| - The time duration this routine should run.
  //
  // The response:
  // * |passed| - Whether the routine has passed.
  RunFloatingPoint(
      ash.cros_healthd.external.mojo_base.mojom.TimeDelta exec_duration)
      => (bool passed);

  // Get the fan speed for all fans in rpm through the EC. The number of
  // returned fan speed is the same as the total number of fans.
  //
  // The response:
  // * |fan_rpms| - An array containing the rpm of each fan.
  // * |err| - Error message if existed.
  GetAllFanSpeed() => (array<uint16> fan_rpms, string? err);

  // Set the fan speed for given fans through the EC.
  //
  // The request:
  // * |fan_id_to_rpm| - The key is the fan index, and the value is the fan
  //                     speed to set the fan to in rpm.
  //
  // The response:
  // * |err| - Error message if existed.
  SetFanSpeed(map<uint8, uint16> fan_id_to_rpm) => (string? err);

  // Set the fan speed for all fans to auto fan control.
  //
  // The response:
  // * |err| - Error message if existed.
  SetAllFanAutoControl() => (string? err);

  // Get the name and temperature from thermal sensors in the EC.
  //
  // The response:
  // * |thermal_sensors| - An array containing the information for each thermal
  //                       sensor.
  // * |err| - Error message if existed.
  GetEcThermalSensors() => (array<ThermalSensorInfo> thermal_sensors, string? err);

  // Get internal touchpad devices.
  //
  //
  // The response:
  // * |devices| - A list of TouchpadDevice pointers.
  // * |err| - Error message if existed.
  GetTouchpadDevices() => (array<TouchpadDevice> devices, string? err);

  // Get the manufacture date of smart battery by reading I2C bus from EC.
  //
  // The request:
  // * |i2c_port| - I2C port number, which is different across models.
  //
  // The response:
  // * |manufacture_date| - 32-bit datetime formats. Return null if error
  //                        occurs.
  GetSmartBatteryManufactureDate(uint8 i2c_port) => (uint32? manufacture_date);

  // Get the internal temperature of smart battery by reading I2C bus from EC.
  //
  // The request:
  // * |i2c_port| - I2C port number, which is different across models.
  //
  // The response:
  // * |temperature| - temperature in tenth degree Kelvin increments. Return
  //                   null if error occurs.
  GetSmartBatteryTemperature(uint8 i2c_port) => (uint32? temperature);

  // Run a urandom routine.
  //
  // The request:
  // * |exec_duration| - The time duration this routine should run.
  //
  // The response:
  // * |passed| - Whether the routine has passed.
  RunUrandom(
      ash.cros_healthd.external.mojo_base.mojom.TimeDelta exec_duration)
      => (bool passed);
};
