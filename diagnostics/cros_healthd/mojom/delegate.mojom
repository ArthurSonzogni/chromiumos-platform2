// Copyright 2022 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.cros_healthd.mojom;

import "diagnostics/cros_healthd/mojom/executor.mojom";
import "diagnostics/mojom/public/cros_healthd_diagnostics.mojom";
import "diagnostics/mojom/public/cros_healthd_probe.mojom";

interface Delegate {
  // Get fingerprint frame data with specific capture type. We only support
  // testing related capture types.
  //
  // The request:
  // * |type| - The capture type.
  //
  // The response:
  // * |result| - Fingerprint frame result.
  // * |err| - Error message if existed.
  GetFingerprintFrame(FingerprintCaptureType type)
      => (FingerprintFrameResult result, string? err);

  // Get fingerprint information.
  //
  // The response:
  // * |result| - Fingerprint information.
  // * |err| - Error message if existed.
  GetFingerprintInfo() => (FingerprintInfoResult result, string? err);

  // Set the target LED to the specified color.
  //
  // The request:
  // * |name| - The target LED.
  // * |color| - The specified LED color.
  //
  // The response:
  // * |err| - Error message if existed.
  SetLedColor(LedName name, LedColor color) => (string? err);

  // Switch the LED back to be automatically controlled by EC.
  //
  // The request:
  // * |name| - The target LED.
  //
  // The response:
  // * |err| - Error message if existed.
  ResetLedColor(LedName name) => (string? err);

  // Monitor audio jack events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorAudioJack(pending_remote<AudioJackObserver> observer);

  // Monitor touchpad events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorTouchpad(pending_remote<TouchpadObserver> observer);

  // Fetch boot performance info.
  FetchBootPerformance() => (BootPerformanceResult result);

  // Monitor touchscreen events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorTouchscreen(pending_remote<TouchscreenObserver> observer);

  // Monitor stylus garage events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorStylusGarage(pending_remote<StylusGarageObserver> observer);

  // Monitor stylus events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorStylus(pending_remote<StylusObserver> observer);

  // Obtains lid angle from EC. Returns null if error is happened.
  GetLidAngle() => (uint16? lid_angle);

  // Get Platform Service Record (PSR) information.
  //
  // The response:
  // * |result| - PSR information result.
  // * |err| - Error message if existed.
  GetPsr() => (PsrInfo result, string? err);

  // Get the free disk space in bytes on the volume containing |path|.
  //
  // The request:
  // * |path| - Target path.
  //
  // The response:
  // * |free_space_byte| - Free disk space in bytes.
  //
  GetAmountOfFreeDiskSpace(string path) => (uint64? free_space_byte);

  // Returns a map of connector_ids to display info that records the
  // active HDMI connectors.
  //
  // The response:
  // * |connectors| - Maps the connector_id to its corresponding display info.
  // * |err| - Error message if existed.
  GetConnectedHdmiConnectors()
      => (map<uint32, ExternalDisplayInfo> connectors, string? err);

  // Returns whether a privacy screen is supported and whether is enabled on the
  // embedded display.
  //
  // The response:
  // * |privacy_screen_supported| - Whether privacy screen is supported on the
  //                                device.
  // * |privacy_screen_enabled| - Whether privacy screen is on.
  GetPrivacyScreenInfo() => (bool privacy_screen_supported,
                             bool privacy_screen_enabled,
                             string? err);

  // Fetch display info.
  //
  // The response:
  // * |result| - Struct containing display info.
  FetchDisplayInfo() => (DisplayResult result);

  // Monitor power button events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorPowerButton(pending_remote<PowerButtonObserver> observer);

  // Run a prime search routine.
  //
  // The request:
  // * |duration_sec| - The number of seconds this routine can run.
  // * |max_num| - The maximum number under which all prime number should be
  //               found.
  //
  // The response:
  // * |passed| - Whether the routine has passed.
  RunPrimeSearch(uint32 duration_sec, uint64 max_num) => (bool passed);

  // Monitor volume button events.
  //
  // The request:
  // * |observer| - The observer to notify client.
  MonitorVolumeButton(pending_remote<VolumeButtonObserver> observer);
};
