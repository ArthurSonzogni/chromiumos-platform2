# Copyright 2020 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/pkg_config.gni")

# Library that provides core functionality for the cros_healthd daemon.
pkg_config("libcros_healthd_pkg_deps") {
  pkg_deps = [
    "dbus-1",
    "iioservice_ipc",
    "libbrillo",
    "libchrome",
    "libmetrics",
    "libmojo",
    "mojo_service_manager",
    "vboot_host",
  ]
}

source_set("libcros_healthd") {
  sources = [
    "cros_healthd_daemon.cc",
    "cros_healthd_diagnostics_service.cc",
    "cros_healthd_mojo_service.cc",
    "event_aggregator.cc",
    "fetch_aggregator.cc",
  ]
  configs += [ ":libcros_healthd_pkg_deps" ]
  deps = [
    "//diagnostics/base",
    "//diagnostics/cros_healthd/events:libcros_healthd_events",
    "//diagnostics/cros_healthd/fetchers:libcros_healthd_fetchers",
    "//diagnostics/cros_healthd/routines",
    "//diagnostics/cros_healthd/system",
    "//diagnostics/dbus_bindings",
    "//diagnostics/mojom:libmojom_utils",
    "//diagnostics/mojom/external:libcros_healthd_internal",
    "//diagnostics/mojom/external:libnetwork_diagnostics_mojo_bindings",
    "//diagnostics/mojom/public:libcros_healthd_mojo_bindings",
  ]
}

executable("cros_healthd") {
  sources = [ "main.cc" ]
  configs += [ ":libcros_healthd_pkg_deps" ]
  install_path = "bin"
  assert_no_deps = [ "//diagnostics/cros_healthd/delegate/*" ]
  deps = [
    ":libcros_healthd",
    "//diagnostics/cros_healthd/executor",
    "//diagnostics/cros_healthd/minijail",
    "//diagnostics/cros_healthd/system",
  ]
}

if (use.test) {
  pkg_config("cros_healthd_test_pkg_deps") {
    pkg_deps = [
      "iioservice_ipc",
      "libchrome",
      "libchrome-test",
      "mojo_service_manager",
    ]
  }

  executable("cros_healthd_test") {
    run_test = true
    sources = [ "cros_healthd_diagnostics_service_test.cc" ]
    configs += [ ":cros_healthd_test_pkg_deps" ]
    deps = [
      ":libcros_healthd",
      "//diagnostics/base",
      "//diagnostics/base:healthd_testrunner",
      "//diagnostics/base:test",
      "//diagnostics/base:test_support",
      "//diagnostics/cros_healthd/delegate:test",
      "//diagnostics/cros_healthd/delegate/events:test",
      "//diagnostics/cros_healthd/delegate/fetchers:test",
      "//diagnostics/cros_healthd/delegate/routines:test",
      "//diagnostics/cros_healthd/delegate/utils:test",
      "//diagnostics/cros_healthd/events:libcros_healthd_events_test",
      "//diagnostics/cros_healthd/executor/utils:test",
      "//diagnostics/cros_healthd/fetchers:libcros_healthd_fetchers_test",
      "//diagnostics/cros_healthd/routines:libroutine_test_utils",
      "//diagnostics/cros_healthd/routines:routine_test",
      "//diagnostics/cros_healthd/routines/android_network:android_network_test",
      "//diagnostics/cros_healthd/routines/audio:audio_test",
      "//diagnostics/cros_healthd/routines/battery_and_power:battery_and_power_test",
      "//diagnostics/cros_healthd/routines/bluetooth:bluetooth_test",
      "//diagnostics/cros_healthd/routines/camera:camera_test",
      "//diagnostics/cros_healthd/routines/fan:fan_test",
      "//diagnostics/cros_healthd/routines/fingerprint:fingerprint_test",
      "//diagnostics/cros_healthd/routines/hardware_button:hardware_button_test",
      "//diagnostics/cros_healthd/routines/led:led_test",
      "//diagnostics/cros_healthd/routines/memory_and_cpu:memory_and_cpu_test",
      "//diagnostics/cros_healthd/routines/network:network_test",
      "//diagnostics/cros_healthd/routines/privacy_screen:privacy_screen_test",
      "//diagnostics/cros_healthd/routines/sensor:sensor_test",
      "//diagnostics/cros_healthd/routines/storage:storage_test",
      "//diagnostics/cros_healthd/system:system_test",
      "//diagnostics/cros_healthd/system:test_support",
      "//diagnostics/cros_healthd/utils:utils_test",
      "//diagnostics/dbus_bindings",
      "//diagnostics/mojom:libmojom_utils_test",
    ]
  }
}
