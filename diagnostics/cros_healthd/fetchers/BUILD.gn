# Copyright 2020 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//common-mk/pkg_config.gni")

# Library that provides fetchers used by cros_healthd.
pkg_config("fetchers_pkg_deps") {
  pkg_deps = [
    "dbus-1",
    "iioservice_ipc",
    "libattestation-client",
    "libbrillo",
    "libchrome",
    "libconcierge-client",
    "libmojo",
    "libsession_manager-client",
    "libspaced",
    "libtpm_manager-client",
    "libudev",
    "protobuf",
    "re2",
    "system_api",
  ]
}

source_set("fetchers") {
  configs += [ ":fetchers_pkg_deps" ]
  public_deps = [ "//diagnostics/mojom/public:libcros_healthd_mojo_bindings" ]
  deps = [
    "//diagnostics/base",
    "//diagnostics/cros_healthd/fetchers/storage:storage_data_source",
    "//diagnostics/cros_healthd/mojom",
    "//diagnostics/cros_healthd/system",
    "//diagnostics/cros_healthd/utils",
    "//diagnostics/dbus_bindings",
    "//diagnostics/mojom/external:libcros_healthd_internal",
    "//diagnostics/mojom/external:libnetwork_health_mojo_bindings",
  ]
  sources = [
    "audio_fetcher.cc",
    "audio_hardware_fetcher.cc",
    "backlight_fetcher.cc",
    "battery_fetcher.cc",
    "bluetooth_fetcher.cc",
    "bluetooth_fetcher_floss.cc",
    "bus_fetcher.cc",
    "cpu_fetcher.cc",
    "disk_fetcher.cc",
    "fan_fetcher.cc",
    "input_fetcher.cc",
    "memory_fetcher.cc",
    "network_fetcher.cc",
    "network_interface_fetcher.cc",
    "process_fetcher.cc",
    "sensor_fetcher.cc",
    "stateful_partition_fetcher.cc",
    "system_fetcher.cc",
    "thermal_fetcher.cc",
    "timezone_fetcher.cc",
    "tpm_fetcher.cc",
  ]
}

if (use.test) {
  pkg_config("fetchers_test_pkg_deps") {
    pkg_deps = [
      "egl",
      "fwupd",
      "glesv2",
      "iioservice_ipc",
      "libattestation-client",
      "libattestation-client-test",
      "libbrillo",
      "libchrome",
      "libchrome-test",
      "libconcierge-client",
      "libconcierge-client-test",
      "libsession_manager-client",
      "libsession_manager-client-test",
      "libspaced",
      "libspaced-test",
      "libtpm_manager-client",
      "libtpm_manager-client-test",
      "mojo_service_manager",
      "system_api",
    ]
  }

  source_set("fetchers_test") {
    sources = [
      "audio_fetcher_test.cc",
      "audio_hardware_fetcher_test.cc",
      "backlight_fetcher_test.cc",
      "battery_fetcher_test.cc",
      "bluetooth_fetcher_floss_test.cc",
      "bluetooth_fetcher_test.cc",
      "bus_fetcher_test.cc",
      "cpu_fetcher_test.cc",
      "fan_fetcher_test.cc",
      "input_fetcher_test.cc",
      "memory_fetcher_test.cc",
      "network_fetcher_test.cc",
      "network_interface_fetcher_test.cc",
      "process_fetcher_test.cc",
      "sensor_fetcher_test.cc",
      "stateful_partition_fetcher_test.cc",
      "system_fetcher_test.cc",
      "thermal_fetcher_test.cc",
      "timezone_fetcher_test.cc",
      "tpm_fetcher_test.cc",
    ]
    configs += [ ":fetchers_test_pkg_deps" ]
    deps = [
      ":fetchers",
      "//diagnostics/base",
      "//diagnostics/base:healthd_testrunner",
      "//diagnostics/cros_healthd/fetchers/storage:storage_data_source_test",
      "//diagnostics/cros_healthd/mojom",
      "//diagnostics/cros_healthd/system:test_support",
      "//diagnostics/cros_healthd/utils",
      "//diagnostics/dbus_bindings",
    ]
  }
}

if (use.fuzzer) {
  pkg_config("fetch_system_info_fuzzer_pkg_deps") {
    pkg_deps = [ "libchrome" ]
  }

  executable("fetch_system_info_fuzzer") {
    sources = [ "fetch_system_info_fuzzer.cc" ]
    configs += [
      ":fetch_system_info_fuzzer_pkg_deps",
      "//common-mk/common_fuzzer:common_fuzzer",
    ]
    deps = [
      ":fetchers",
      "//diagnostics/base",
      "//diagnostics/cros_healthd/system:test_support",
    ]
  }
}
