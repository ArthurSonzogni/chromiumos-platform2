// Copyright 2023 The ChromiumOS Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Definitions for the exception API exposed by the cros_healthd daemon.

// NOTE: This mojom should be kept in sync with the copy in Chromium's repo in
// src/chromeos/ash/services/cros_healthd/public/mojom/cros_healthd_exception.mojom.

module ash.cros_healthd.mojom;

// A generic exception type for all HealthD public API.
//
// When we raise Exception through a mojo disconnection, we will encode it to a
// mojo disconnection error. A mojo disconnection error contains an uint32 error
// code and a string message. The error code is set to |type| and the message is
// set to a json contains the rest. The json looks like:
// `{"reason": <int>, "debug_message": <string>}`.
// To decode Exception from a mojo disconnection error, we must check the error
// code first. If it is "0", this error is not a Healthd Exception, and the
// message could be an arbitrary string. Otherwise, the message should always be
// a json which contains the rest fields.
// A mojo built-in error should be decoded as:
// Exception{
//   type: kMojoDisconnectWithoutReason,
//   reason: kGeneric,
//   debug_message: |message|,
// }
//
// NextMinVersion: 1, NextIndex: 3
struct Exception {
  // The type of this exception.
  // Only add new types when it will be used for most features and will be
  // useful without specifying the reason. Otherwise, simply use reason.
  // When we raise Exception through a mojo disconnection, this will be the
  // mojo error code.
  [Extensible]
  enum Type {
    // This is required for backwards compatibility. Don't raise this.
    // Set to 1 because 0 is reserved for kMojoDisconnectWithoutReason.
    [Default] kUnmappedEnumField = 1,
    // This is for compatibility with a mojo built-in disconnection error.
    // Don't raise this. Its value must be "0".
    kMojoDisconnectWithoutReason = 0,
    // The feature is not supported on this device. Clients can expect that
    // this won't change frequently. That is, if an API returns this, clients
    // don't need to check it again (at least until next boot) and can assume
    // that the feature cannot be used.
    kNotSupported = 2,
    // Any other exceptions that we don't expect to happen. Clients should
    // simply report the error.
    kUnexpected = 3,
  };

  // A specific reason for clients to handle exceptions (e.g. showing a
  // specific message to UI). Use this instead of parsing |debug_message|.
  // Only add a new reason if there is a client handling that reason. Donâ€™t add
  // reasons like kServiceUnavailable, but something like
  // kFailedToCallFooService, to make it specific.
  [Extensible]
  enum Reason {
    // This is required for backwards compatibility. Don't raise this.
    [Default] kUnmappedEnumField = 0,
    // If there is no client to handle this exception, use this as the reason.
    kGeneric = 1,
  };

  Type type@0;
  Reason reason@1;
  // A human readable message for debugging. If a client want to handle a
  // specific exception, use |reason|. Don't rely on the content because it
  // could change anytime.
  string debug_message@2;
};
