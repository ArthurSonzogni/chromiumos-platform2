// Copyright 2021 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package hps;
option go_package = "chromiumos/system_api/hps_proto";

option optimize_for = LITE_RUNTIME;

// Configuration of an HPS feature for the Enable method
// More FilterConfigs will be added here as more filters are added
message FeatureConfig {
  // The simplest filter with a default threshold
  message BasicFilterConfig {}
  // A filter that changes state when number of same consecutive inference
  // results is above a count limit.
  message ConsecutiveResultsFilterConfig {
    // 'count' is the number of consecutive results that must be either above
    // or below the threshold value for the filter to change state and raise a
    // signal.
    int32 count = 1;
    // 'threshold' is the value that the inference result is compared against.
    // If the inference result is > than the threshold it is considered a
    // positive result, if the inference result is <= to the threshold then it
    // is considered a negative result.
    // Note: The inference result is a value from [-128, 128), so due to the
    // comparison being 'inference value > threshold', the threshold value
    // passed must be in the range of [-128, 127). A threshold value outside of
    // this range will result in the filter never changing state.
    int32 threshold = 2;
    // 'initial_state' can be used to set the filter to initially be true or
    // false. This is so that client and the filter can be in sync on the
    // initial state of the filter.
    bool initial_state = 3;

    // *threshold are values that the inference result is compared against.
    // If the inference result is >= the positive_score_threshold it is
    // considered a positive result; if the inference result is < the
    // negative_score_threshold then it is considered a negative result;
    // otherwise it is considered as a uncertain result.
    int32 positive_score_threshold = 4;
    int32 negative_score_threshold = 5;

    // *count_threshold are limits of the count consecutive results; the current
    // consecutive_result is used to update the current filer result only if the
    // count is above the *count_threshold.
    int32 positive_count_threshold = 6;
    int32 negative_count_threshold = 7;
    int32 uncertain_count_threshold = 8;
  }

  message AverageFilterConfig {
    // The inference score will be averged among last `average_window_size`
    // results.
    int32 average_window_size = 1;

    // *threshold are values that the inference result is compared against.
    // If the average inference score is >= the positive_score_threshold it is
    // considered a positive result; if the average inference score is < the
    // negative_score_threshold then it is considered a negative result;
    // otherwise it is considered as a uncertain result.
    int32 positive_score_threshold = 2;
    int32 negative_score_threshold = 3;

    // If the inference result is invalid, then this default score will be used.
    int32 default_uncertain_score = 4;
  }
  oneof filter_config {
    BasicFilterConfig basic_filter_config = 1;
    ConsecutiveResultsFilterConfig consecutive_results_filter_config = 2;
    AverageFilterConfig average_filter_config = 3;
  }
}

// Represent the result from Hps Daemon to other client.
// Used for HpsNotify and HpsSense.
enum HpsResult {
  UNKNOWN = 0;
  NEGATIVE = 1;
  POSITIVE = 2;
}

message HpsResultProto {
  HpsResult value = 1;
}
